# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lte_swig', [dirname(__file__)])
        except ImportError:
            import _lte_swig
            return _lte_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_lte_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _lte_swig = swig_import_helper()
    del swig_import_helper
else:
    import _lte_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _lte_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _lte_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _lte_swig.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _lte_swig.high_res_timer_epoch()
class mib_unpack_vbm(object):
    """Block unpacks MIB and publishes the parameters as messages."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(name="mib_unpack_vbm"):
        """
        make(std::string name="mib_unpack_vbm") -> mib_unpack_vbm_sptr

        Return a shared_ptr to a new instance of lte::mib_unpack_vbm.

        To avoid accidental use of raw pointers, lte::mib_unpack_vbm's constructor is in a private implementation class. lte::mib_unpack_vbm::make is the public interface for creating new instances.

        Params: (name)
        """
        return _lte_swig.mib_unpack_vbm_make(name)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_mib_unpack_vbm
    __del__ = lambda self : None;
mib_unpack_vbm_swigregister = _lte_swig.mib_unpack_vbm_swigregister
mib_unpack_vbm_swigregister(mib_unpack_vbm)

def mib_unpack_vbm_make(name="mib_unpack_vbm"):
  """
    mib_unpack_vbm_make(std::string name="mib_unpack_vbm") -> mib_unpack_vbm_sptr

    Return a shared_ptr to a new instance of lte::mib_unpack_vbm.

    To avoid accidental use of raw pointers, lte::mib_unpack_vbm's constructor is in a private implementation class. lte::mib_unpack_vbm::make is the public interface for creating new instances.

    Params: (name)
    """
  return _lte_swig.mib_unpack_vbm_make(name)

class mib_unpack_vbm_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::mib_unpack_vbm)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::mib_unpack_vbm)> self) -> mib_unpack_vbm_sptr
        __init__(boost::shared_ptr<(gr::lte::mib_unpack_vbm)> self, mib_unpack_vbm p) -> mib_unpack_vbm_sptr
        """
        this = _lte_swig.new_mib_unpack_vbm_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mib_unpack_vbm_sptr self) -> mib_unpack_vbm"""
        return _lte_swig.mib_unpack_vbm_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_mib_unpack_vbm_sptr
    __del__ = lambda self : None;
    def make(self, name="mib_unpack_vbm"):
        """
        make(mib_unpack_vbm_sptr self, std::string name="mib_unpack_vbm") -> mib_unpack_vbm_sptr

        Return a shared_ptr to a new instance of lte::mib_unpack_vbm.

        To avoid accidental use of raw pointers, lte::mib_unpack_vbm's constructor is in a private implementation class. lte::mib_unpack_vbm::make is the public interface for creating new instances.

        Params: (name)
        """
        return _lte_swig.mib_unpack_vbm_sptr_make(self, name)

    def history(self):
        """history(mib_unpack_vbm_sptr self) -> unsigned int"""
        return _lte_swig.mib_unpack_vbm_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mib_unpack_vbm_sptr self, int which, int delay)
        declare_sample_delay(mib_unpack_vbm_sptr self, unsigned int delay)
        """
        return _lte_swig.mib_unpack_vbm_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mib_unpack_vbm_sptr self, int which) -> unsigned int"""
        return _lte_swig.mib_unpack_vbm_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mib_unpack_vbm_sptr self) -> int"""
        return _lte_swig.mib_unpack_vbm_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mib_unpack_vbm_sptr self) -> double"""
        return _lte_swig.mib_unpack_vbm_sptr_relative_rate(self)

    def start(self):
        """start(mib_unpack_vbm_sptr self) -> bool"""
        return _lte_swig.mib_unpack_vbm_sptr_start(self)

    def stop(self):
        """stop(mib_unpack_vbm_sptr self) -> bool"""
        return _lte_swig.mib_unpack_vbm_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mib_unpack_vbm_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.mib_unpack_vbm_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mib_unpack_vbm_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.mib_unpack_vbm_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mib_unpack_vbm_sptr self) -> int"""
        return _lte_swig.mib_unpack_vbm_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mib_unpack_vbm_sptr self, int m)"""
        return _lte_swig.mib_unpack_vbm_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mib_unpack_vbm_sptr self)"""
        return _lte_swig.mib_unpack_vbm_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mib_unpack_vbm_sptr self) -> bool"""
        return _lte_swig.mib_unpack_vbm_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mib_unpack_vbm_sptr self, int m)"""
        return _lte_swig.mib_unpack_vbm_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mib_unpack_vbm_sptr self) -> int"""
        return _lte_swig.mib_unpack_vbm_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mib_unpack_vbm_sptr self, int i) -> long"""
        return _lte_swig.mib_unpack_vbm_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mib_unpack_vbm_sptr self, long max_output_buffer)
        set_max_output_buffer(mib_unpack_vbm_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.mib_unpack_vbm_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mib_unpack_vbm_sptr self, int i) -> long"""
        return _lte_swig.mib_unpack_vbm_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mib_unpack_vbm_sptr self, long min_output_buffer)
        set_min_output_buffer(mib_unpack_vbm_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.mib_unpack_vbm_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mib_unpack_vbm_sptr self) -> float"""
        return _lte_swig.mib_unpack_vbm_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mib_unpack_vbm_sptr self) -> float"""
        return _lte_swig.mib_unpack_vbm_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mib_unpack_vbm_sptr self) -> float"""
        return _lte_swig.mib_unpack_vbm_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mib_unpack_vbm_sptr self) -> float"""
        return _lte_swig.mib_unpack_vbm_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mib_unpack_vbm_sptr self) -> float"""
        return _lte_swig.mib_unpack_vbm_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mib_unpack_vbm_sptr self) -> float"""
        return _lte_swig.mib_unpack_vbm_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mib_unpack_vbm_sptr self, int which) -> float
        pc_input_buffers_full(mib_unpack_vbm_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mib_unpack_vbm_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mib_unpack_vbm_sptr self, int which) -> float
        pc_input_buffers_full_avg(mib_unpack_vbm_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mib_unpack_vbm_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mib_unpack_vbm_sptr self, int which) -> float
        pc_input_buffers_full_var(mib_unpack_vbm_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mib_unpack_vbm_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mib_unpack_vbm_sptr self, int which) -> float
        pc_output_buffers_full(mib_unpack_vbm_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mib_unpack_vbm_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mib_unpack_vbm_sptr self, int which) -> float
        pc_output_buffers_full_avg(mib_unpack_vbm_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mib_unpack_vbm_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mib_unpack_vbm_sptr self, int which) -> float
        pc_output_buffers_full_var(mib_unpack_vbm_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mib_unpack_vbm_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mib_unpack_vbm_sptr self) -> float"""
        return _lte_swig.mib_unpack_vbm_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mib_unpack_vbm_sptr self) -> float"""
        return _lte_swig.mib_unpack_vbm_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mib_unpack_vbm_sptr self) -> float"""
        return _lte_swig.mib_unpack_vbm_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mib_unpack_vbm_sptr self) -> float"""
        return _lte_swig.mib_unpack_vbm_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mib_unpack_vbm_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.mib_unpack_vbm_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mib_unpack_vbm_sptr self)"""
        return _lte_swig.mib_unpack_vbm_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mib_unpack_vbm_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.mib_unpack_vbm_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mib_unpack_vbm_sptr self) -> int"""
        return _lte_swig.mib_unpack_vbm_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mib_unpack_vbm_sptr self) -> int"""
        return _lte_swig.mib_unpack_vbm_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mib_unpack_vbm_sptr self, int priority) -> int"""
        return _lte_swig.mib_unpack_vbm_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mib_unpack_vbm_sptr self) -> std::string"""
        return _lte_swig.mib_unpack_vbm_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mib_unpack_vbm_sptr self) -> std::string"""
        return _lte_swig.mib_unpack_vbm_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mib_unpack_vbm_sptr self) -> io_signature_sptr"""
        return _lte_swig.mib_unpack_vbm_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mib_unpack_vbm_sptr self) -> io_signature_sptr"""
        return _lte_swig.mib_unpack_vbm_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mib_unpack_vbm_sptr self) -> long"""
        return _lte_swig.mib_unpack_vbm_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mib_unpack_vbm_sptr self) -> basic_block_sptr"""
        return _lte_swig.mib_unpack_vbm_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mib_unpack_vbm_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.mib_unpack_vbm_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mib_unpack_vbm_sptr self) -> std::string"""
        return _lte_swig.mib_unpack_vbm_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mib_unpack_vbm_sptr self, std::string name)"""
        return _lte_swig.mib_unpack_vbm_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mib_unpack_vbm_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.mib_unpack_vbm_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mib_unpack_vbm_sptr self) -> swig_int_ptr"""
        return _lte_swig.mib_unpack_vbm_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mib_unpack_vbm_sptr self) -> swig_int_ptr"""
        return _lte_swig.mib_unpack_vbm_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mib_unpack_vbm_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.mib_unpack_vbm_sptr_message_subscribers(self, *args, **kwargs)

mib_unpack_vbm_sptr_swigregister = _lte_swig.mib_unpack_vbm_sptr_swigregister
mib_unpack_vbm_sptr_swigregister(mib_unpack_vbm_sptr)

mib_unpack_vbm_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mib_unpack_vbm = mib_unpack_vbm.make;

class crc_check_vbvb(object):
    """Calculate CRC and check if it is equal to received CRC."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int data_len, int final_xor, std::string name="crc_check_vbvb") -> crc_check_vbvb_sptr

        Return a shared_ptr to a new instance of lte::crc_check_vbvb.

        To avoid accidental use of raw pointers, lte::crc_check_vbvb's constructor is in a private implementation class. lte::crc_check_vbvb::make is the public interface for creating new instances.

        Params: (data_len, final_xor, name)
        """
        return _lte_swig.crc_check_vbvb_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_crc_check_vbvb
    __del__ = lambda self : None;
crc_check_vbvb_swigregister = _lte_swig.crc_check_vbvb_swigregister
crc_check_vbvb_swigregister(crc_check_vbvb)

def crc_check_vbvb_make(*args, **kwargs):
  """
    crc_check_vbvb_make(int data_len, int final_xor, std::string name="crc_check_vbvb") -> crc_check_vbvb_sptr

    Return a shared_ptr to a new instance of lte::crc_check_vbvb.

    To avoid accidental use of raw pointers, lte::crc_check_vbvb's constructor is in a private implementation class. lte::crc_check_vbvb::make is the public interface for creating new instances.

    Params: (data_len, final_xor, name)
    """
  return _lte_swig.crc_check_vbvb_make(*args, **kwargs)

class crc_check_vbvb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::crc_check_vbvb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::crc_check_vbvb)> self) -> crc_check_vbvb_sptr
        __init__(boost::shared_ptr<(gr::lte::crc_check_vbvb)> self, crc_check_vbvb p) -> crc_check_vbvb_sptr
        """
        this = _lte_swig.new_crc_check_vbvb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(crc_check_vbvb_sptr self) -> crc_check_vbvb"""
        return _lte_swig.crc_check_vbvb_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_crc_check_vbvb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(crc_check_vbvb_sptr self, int data_len, int final_xor, std::string name="crc_check_vbvb") -> crc_check_vbvb_sptr

        Return a shared_ptr to a new instance of lte::crc_check_vbvb.

        To avoid accidental use of raw pointers, lte::crc_check_vbvb's constructor is in a private implementation class. lte::crc_check_vbvb::make is the public interface for creating new instances.

        Params: (data_len, final_xor, name)
        """
        return _lte_swig.crc_check_vbvb_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(crc_check_vbvb_sptr self) -> unsigned int"""
        return _lte_swig.crc_check_vbvb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(crc_check_vbvb_sptr self, int which, int delay)
        declare_sample_delay(crc_check_vbvb_sptr self, unsigned int delay)
        """
        return _lte_swig.crc_check_vbvb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(crc_check_vbvb_sptr self, int which) -> unsigned int"""
        return _lte_swig.crc_check_vbvb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(crc_check_vbvb_sptr self) -> int"""
        return _lte_swig.crc_check_vbvb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(crc_check_vbvb_sptr self) -> double"""
        return _lte_swig.crc_check_vbvb_sptr_relative_rate(self)

    def start(self):
        """start(crc_check_vbvb_sptr self) -> bool"""
        return _lte_swig.crc_check_vbvb_sptr_start(self)

    def stop(self):
        """stop(crc_check_vbvb_sptr self) -> bool"""
        return _lte_swig.crc_check_vbvb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(crc_check_vbvb_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.crc_check_vbvb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(crc_check_vbvb_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.crc_check_vbvb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(crc_check_vbvb_sptr self) -> int"""
        return _lte_swig.crc_check_vbvb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(crc_check_vbvb_sptr self, int m)"""
        return _lte_swig.crc_check_vbvb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(crc_check_vbvb_sptr self)"""
        return _lte_swig.crc_check_vbvb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(crc_check_vbvb_sptr self) -> bool"""
        return _lte_swig.crc_check_vbvb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(crc_check_vbvb_sptr self, int m)"""
        return _lte_swig.crc_check_vbvb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(crc_check_vbvb_sptr self) -> int"""
        return _lte_swig.crc_check_vbvb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(crc_check_vbvb_sptr self, int i) -> long"""
        return _lte_swig.crc_check_vbvb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(crc_check_vbvb_sptr self, long max_output_buffer)
        set_max_output_buffer(crc_check_vbvb_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.crc_check_vbvb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(crc_check_vbvb_sptr self, int i) -> long"""
        return _lte_swig.crc_check_vbvb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(crc_check_vbvb_sptr self, long min_output_buffer)
        set_min_output_buffer(crc_check_vbvb_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.crc_check_vbvb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(crc_check_vbvb_sptr self) -> float"""
        return _lte_swig.crc_check_vbvb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(crc_check_vbvb_sptr self) -> float"""
        return _lte_swig.crc_check_vbvb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(crc_check_vbvb_sptr self) -> float"""
        return _lte_swig.crc_check_vbvb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(crc_check_vbvb_sptr self) -> float"""
        return _lte_swig.crc_check_vbvb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(crc_check_vbvb_sptr self) -> float"""
        return _lte_swig.crc_check_vbvb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(crc_check_vbvb_sptr self) -> float"""
        return _lte_swig.crc_check_vbvb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(crc_check_vbvb_sptr self, int which) -> float
        pc_input_buffers_full(crc_check_vbvb_sptr self) -> pmt_vector_float
        """
        return _lte_swig.crc_check_vbvb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(crc_check_vbvb_sptr self, int which) -> float
        pc_input_buffers_full_avg(crc_check_vbvb_sptr self) -> pmt_vector_float
        """
        return _lte_swig.crc_check_vbvb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(crc_check_vbvb_sptr self, int which) -> float
        pc_input_buffers_full_var(crc_check_vbvb_sptr self) -> pmt_vector_float
        """
        return _lte_swig.crc_check_vbvb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(crc_check_vbvb_sptr self, int which) -> float
        pc_output_buffers_full(crc_check_vbvb_sptr self) -> pmt_vector_float
        """
        return _lte_swig.crc_check_vbvb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(crc_check_vbvb_sptr self, int which) -> float
        pc_output_buffers_full_avg(crc_check_vbvb_sptr self) -> pmt_vector_float
        """
        return _lte_swig.crc_check_vbvb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(crc_check_vbvb_sptr self, int which) -> float
        pc_output_buffers_full_var(crc_check_vbvb_sptr self) -> pmt_vector_float
        """
        return _lte_swig.crc_check_vbvb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(crc_check_vbvb_sptr self) -> float"""
        return _lte_swig.crc_check_vbvb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(crc_check_vbvb_sptr self) -> float"""
        return _lte_swig.crc_check_vbvb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(crc_check_vbvb_sptr self) -> float"""
        return _lte_swig.crc_check_vbvb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(crc_check_vbvb_sptr self) -> float"""
        return _lte_swig.crc_check_vbvb_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(crc_check_vbvb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.crc_check_vbvb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(crc_check_vbvb_sptr self)"""
        return _lte_swig.crc_check_vbvb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(crc_check_vbvb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.crc_check_vbvb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(crc_check_vbvb_sptr self) -> int"""
        return _lte_swig.crc_check_vbvb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(crc_check_vbvb_sptr self) -> int"""
        return _lte_swig.crc_check_vbvb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(crc_check_vbvb_sptr self, int priority) -> int"""
        return _lte_swig.crc_check_vbvb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(crc_check_vbvb_sptr self) -> std::string"""
        return _lte_swig.crc_check_vbvb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(crc_check_vbvb_sptr self) -> std::string"""
        return _lte_swig.crc_check_vbvb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(crc_check_vbvb_sptr self) -> io_signature_sptr"""
        return _lte_swig.crc_check_vbvb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(crc_check_vbvb_sptr self) -> io_signature_sptr"""
        return _lte_swig.crc_check_vbvb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(crc_check_vbvb_sptr self) -> long"""
        return _lte_swig.crc_check_vbvb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(crc_check_vbvb_sptr self) -> basic_block_sptr"""
        return _lte_swig.crc_check_vbvb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(crc_check_vbvb_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.crc_check_vbvb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(crc_check_vbvb_sptr self) -> std::string"""
        return _lte_swig.crc_check_vbvb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(crc_check_vbvb_sptr self, std::string name)"""
        return _lte_swig.crc_check_vbvb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(crc_check_vbvb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.crc_check_vbvb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(crc_check_vbvb_sptr self) -> swig_int_ptr"""
        return _lte_swig.crc_check_vbvb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(crc_check_vbvb_sptr self) -> swig_int_ptr"""
        return _lte_swig.crc_check_vbvb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(crc_check_vbvb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.crc_check_vbvb_sptr_message_subscribers(self, *args, **kwargs)

crc_check_vbvb_sptr_swigregister = _lte_swig.crc_check_vbvb_sptr_swigregister
crc_check_vbvb_sptr_swigregister(crc_check_vbvb_sptr)

crc_check_vbvb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
crc_check_vbvb = crc_check_vbvb.make;

class bch_crc_check_ant_chooser_bb(object):
    """Depending on the results of the CRC block return number of antennas detected."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(name="bch_crc_check_ant_chooser_bb"):
        """
        make(std::string name="bch_crc_check_ant_chooser_bb") -> bch_crc_check_ant_chooser_bb_sptr

        Return a shared_ptr to a new instance of lte::bch_crc_check_ant_chooser_bb.

        To avoid accidental use of raw pointers, lte::bch_crc_check_ant_chooser_bb's constructor is in a private implementation class. lte::bch_crc_check_ant_chooser_bb::make is the public interface for creating new instances.

        Params: (name)
        """
        return _lte_swig.bch_crc_check_ant_chooser_bb_make(name)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_bch_crc_check_ant_chooser_bb
    __del__ = lambda self : None;
bch_crc_check_ant_chooser_bb_swigregister = _lte_swig.bch_crc_check_ant_chooser_bb_swigregister
bch_crc_check_ant_chooser_bb_swigregister(bch_crc_check_ant_chooser_bb)

def bch_crc_check_ant_chooser_bb_make(name="bch_crc_check_ant_chooser_bb"):
  """
    bch_crc_check_ant_chooser_bb_make(std::string name="bch_crc_check_ant_chooser_bb") -> bch_crc_check_ant_chooser_bb_sptr

    Return a shared_ptr to a new instance of lte::bch_crc_check_ant_chooser_bb.

    To avoid accidental use of raw pointers, lte::bch_crc_check_ant_chooser_bb's constructor is in a private implementation class. lte::bch_crc_check_ant_chooser_bb::make is the public interface for creating new instances.

    Params: (name)
    """
  return _lte_swig.bch_crc_check_ant_chooser_bb_make(name)

class bch_crc_check_ant_chooser_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::bch_crc_check_ant_chooser_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::bch_crc_check_ant_chooser_bb)> self) -> bch_crc_check_ant_chooser_bb_sptr
        __init__(boost::shared_ptr<(gr::lte::bch_crc_check_ant_chooser_bb)> self, bch_crc_check_ant_chooser_bb p) -> bch_crc_check_ant_chooser_bb_sptr
        """
        this = _lte_swig.new_bch_crc_check_ant_chooser_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(bch_crc_check_ant_chooser_bb_sptr self) -> bch_crc_check_ant_chooser_bb"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_bch_crc_check_ant_chooser_bb_sptr
    __del__ = lambda self : None;
    def make(self, name="bch_crc_check_ant_chooser_bb"):
        """
        make(bch_crc_check_ant_chooser_bb_sptr self, std::string name="bch_crc_check_ant_chooser_bb") -> bch_crc_check_ant_chooser_bb_sptr

        Return a shared_ptr to a new instance of lte::bch_crc_check_ant_chooser_bb.

        To avoid accidental use of raw pointers, lte::bch_crc_check_ant_chooser_bb's constructor is in a private implementation class. lte::bch_crc_check_ant_chooser_bb::make is the public interface for creating new instances.

        Params: (name)
        """
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_make(self, name)

    def history(self):
        """history(bch_crc_check_ant_chooser_bb_sptr self) -> unsigned int"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(bch_crc_check_ant_chooser_bb_sptr self, int which, int delay)
        declare_sample_delay(bch_crc_check_ant_chooser_bb_sptr self, unsigned int delay)
        """
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(bch_crc_check_ant_chooser_bb_sptr self, int which) -> unsigned int"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(bch_crc_check_ant_chooser_bb_sptr self) -> int"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(bch_crc_check_ant_chooser_bb_sptr self) -> double"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_relative_rate(self)

    def start(self):
        """start(bch_crc_check_ant_chooser_bb_sptr self) -> bool"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_start(self)

    def stop(self):
        """stop(bch_crc_check_ant_chooser_bb_sptr self) -> bool"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(bch_crc_check_ant_chooser_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(bch_crc_check_ant_chooser_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(bch_crc_check_ant_chooser_bb_sptr self) -> int"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(bch_crc_check_ant_chooser_bb_sptr self, int m)"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(bch_crc_check_ant_chooser_bb_sptr self)"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(bch_crc_check_ant_chooser_bb_sptr self) -> bool"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(bch_crc_check_ant_chooser_bb_sptr self, int m)"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(bch_crc_check_ant_chooser_bb_sptr self) -> int"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(bch_crc_check_ant_chooser_bb_sptr self, int i) -> long"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(bch_crc_check_ant_chooser_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(bch_crc_check_ant_chooser_bb_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(bch_crc_check_ant_chooser_bb_sptr self, int i) -> long"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(bch_crc_check_ant_chooser_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(bch_crc_check_ant_chooser_bb_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(bch_crc_check_ant_chooser_bb_sptr self) -> float"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(bch_crc_check_ant_chooser_bb_sptr self) -> float"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(bch_crc_check_ant_chooser_bb_sptr self) -> float"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(bch_crc_check_ant_chooser_bb_sptr self) -> float"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(bch_crc_check_ant_chooser_bb_sptr self) -> float"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(bch_crc_check_ant_chooser_bb_sptr self) -> float"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(bch_crc_check_ant_chooser_bb_sptr self, int which) -> float
        pc_input_buffers_full(bch_crc_check_ant_chooser_bb_sptr self) -> pmt_vector_float
        """
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(bch_crc_check_ant_chooser_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(bch_crc_check_ant_chooser_bb_sptr self) -> pmt_vector_float
        """
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(bch_crc_check_ant_chooser_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(bch_crc_check_ant_chooser_bb_sptr self) -> pmt_vector_float
        """
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(bch_crc_check_ant_chooser_bb_sptr self, int which) -> float
        pc_output_buffers_full(bch_crc_check_ant_chooser_bb_sptr self) -> pmt_vector_float
        """
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(bch_crc_check_ant_chooser_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(bch_crc_check_ant_chooser_bb_sptr self) -> pmt_vector_float
        """
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(bch_crc_check_ant_chooser_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(bch_crc_check_ant_chooser_bb_sptr self) -> pmt_vector_float
        """
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(bch_crc_check_ant_chooser_bb_sptr self) -> float"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(bch_crc_check_ant_chooser_bb_sptr self) -> float"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(bch_crc_check_ant_chooser_bb_sptr self) -> float"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(bch_crc_check_ant_chooser_bb_sptr self) -> float"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(bch_crc_check_ant_chooser_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(bch_crc_check_ant_chooser_bb_sptr self)"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(bch_crc_check_ant_chooser_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(bch_crc_check_ant_chooser_bb_sptr self) -> int"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(bch_crc_check_ant_chooser_bb_sptr self) -> int"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(bch_crc_check_ant_chooser_bb_sptr self, int priority) -> int"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(bch_crc_check_ant_chooser_bb_sptr self) -> std::string"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(bch_crc_check_ant_chooser_bb_sptr self) -> std::string"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(bch_crc_check_ant_chooser_bb_sptr self) -> io_signature_sptr"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(bch_crc_check_ant_chooser_bb_sptr self) -> io_signature_sptr"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(bch_crc_check_ant_chooser_bb_sptr self) -> long"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(bch_crc_check_ant_chooser_bb_sptr self) -> basic_block_sptr"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(bch_crc_check_ant_chooser_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(bch_crc_check_ant_chooser_bb_sptr self) -> std::string"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(bch_crc_check_ant_chooser_bb_sptr self, std::string name)"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(bch_crc_check_ant_chooser_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(bch_crc_check_ant_chooser_bb_sptr self) -> swig_int_ptr"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(bch_crc_check_ant_chooser_bb_sptr self) -> swig_int_ptr"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(bch_crc_check_ant_chooser_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.bch_crc_check_ant_chooser_bb_sptr_message_subscribers(self, *args, **kwargs)

bch_crc_check_ant_chooser_bb_sptr_swigregister = _lte_swig.bch_crc_check_ant_chooser_bb_sptr_swigregister
bch_crc_check_ant_chooser_bb_sptr_swigregister(bch_crc_check_ant_chooser_bb_sptr)

bch_crc_check_ant_chooser_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
bch_crc_check_ant_chooser_bb = bch_crc_check_ant_chooser_bb.make;

class subblock_deinterleaver_vfvf(object):
    """Deinterleave groups of items according to LTE subblock interleaver."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int num_groups, int items_per_group, std::string name="subblock_deinterleaver_vfvf") -> subblock_deinterleaver_vfvf_sptr

        Return a shared_ptr to a new instance of lte::subblock_deinterleaver_vfvf.

        To avoid accidental use of raw pointers, lte::subblock_deinterleaver_vfvf's constructor is in a private implementation class. lte::subblock_deinterleaver_vfvf::make is the public interface for creating new instances.

        Params: (num_groups, items_per_group, name)
        """
        return _lte_swig.subblock_deinterleaver_vfvf_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_subblock_deinterleaver_vfvf
    __del__ = lambda self : None;
subblock_deinterleaver_vfvf_swigregister = _lte_swig.subblock_deinterleaver_vfvf_swigregister
subblock_deinterleaver_vfvf_swigregister(subblock_deinterleaver_vfvf)

def subblock_deinterleaver_vfvf_make(*args, **kwargs):
  """
    subblock_deinterleaver_vfvf_make(int num_groups, int items_per_group, std::string name="subblock_deinterleaver_vfvf") -> subblock_deinterleaver_vfvf_sptr

    Return a shared_ptr to a new instance of lte::subblock_deinterleaver_vfvf.

    To avoid accidental use of raw pointers, lte::subblock_deinterleaver_vfvf's constructor is in a private implementation class. lte::subblock_deinterleaver_vfvf::make is the public interface for creating new instances.

    Params: (num_groups, items_per_group, name)
    """
  return _lte_swig.subblock_deinterleaver_vfvf_make(*args, **kwargs)

class subblock_deinterleaver_vfvf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::subblock_deinterleaver_vfvf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::subblock_deinterleaver_vfvf)> self) -> subblock_deinterleaver_vfvf_sptr
        __init__(boost::shared_ptr<(gr::lte::subblock_deinterleaver_vfvf)> self, subblock_deinterleaver_vfvf p) -> subblock_deinterleaver_vfvf_sptr
        """
        this = _lte_swig.new_subblock_deinterleaver_vfvf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(subblock_deinterleaver_vfvf_sptr self) -> subblock_deinterleaver_vfvf"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_subblock_deinterleaver_vfvf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(subblock_deinterleaver_vfvf_sptr self, int num_groups, int items_per_group, std::string name="subblock_deinterleaver_vfvf") -> subblock_deinterleaver_vfvf_sptr

        Return a shared_ptr to a new instance of lte::subblock_deinterleaver_vfvf.

        To avoid accidental use of raw pointers, lte::subblock_deinterleaver_vfvf's constructor is in a private implementation class. lte::subblock_deinterleaver_vfvf::make is the public interface for creating new instances.

        Params: (num_groups, items_per_group, name)
        """
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(subblock_deinterleaver_vfvf_sptr self) -> unsigned int"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(subblock_deinterleaver_vfvf_sptr self, int which, int delay)
        declare_sample_delay(subblock_deinterleaver_vfvf_sptr self, unsigned int delay)
        """
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(subblock_deinterleaver_vfvf_sptr self, int which) -> unsigned int"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(subblock_deinterleaver_vfvf_sptr self) -> int"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(subblock_deinterleaver_vfvf_sptr self) -> double"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_relative_rate(self)

    def start(self):
        """start(subblock_deinterleaver_vfvf_sptr self) -> bool"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_start(self)

    def stop(self):
        """stop(subblock_deinterleaver_vfvf_sptr self) -> bool"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(subblock_deinterleaver_vfvf_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(subblock_deinterleaver_vfvf_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(subblock_deinterleaver_vfvf_sptr self) -> int"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(subblock_deinterleaver_vfvf_sptr self, int m)"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(subblock_deinterleaver_vfvf_sptr self)"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(subblock_deinterleaver_vfvf_sptr self) -> bool"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(subblock_deinterleaver_vfvf_sptr self, int m)"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(subblock_deinterleaver_vfvf_sptr self) -> int"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(subblock_deinterleaver_vfvf_sptr self, int i) -> long"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(subblock_deinterleaver_vfvf_sptr self, long max_output_buffer)
        set_max_output_buffer(subblock_deinterleaver_vfvf_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(subblock_deinterleaver_vfvf_sptr self, int i) -> long"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(subblock_deinterleaver_vfvf_sptr self, long min_output_buffer)
        set_min_output_buffer(subblock_deinterleaver_vfvf_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(subblock_deinterleaver_vfvf_sptr self) -> float"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(subblock_deinterleaver_vfvf_sptr self) -> float"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(subblock_deinterleaver_vfvf_sptr self) -> float"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(subblock_deinterleaver_vfvf_sptr self) -> float"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(subblock_deinterleaver_vfvf_sptr self) -> float"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(subblock_deinterleaver_vfvf_sptr self) -> float"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(subblock_deinterleaver_vfvf_sptr self, int which) -> float
        pc_input_buffers_full(subblock_deinterleaver_vfvf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(subblock_deinterleaver_vfvf_sptr self, int which) -> float
        pc_input_buffers_full_avg(subblock_deinterleaver_vfvf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(subblock_deinterleaver_vfvf_sptr self, int which) -> float
        pc_input_buffers_full_var(subblock_deinterleaver_vfvf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(subblock_deinterleaver_vfvf_sptr self, int which) -> float
        pc_output_buffers_full(subblock_deinterleaver_vfvf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(subblock_deinterleaver_vfvf_sptr self, int which) -> float
        pc_output_buffers_full_avg(subblock_deinterleaver_vfvf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(subblock_deinterleaver_vfvf_sptr self, int which) -> float
        pc_output_buffers_full_var(subblock_deinterleaver_vfvf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(subblock_deinterleaver_vfvf_sptr self) -> float"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(subblock_deinterleaver_vfvf_sptr self) -> float"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(subblock_deinterleaver_vfvf_sptr self) -> float"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(subblock_deinterleaver_vfvf_sptr self) -> float"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(subblock_deinterleaver_vfvf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(subblock_deinterleaver_vfvf_sptr self)"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(subblock_deinterleaver_vfvf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(subblock_deinterleaver_vfvf_sptr self) -> int"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(subblock_deinterleaver_vfvf_sptr self) -> int"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(subblock_deinterleaver_vfvf_sptr self, int priority) -> int"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(subblock_deinterleaver_vfvf_sptr self) -> std::string"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_name(self)

    def symbol_name(self):
        """symbol_name(subblock_deinterleaver_vfvf_sptr self) -> std::string"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(subblock_deinterleaver_vfvf_sptr self) -> io_signature_sptr"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(subblock_deinterleaver_vfvf_sptr self) -> io_signature_sptr"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(subblock_deinterleaver_vfvf_sptr self) -> long"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(subblock_deinterleaver_vfvf_sptr self) -> basic_block_sptr"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(subblock_deinterleaver_vfvf_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(subblock_deinterleaver_vfvf_sptr self) -> std::string"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(subblock_deinterleaver_vfvf_sptr self, std::string name)"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(subblock_deinterleaver_vfvf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(subblock_deinterleaver_vfvf_sptr self) -> swig_int_ptr"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(subblock_deinterleaver_vfvf_sptr self) -> swig_int_ptr"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(subblock_deinterleaver_vfvf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.subblock_deinterleaver_vfvf_sptr_message_subscribers(self, *args, **kwargs)

subblock_deinterleaver_vfvf_sptr_swigregister = _lte_swig.subblock_deinterleaver_vfvf_sptr_swigregister
subblock_deinterleaver_vfvf_sptr_swigregister(subblock_deinterleaver_vfvf_sptr)

subblock_deinterleaver_vfvf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
subblock_deinterleaver_vfvf = subblock_deinterleaver_vfvf.make;

class pbch_descrambler_vfvf(object):
    """
    Block performs descrambling of PBCH with the given Cell ID

    Cell ID is passed to block via message port on runtime.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(std::string key) -> pbch_descrambler_vfvf_sptr

        Return a shared_ptr to a new instance of lte::pbch_descrambler_vfvf.

        To avoid accidental use of raw pointers, lte::pbch_descrambler_vfvf's constructor is in a private implementation class. lte::pbch_descrambler_vfvf::make is the public interface for creating new instances.

        Params: (key)
        """
        return _lte_swig.pbch_descrambler_vfvf_make(*args, **kwargs)

    make = staticmethod(make)
    def set_cell_id(self, *args, **kwargs):
        """
        set_cell_id(pbch_descrambler_vfvf self, int id)

        Params: (id)
        """
        return _lte_swig.pbch_descrambler_vfvf_set_cell_id(self, *args, **kwargs)

    def pn_sequence(self):
        """
        pn_sequence(pbch_descrambler_vfvf self) -> std::vector< int,std::allocator< int > >

        Params: (NONE)
        """
        return _lte_swig.pbch_descrambler_vfvf_pn_sequence(self)

    __swig_destroy__ = _lte_swig.delete_pbch_descrambler_vfvf
    __del__ = lambda self : None;
pbch_descrambler_vfvf_swigregister = _lte_swig.pbch_descrambler_vfvf_swigregister
pbch_descrambler_vfvf_swigregister(pbch_descrambler_vfvf)

def pbch_descrambler_vfvf_make(*args, **kwargs):
  """
    pbch_descrambler_vfvf_make(std::string key) -> pbch_descrambler_vfvf_sptr

    Return a shared_ptr to a new instance of lte::pbch_descrambler_vfvf.

    To avoid accidental use of raw pointers, lte::pbch_descrambler_vfvf's constructor is in a private implementation class. lte::pbch_descrambler_vfvf::make is the public interface for creating new instances.

    Params: (key)
    """
  return _lte_swig.pbch_descrambler_vfvf_make(*args, **kwargs)

class pbch_descrambler_vfvf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::pbch_descrambler_vfvf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::pbch_descrambler_vfvf)> self) -> pbch_descrambler_vfvf_sptr
        __init__(boost::shared_ptr<(gr::lte::pbch_descrambler_vfvf)> self, pbch_descrambler_vfvf p) -> pbch_descrambler_vfvf_sptr
        """
        this = _lte_swig.new_pbch_descrambler_vfvf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pbch_descrambler_vfvf_sptr self) -> pbch_descrambler_vfvf"""
        return _lte_swig.pbch_descrambler_vfvf_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_pbch_descrambler_vfvf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pbch_descrambler_vfvf_sptr self, std::string key) -> pbch_descrambler_vfvf_sptr

        Return a shared_ptr to a new instance of lte::pbch_descrambler_vfvf.

        To avoid accidental use of raw pointers, lte::pbch_descrambler_vfvf's constructor is in a private implementation class. lte::pbch_descrambler_vfvf::make is the public interface for creating new instances.

        Params: (key)
        """
        return _lte_swig.pbch_descrambler_vfvf_sptr_make(self, *args, **kwargs)

    def set_cell_id(self, *args, **kwargs):
        """
        set_cell_id(pbch_descrambler_vfvf_sptr self, int id)

        Params: (id)
        """
        return _lte_swig.pbch_descrambler_vfvf_sptr_set_cell_id(self, *args, **kwargs)

    def pn_sequence(self):
        """
        pn_sequence(pbch_descrambler_vfvf_sptr self) -> std::vector< int,std::allocator< int > >

        Params: (NONE)
        """
        return _lte_swig.pbch_descrambler_vfvf_sptr_pn_sequence(self)

    def history(self):
        """history(pbch_descrambler_vfvf_sptr self) -> unsigned int"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pbch_descrambler_vfvf_sptr self, int which, int delay)
        declare_sample_delay(pbch_descrambler_vfvf_sptr self, unsigned int delay)
        """
        return _lte_swig.pbch_descrambler_vfvf_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pbch_descrambler_vfvf_sptr self, int which) -> unsigned int"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pbch_descrambler_vfvf_sptr self) -> int"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pbch_descrambler_vfvf_sptr self) -> double"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_relative_rate(self)

    def start(self):
        """start(pbch_descrambler_vfvf_sptr self) -> bool"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_start(self)

    def stop(self):
        """stop(pbch_descrambler_vfvf_sptr self) -> bool"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pbch_descrambler_vfvf_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pbch_descrambler_vfvf_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pbch_descrambler_vfvf_sptr self) -> int"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pbch_descrambler_vfvf_sptr self, int m)"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pbch_descrambler_vfvf_sptr self)"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pbch_descrambler_vfvf_sptr self) -> bool"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pbch_descrambler_vfvf_sptr self, int m)"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pbch_descrambler_vfvf_sptr self) -> int"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pbch_descrambler_vfvf_sptr self, int i) -> long"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pbch_descrambler_vfvf_sptr self, long max_output_buffer)
        set_max_output_buffer(pbch_descrambler_vfvf_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.pbch_descrambler_vfvf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pbch_descrambler_vfvf_sptr self, int i) -> long"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pbch_descrambler_vfvf_sptr self, long min_output_buffer)
        set_min_output_buffer(pbch_descrambler_vfvf_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.pbch_descrambler_vfvf_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pbch_descrambler_vfvf_sptr self) -> float"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pbch_descrambler_vfvf_sptr self) -> float"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pbch_descrambler_vfvf_sptr self) -> float"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pbch_descrambler_vfvf_sptr self) -> float"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pbch_descrambler_vfvf_sptr self) -> float"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pbch_descrambler_vfvf_sptr self) -> float"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pbch_descrambler_vfvf_sptr self, int which) -> float
        pc_input_buffers_full(pbch_descrambler_vfvf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pbch_descrambler_vfvf_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pbch_descrambler_vfvf_sptr self, int which) -> float
        pc_input_buffers_full_avg(pbch_descrambler_vfvf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pbch_descrambler_vfvf_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pbch_descrambler_vfvf_sptr self, int which) -> float
        pc_input_buffers_full_var(pbch_descrambler_vfvf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pbch_descrambler_vfvf_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pbch_descrambler_vfvf_sptr self, int which) -> float
        pc_output_buffers_full(pbch_descrambler_vfvf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pbch_descrambler_vfvf_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pbch_descrambler_vfvf_sptr self, int which) -> float
        pc_output_buffers_full_avg(pbch_descrambler_vfvf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pbch_descrambler_vfvf_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pbch_descrambler_vfvf_sptr self, int which) -> float
        pc_output_buffers_full_var(pbch_descrambler_vfvf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pbch_descrambler_vfvf_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pbch_descrambler_vfvf_sptr self) -> float"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pbch_descrambler_vfvf_sptr self) -> float"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pbch_descrambler_vfvf_sptr self) -> float"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pbch_descrambler_vfvf_sptr self) -> float"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pbch_descrambler_vfvf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pbch_descrambler_vfvf_sptr self)"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pbch_descrambler_vfvf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pbch_descrambler_vfvf_sptr self) -> int"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pbch_descrambler_vfvf_sptr self) -> int"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pbch_descrambler_vfvf_sptr self, int priority) -> int"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pbch_descrambler_vfvf_sptr self) -> std::string"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pbch_descrambler_vfvf_sptr self) -> std::string"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pbch_descrambler_vfvf_sptr self) -> io_signature_sptr"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pbch_descrambler_vfvf_sptr self) -> io_signature_sptr"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pbch_descrambler_vfvf_sptr self) -> long"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pbch_descrambler_vfvf_sptr self) -> basic_block_sptr"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pbch_descrambler_vfvf_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pbch_descrambler_vfvf_sptr self) -> std::string"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pbch_descrambler_vfvf_sptr self, std::string name)"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pbch_descrambler_vfvf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.pbch_descrambler_vfvf_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pbch_descrambler_vfvf_sptr self) -> swig_int_ptr"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pbch_descrambler_vfvf_sptr self) -> swig_int_ptr"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pbch_descrambler_vfvf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.pbch_descrambler_vfvf_sptr_message_subscribers(self, *args, **kwargs)

pbch_descrambler_vfvf_sptr_swigregister = _lte_swig.pbch_descrambler_vfvf_sptr_swigregister
pbch_descrambler_vfvf_sptr_swigregister(pbch_descrambler_vfvf_sptr)

pbch_descrambler_vfvf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pbch_descrambler_vfvf = pbch_descrambler_vfvf.make;

class repeat_message_source_vf(object):
    """Repeat Vector in message infinitely."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int vector_len, std::string name="repeat_message_source_vf") -> repeat_message_source_vf_sptr

        Return a shared_ptr to a new instance of lte::repeat_message_source_vf.

        To avoid accidental use of raw pointers, lte::repeat_message_source_vf's constructor is in a private implementation class. lte::repeat_message_source_vf::make is the public interface for creating new instances.

        Params: (vector_len, name)
        """
        return _lte_swig.repeat_message_source_vf_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_repeat_message_source_vf
    __del__ = lambda self : None;
repeat_message_source_vf_swigregister = _lte_swig.repeat_message_source_vf_swigregister
repeat_message_source_vf_swigregister(repeat_message_source_vf)

def repeat_message_source_vf_make(*args, **kwargs):
  """
    repeat_message_source_vf_make(int vector_len, std::string name="repeat_message_source_vf") -> repeat_message_source_vf_sptr

    Return a shared_ptr to a new instance of lte::repeat_message_source_vf.

    To avoid accidental use of raw pointers, lte::repeat_message_source_vf's constructor is in a private implementation class. lte::repeat_message_source_vf::make is the public interface for creating new instances.

    Params: (vector_len, name)
    """
  return _lte_swig.repeat_message_source_vf_make(*args, **kwargs)

class repeat_message_source_vf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::repeat_message_source_vf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::repeat_message_source_vf)> self) -> repeat_message_source_vf_sptr
        __init__(boost::shared_ptr<(gr::lte::repeat_message_source_vf)> self, repeat_message_source_vf p) -> repeat_message_source_vf_sptr
        """
        this = _lte_swig.new_repeat_message_source_vf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(repeat_message_source_vf_sptr self) -> repeat_message_source_vf"""
        return _lte_swig.repeat_message_source_vf_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_repeat_message_source_vf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(repeat_message_source_vf_sptr self, int vector_len, std::string name="repeat_message_source_vf") -> repeat_message_source_vf_sptr

        Return a shared_ptr to a new instance of lte::repeat_message_source_vf.

        To avoid accidental use of raw pointers, lte::repeat_message_source_vf's constructor is in a private implementation class. lte::repeat_message_source_vf::make is the public interface for creating new instances.

        Params: (vector_len, name)
        """
        return _lte_swig.repeat_message_source_vf_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(repeat_message_source_vf_sptr self) -> unsigned int"""
        return _lte_swig.repeat_message_source_vf_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(repeat_message_source_vf_sptr self, int which, int delay)
        declare_sample_delay(repeat_message_source_vf_sptr self, unsigned int delay)
        """
        return _lte_swig.repeat_message_source_vf_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(repeat_message_source_vf_sptr self, int which) -> unsigned int"""
        return _lte_swig.repeat_message_source_vf_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(repeat_message_source_vf_sptr self) -> int"""
        return _lte_swig.repeat_message_source_vf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(repeat_message_source_vf_sptr self) -> double"""
        return _lte_swig.repeat_message_source_vf_sptr_relative_rate(self)

    def start(self):
        """start(repeat_message_source_vf_sptr self) -> bool"""
        return _lte_swig.repeat_message_source_vf_sptr_start(self)

    def stop(self):
        """stop(repeat_message_source_vf_sptr self) -> bool"""
        return _lte_swig.repeat_message_source_vf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(repeat_message_source_vf_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.repeat_message_source_vf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(repeat_message_source_vf_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.repeat_message_source_vf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(repeat_message_source_vf_sptr self) -> int"""
        return _lte_swig.repeat_message_source_vf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(repeat_message_source_vf_sptr self, int m)"""
        return _lte_swig.repeat_message_source_vf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(repeat_message_source_vf_sptr self)"""
        return _lte_swig.repeat_message_source_vf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(repeat_message_source_vf_sptr self) -> bool"""
        return _lte_swig.repeat_message_source_vf_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(repeat_message_source_vf_sptr self, int m)"""
        return _lte_swig.repeat_message_source_vf_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(repeat_message_source_vf_sptr self) -> int"""
        return _lte_swig.repeat_message_source_vf_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(repeat_message_source_vf_sptr self, int i) -> long"""
        return _lte_swig.repeat_message_source_vf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(repeat_message_source_vf_sptr self, long max_output_buffer)
        set_max_output_buffer(repeat_message_source_vf_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.repeat_message_source_vf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(repeat_message_source_vf_sptr self, int i) -> long"""
        return _lte_swig.repeat_message_source_vf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(repeat_message_source_vf_sptr self, long min_output_buffer)
        set_min_output_buffer(repeat_message_source_vf_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.repeat_message_source_vf_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(repeat_message_source_vf_sptr self) -> float"""
        return _lte_swig.repeat_message_source_vf_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(repeat_message_source_vf_sptr self) -> float"""
        return _lte_swig.repeat_message_source_vf_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(repeat_message_source_vf_sptr self) -> float"""
        return _lte_swig.repeat_message_source_vf_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(repeat_message_source_vf_sptr self) -> float"""
        return _lte_swig.repeat_message_source_vf_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(repeat_message_source_vf_sptr self) -> float"""
        return _lte_swig.repeat_message_source_vf_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(repeat_message_source_vf_sptr self) -> float"""
        return _lte_swig.repeat_message_source_vf_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(repeat_message_source_vf_sptr self, int which) -> float
        pc_input_buffers_full(repeat_message_source_vf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.repeat_message_source_vf_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(repeat_message_source_vf_sptr self, int which) -> float
        pc_input_buffers_full_avg(repeat_message_source_vf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.repeat_message_source_vf_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(repeat_message_source_vf_sptr self, int which) -> float
        pc_input_buffers_full_var(repeat_message_source_vf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.repeat_message_source_vf_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(repeat_message_source_vf_sptr self, int which) -> float
        pc_output_buffers_full(repeat_message_source_vf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.repeat_message_source_vf_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(repeat_message_source_vf_sptr self, int which) -> float
        pc_output_buffers_full_avg(repeat_message_source_vf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.repeat_message_source_vf_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(repeat_message_source_vf_sptr self, int which) -> float
        pc_output_buffers_full_var(repeat_message_source_vf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.repeat_message_source_vf_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(repeat_message_source_vf_sptr self) -> float"""
        return _lte_swig.repeat_message_source_vf_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(repeat_message_source_vf_sptr self) -> float"""
        return _lte_swig.repeat_message_source_vf_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(repeat_message_source_vf_sptr self) -> float"""
        return _lte_swig.repeat_message_source_vf_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(repeat_message_source_vf_sptr self) -> float"""
        return _lte_swig.repeat_message_source_vf_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(repeat_message_source_vf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.repeat_message_source_vf_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(repeat_message_source_vf_sptr self)"""
        return _lte_swig.repeat_message_source_vf_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(repeat_message_source_vf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.repeat_message_source_vf_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(repeat_message_source_vf_sptr self) -> int"""
        return _lte_swig.repeat_message_source_vf_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(repeat_message_source_vf_sptr self) -> int"""
        return _lte_swig.repeat_message_source_vf_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(repeat_message_source_vf_sptr self, int priority) -> int"""
        return _lte_swig.repeat_message_source_vf_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(repeat_message_source_vf_sptr self) -> std::string"""
        return _lte_swig.repeat_message_source_vf_sptr_name(self)

    def symbol_name(self):
        """symbol_name(repeat_message_source_vf_sptr self) -> std::string"""
        return _lte_swig.repeat_message_source_vf_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(repeat_message_source_vf_sptr self) -> io_signature_sptr"""
        return _lte_swig.repeat_message_source_vf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(repeat_message_source_vf_sptr self) -> io_signature_sptr"""
        return _lte_swig.repeat_message_source_vf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(repeat_message_source_vf_sptr self) -> long"""
        return _lte_swig.repeat_message_source_vf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(repeat_message_source_vf_sptr self) -> basic_block_sptr"""
        return _lte_swig.repeat_message_source_vf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(repeat_message_source_vf_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.repeat_message_source_vf_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(repeat_message_source_vf_sptr self) -> std::string"""
        return _lte_swig.repeat_message_source_vf_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(repeat_message_source_vf_sptr self, std::string name)"""
        return _lte_swig.repeat_message_source_vf_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(repeat_message_source_vf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.repeat_message_source_vf_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(repeat_message_source_vf_sptr self) -> swig_int_ptr"""
        return _lte_swig.repeat_message_source_vf_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(repeat_message_source_vf_sptr self) -> swig_int_ptr"""
        return _lte_swig.repeat_message_source_vf_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(repeat_message_source_vf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.repeat_message_source_vf_sptr_message_subscribers(self, *args, **kwargs)

repeat_message_source_vf_sptr_swigregister = _lte_swig.repeat_message_source_vf_sptr_swigregister
repeat_message_source_vf_sptr_swigregister(repeat_message_source_vf_sptr)

repeat_message_source_vf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
repeat_message_source_vf = repeat_message_source_vf.make;

class qpsk_soft_demod_vcvf(object):
    """QPSK soft demodulation. 1. item == real, 2. item == imaginary."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int vlen, std::string name="qpsk_soft_demod_vcvf") -> qpsk_soft_demod_vcvf_sptr

        Return a shared_ptr to a new instance of lte::qpsk_soft_demod_vcvf.

        To avoid accidental use of raw pointers, lte::qpsk_soft_demod_vcvf's constructor is in a private implementation class. lte::qpsk_soft_demod_vcvf::make is the public interface for creating new instances.

        Params: (vlen, name)
        """
        return _lte_swig.qpsk_soft_demod_vcvf_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_qpsk_soft_demod_vcvf
    __del__ = lambda self : None;
qpsk_soft_demod_vcvf_swigregister = _lte_swig.qpsk_soft_demod_vcvf_swigregister
qpsk_soft_demod_vcvf_swigregister(qpsk_soft_demod_vcvf)

def qpsk_soft_demod_vcvf_make(*args, **kwargs):
  """
    qpsk_soft_demod_vcvf_make(int vlen, std::string name="qpsk_soft_demod_vcvf") -> qpsk_soft_demod_vcvf_sptr

    Return a shared_ptr to a new instance of lte::qpsk_soft_demod_vcvf.

    To avoid accidental use of raw pointers, lte::qpsk_soft_demod_vcvf's constructor is in a private implementation class. lte::qpsk_soft_demod_vcvf::make is the public interface for creating new instances.

    Params: (vlen, name)
    """
  return _lte_swig.qpsk_soft_demod_vcvf_make(*args, **kwargs)

class qpsk_soft_demod_vcvf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::qpsk_soft_demod_vcvf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::qpsk_soft_demod_vcvf)> self) -> qpsk_soft_demod_vcvf_sptr
        __init__(boost::shared_ptr<(gr::lte::qpsk_soft_demod_vcvf)> self, qpsk_soft_demod_vcvf p) -> qpsk_soft_demod_vcvf_sptr
        """
        this = _lte_swig.new_qpsk_soft_demod_vcvf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(qpsk_soft_demod_vcvf_sptr self) -> qpsk_soft_demod_vcvf"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_qpsk_soft_demod_vcvf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(qpsk_soft_demod_vcvf_sptr self, int vlen, std::string name="qpsk_soft_demod_vcvf") -> qpsk_soft_demod_vcvf_sptr

        Return a shared_ptr to a new instance of lte::qpsk_soft_demod_vcvf.

        To avoid accidental use of raw pointers, lte::qpsk_soft_demod_vcvf's constructor is in a private implementation class. lte::qpsk_soft_demod_vcvf::make is the public interface for creating new instances.

        Params: (vlen, name)
        """
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(qpsk_soft_demod_vcvf_sptr self) -> unsigned int"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(qpsk_soft_demod_vcvf_sptr self, int which, int delay)
        declare_sample_delay(qpsk_soft_demod_vcvf_sptr self, unsigned int delay)
        """
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(qpsk_soft_demod_vcvf_sptr self, int which) -> unsigned int"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(qpsk_soft_demod_vcvf_sptr self) -> int"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(qpsk_soft_demod_vcvf_sptr self) -> double"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_relative_rate(self)

    def start(self):
        """start(qpsk_soft_demod_vcvf_sptr self) -> bool"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_start(self)

    def stop(self):
        """stop(qpsk_soft_demod_vcvf_sptr self) -> bool"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(qpsk_soft_demod_vcvf_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(qpsk_soft_demod_vcvf_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(qpsk_soft_demod_vcvf_sptr self) -> int"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(qpsk_soft_demod_vcvf_sptr self, int m)"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(qpsk_soft_demod_vcvf_sptr self)"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(qpsk_soft_demod_vcvf_sptr self) -> bool"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(qpsk_soft_demod_vcvf_sptr self, int m)"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(qpsk_soft_demod_vcvf_sptr self) -> int"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(qpsk_soft_demod_vcvf_sptr self, int i) -> long"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(qpsk_soft_demod_vcvf_sptr self, long max_output_buffer)
        set_max_output_buffer(qpsk_soft_demod_vcvf_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(qpsk_soft_demod_vcvf_sptr self, int i) -> long"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(qpsk_soft_demod_vcvf_sptr self, long min_output_buffer)
        set_min_output_buffer(qpsk_soft_demod_vcvf_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(qpsk_soft_demod_vcvf_sptr self) -> float"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(qpsk_soft_demod_vcvf_sptr self) -> float"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(qpsk_soft_demod_vcvf_sptr self) -> float"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(qpsk_soft_demod_vcvf_sptr self) -> float"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(qpsk_soft_demod_vcvf_sptr self) -> float"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(qpsk_soft_demod_vcvf_sptr self) -> float"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(qpsk_soft_demod_vcvf_sptr self, int which) -> float
        pc_input_buffers_full(qpsk_soft_demod_vcvf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(qpsk_soft_demod_vcvf_sptr self, int which) -> float
        pc_input_buffers_full_avg(qpsk_soft_demod_vcvf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(qpsk_soft_demod_vcvf_sptr self, int which) -> float
        pc_input_buffers_full_var(qpsk_soft_demod_vcvf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(qpsk_soft_demod_vcvf_sptr self, int which) -> float
        pc_output_buffers_full(qpsk_soft_demod_vcvf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(qpsk_soft_demod_vcvf_sptr self, int which) -> float
        pc_output_buffers_full_avg(qpsk_soft_demod_vcvf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(qpsk_soft_demod_vcvf_sptr self, int which) -> float
        pc_output_buffers_full_var(qpsk_soft_demod_vcvf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(qpsk_soft_demod_vcvf_sptr self) -> float"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(qpsk_soft_demod_vcvf_sptr self) -> float"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(qpsk_soft_demod_vcvf_sptr self) -> float"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(qpsk_soft_demod_vcvf_sptr self) -> float"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(qpsk_soft_demod_vcvf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(qpsk_soft_demod_vcvf_sptr self)"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(qpsk_soft_demod_vcvf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(qpsk_soft_demod_vcvf_sptr self) -> int"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(qpsk_soft_demod_vcvf_sptr self) -> int"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(qpsk_soft_demod_vcvf_sptr self, int priority) -> int"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(qpsk_soft_demod_vcvf_sptr self) -> std::string"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_name(self)

    def symbol_name(self):
        """symbol_name(qpsk_soft_demod_vcvf_sptr self) -> std::string"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(qpsk_soft_demod_vcvf_sptr self) -> io_signature_sptr"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(qpsk_soft_demod_vcvf_sptr self) -> io_signature_sptr"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(qpsk_soft_demod_vcvf_sptr self) -> long"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(qpsk_soft_demod_vcvf_sptr self) -> basic_block_sptr"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(qpsk_soft_demod_vcvf_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(qpsk_soft_demod_vcvf_sptr self) -> std::string"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(qpsk_soft_demod_vcvf_sptr self, std::string name)"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(qpsk_soft_demod_vcvf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(qpsk_soft_demod_vcvf_sptr self) -> swig_int_ptr"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(qpsk_soft_demod_vcvf_sptr self) -> swig_int_ptr"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(qpsk_soft_demod_vcvf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.qpsk_soft_demod_vcvf_sptr_message_subscribers(self, *args, **kwargs)

qpsk_soft_demod_vcvf_sptr_swigregister = _lte_swig.qpsk_soft_demod_vcvf_sptr_swigregister
qpsk_soft_demod_vcvf_sptr_swigregister(qpsk_soft_demod_vcvf_sptr)

qpsk_soft_demod_vcvf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
qpsk_soft_demod_vcvf = qpsk_soft_demod_vcvf.make;

class layer_demapper_vcvc(object):
    """Layer Demapper."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int N_ant, int vlen, std::string style, std::string name="layer_demapper_vcvc") -> layer_demapper_vcvc_sptr

        Return a shared_ptr to a new instance of lte::layer_demapper_vcvc.

        To avoid accidental use of raw pointers, lte::layer_demapper_vcvc's constructor is in a private implementation class. lte::layer_demapper_vcvc::make is the public interface for creating new instances.

        Params: (N_ant, vlen, style, name)
        """
        return _lte_swig.layer_demapper_vcvc_make(*args, **kwargs)

    make = staticmethod(make)
    def set_N_ant(self, *args, **kwargs):
        """
        set_N_ant(layer_demapper_vcvc self, int N_ant)

        Params: (N_ant)
        """
        return _lte_swig.layer_demapper_vcvc_set_N_ant(self, *args, **kwargs)

    def get_N_ant(self):
        """
        get_N_ant(layer_demapper_vcvc self) -> int

        Params: (NONE)
        """
        return _lte_swig.layer_demapper_vcvc_get_N_ant(self)

    def set_decoding_style(self, *args, **kwargs):
        """
        set_decoding_style(layer_demapper_vcvc self, std::string style)

        Params: (style)
        """
        return _lte_swig.layer_demapper_vcvc_set_decoding_style(self, *args, **kwargs)

    def get_decoding_style(self):
        """
        get_decoding_style(layer_demapper_vcvc self) -> std::string

        Params: (NONE)
        """
        return _lte_swig.layer_demapper_vcvc_get_decoding_style(self)

    __swig_destroy__ = _lte_swig.delete_layer_demapper_vcvc
    __del__ = lambda self : None;
layer_demapper_vcvc_swigregister = _lte_swig.layer_demapper_vcvc_swigregister
layer_demapper_vcvc_swigregister(layer_demapper_vcvc)

def layer_demapper_vcvc_make(*args, **kwargs):
  """
    layer_demapper_vcvc_make(int N_ant, int vlen, std::string style, std::string name="layer_demapper_vcvc") -> layer_demapper_vcvc_sptr

    Return a shared_ptr to a new instance of lte::layer_demapper_vcvc.

    To avoid accidental use of raw pointers, lte::layer_demapper_vcvc's constructor is in a private implementation class. lte::layer_demapper_vcvc::make is the public interface for creating new instances.

    Params: (N_ant, vlen, style, name)
    """
  return _lte_swig.layer_demapper_vcvc_make(*args, **kwargs)

class layer_demapper_vcvc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::layer_demapper_vcvc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::layer_demapper_vcvc)> self) -> layer_demapper_vcvc_sptr
        __init__(boost::shared_ptr<(gr::lte::layer_demapper_vcvc)> self, layer_demapper_vcvc p) -> layer_demapper_vcvc_sptr
        """
        this = _lte_swig.new_layer_demapper_vcvc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(layer_demapper_vcvc_sptr self) -> layer_demapper_vcvc"""
        return _lte_swig.layer_demapper_vcvc_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_layer_demapper_vcvc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(layer_demapper_vcvc_sptr self, int N_ant, int vlen, std::string style, std::string name="layer_demapper_vcvc") -> layer_demapper_vcvc_sptr

        Return a shared_ptr to a new instance of lte::layer_demapper_vcvc.

        To avoid accidental use of raw pointers, lte::layer_demapper_vcvc's constructor is in a private implementation class. lte::layer_demapper_vcvc::make is the public interface for creating new instances.

        Params: (N_ant, vlen, style, name)
        """
        return _lte_swig.layer_demapper_vcvc_sptr_make(self, *args, **kwargs)

    def set_N_ant(self, *args, **kwargs):
        """
        set_N_ant(layer_demapper_vcvc_sptr self, int N_ant)

        Params: (N_ant)
        """
        return _lte_swig.layer_demapper_vcvc_sptr_set_N_ant(self, *args, **kwargs)

    def get_N_ant(self):
        """
        get_N_ant(layer_demapper_vcvc_sptr self) -> int

        Params: (NONE)
        """
        return _lte_swig.layer_demapper_vcvc_sptr_get_N_ant(self)

    def set_decoding_style(self, *args, **kwargs):
        """
        set_decoding_style(layer_demapper_vcvc_sptr self, std::string style)

        Params: (style)
        """
        return _lte_swig.layer_demapper_vcvc_sptr_set_decoding_style(self, *args, **kwargs)

    def get_decoding_style(self):
        """
        get_decoding_style(layer_demapper_vcvc_sptr self) -> std::string

        Params: (NONE)
        """
        return _lte_swig.layer_demapper_vcvc_sptr_get_decoding_style(self)

    def history(self):
        """history(layer_demapper_vcvc_sptr self) -> unsigned int"""
        return _lte_swig.layer_demapper_vcvc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(layer_demapper_vcvc_sptr self, int which, int delay)
        declare_sample_delay(layer_demapper_vcvc_sptr self, unsigned int delay)
        """
        return _lte_swig.layer_demapper_vcvc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(layer_demapper_vcvc_sptr self, int which) -> unsigned int"""
        return _lte_swig.layer_demapper_vcvc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(layer_demapper_vcvc_sptr self) -> int"""
        return _lte_swig.layer_demapper_vcvc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(layer_demapper_vcvc_sptr self) -> double"""
        return _lte_swig.layer_demapper_vcvc_sptr_relative_rate(self)

    def start(self):
        """start(layer_demapper_vcvc_sptr self) -> bool"""
        return _lte_swig.layer_demapper_vcvc_sptr_start(self)

    def stop(self):
        """stop(layer_demapper_vcvc_sptr self) -> bool"""
        return _lte_swig.layer_demapper_vcvc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(layer_demapper_vcvc_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.layer_demapper_vcvc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(layer_demapper_vcvc_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.layer_demapper_vcvc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(layer_demapper_vcvc_sptr self) -> int"""
        return _lte_swig.layer_demapper_vcvc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(layer_demapper_vcvc_sptr self, int m)"""
        return _lte_swig.layer_demapper_vcvc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(layer_demapper_vcvc_sptr self)"""
        return _lte_swig.layer_demapper_vcvc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(layer_demapper_vcvc_sptr self) -> bool"""
        return _lte_swig.layer_demapper_vcvc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(layer_demapper_vcvc_sptr self, int m)"""
        return _lte_swig.layer_demapper_vcvc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(layer_demapper_vcvc_sptr self) -> int"""
        return _lte_swig.layer_demapper_vcvc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(layer_demapper_vcvc_sptr self, int i) -> long"""
        return _lte_swig.layer_demapper_vcvc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(layer_demapper_vcvc_sptr self, long max_output_buffer)
        set_max_output_buffer(layer_demapper_vcvc_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.layer_demapper_vcvc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(layer_demapper_vcvc_sptr self, int i) -> long"""
        return _lte_swig.layer_demapper_vcvc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(layer_demapper_vcvc_sptr self, long min_output_buffer)
        set_min_output_buffer(layer_demapper_vcvc_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.layer_demapper_vcvc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(layer_demapper_vcvc_sptr self) -> float"""
        return _lte_swig.layer_demapper_vcvc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(layer_demapper_vcvc_sptr self) -> float"""
        return _lte_swig.layer_demapper_vcvc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(layer_demapper_vcvc_sptr self) -> float"""
        return _lte_swig.layer_demapper_vcvc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(layer_demapper_vcvc_sptr self) -> float"""
        return _lte_swig.layer_demapper_vcvc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(layer_demapper_vcvc_sptr self) -> float"""
        return _lte_swig.layer_demapper_vcvc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(layer_demapper_vcvc_sptr self) -> float"""
        return _lte_swig.layer_demapper_vcvc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(layer_demapper_vcvc_sptr self, int which) -> float
        pc_input_buffers_full(layer_demapper_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.layer_demapper_vcvc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(layer_demapper_vcvc_sptr self, int which) -> float
        pc_input_buffers_full_avg(layer_demapper_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.layer_demapper_vcvc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(layer_demapper_vcvc_sptr self, int which) -> float
        pc_input_buffers_full_var(layer_demapper_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.layer_demapper_vcvc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(layer_demapper_vcvc_sptr self, int which) -> float
        pc_output_buffers_full(layer_demapper_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.layer_demapper_vcvc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(layer_demapper_vcvc_sptr self, int which) -> float
        pc_output_buffers_full_avg(layer_demapper_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.layer_demapper_vcvc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(layer_demapper_vcvc_sptr self, int which) -> float
        pc_output_buffers_full_var(layer_demapper_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.layer_demapper_vcvc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(layer_demapper_vcvc_sptr self) -> float"""
        return _lte_swig.layer_demapper_vcvc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(layer_demapper_vcvc_sptr self) -> float"""
        return _lte_swig.layer_demapper_vcvc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(layer_demapper_vcvc_sptr self) -> float"""
        return _lte_swig.layer_demapper_vcvc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(layer_demapper_vcvc_sptr self) -> float"""
        return _lte_swig.layer_demapper_vcvc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(layer_demapper_vcvc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.layer_demapper_vcvc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(layer_demapper_vcvc_sptr self)"""
        return _lte_swig.layer_demapper_vcvc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(layer_demapper_vcvc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.layer_demapper_vcvc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(layer_demapper_vcvc_sptr self) -> int"""
        return _lte_swig.layer_demapper_vcvc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(layer_demapper_vcvc_sptr self) -> int"""
        return _lte_swig.layer_demapper_vcvc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(layer_demapper_vcvc_sptr self, int priority) -> int"""
        return _lte_swig.layer_demapper_vcvc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(layer_demapper_vcvc_sptr self) -> std::string"""
        return _lte_swig.layer_demapper_vcvc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(layer_demapper_vcvc_sptr self) -> std::string"""
        return _lte_swig.layer_demapper_vcvc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(layer_demapper_vcvc_sptr self) -> io_signature_sptr"""
        return _lte_swig.layer_demapper_vcvc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(layer_demapper_vcvc_sptr self) -> io_signature_sptr"""
        return _lte_swig.layer_demapper_vcvc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(layer_demapper_vcvc_sptr self) -> long"""
        return _lte_swig.layer_demapper_vcvc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(layer_demapper_vcvc_sptr self) -> basic_block_sptr"""
        return _lte_swig.layer_demapper_vcvc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(layer_demapper_vcvc_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.layer_demapper_vcvc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(layer_demapper_vcvc_sptr self) -> std::string"""
        return _lte_swig.layer_demapper_vcvc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(layer_demapper_vcvc_sptr self, std::string name)"""
        return _lte_swig.layer_demapper_vcvc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(layer_demapper_vcvc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.layer_demapper_vcvc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(layer_demapper_vcvc_sptr self) -> swig_int_ptr"""
        return _lte_swig.layer_demapper_vcvc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(layer_demapper_vcvc_sptr self) -> swig_int_ptr"""
        return _lte_swig.layer_demapper_vcvc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(layer_demapper_vcvc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.layer_demapper_vcvc_sptr_message_subscribers(self, *args, **kwargs)

layer_demapper_vcvc_sptr_swigregister = _lte_swig.layer_demapper_vcvc_sptr_swigregister
layer_demapper_vcvc_sptr_swigregister(layer_demapper_vcvc_sptr)

layer_demapper_vcvc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
layer_demapper_vcvc = layer_demapper_vcvc.make;

class pre_decoder_vcvc(object):
    """Pre Decoder for LTE."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int N_ant, int vlen, std::string style, std::string name="pre_decoder_vcvc") -> pre_decoder_vcvc_sptr

        Return a shared_ptr to a new instance of lte::pre_decoder_vcvc.

        To avoid accidental use of raw pointers, lte::pre_decoder_vcvc's constructor is in a private implementation class. lte::pre_decoder_vcvc::make is the public interface for creating new instances.

        Params: (N_ant, vlen, style, name)
        """
        return _lte_swig.pre_decoder_vcvc_make(*args, **kwargs)

    make = staticmethod(make)
    def set_N_ant(self, *args, **kwargs):
        """
        set_N_ant(pre_decoder_vcvc self, int N_ant)

        Params: (N_ant)
        """
        return _lte_swig.pre_decoder_vcvc_set_N_ant(self, *args, **kwargs)

    def get_N_ant(self):
        """
        get_N_ant(pre_decoder_vcvc self) -> int

        Params: (NONE)
        """
        return _lte_swig.pre_decoder_vcvc_get_N_ant(self)

    def set_decoding_style(self, *args, **kwargs):
        """
        set_decoding_style(pre_decoder_vcvc self, std::string style)

        Params: (style)
        """
        return _lte_swig.pre_decoder_vcvc_set_decoding_style(self, *args, **kwargs)

    def get_decoding_style(self):
        """
        get_decoding_style(pre_decoder_vcvc self) -> std::string

        Params: (NONE)
        """
        return _lte_swig.pre_decoder_vcvc_get_decoding_style(self)

    __swig_destroy__ = _lte_swig.delete_pre_decoder_vcvc
    __del__ = lambda self : None;
pre_decoder_vcvc_swigregister = _lte_swig.pre_decoder_vcvc_swigregister
pre_decoder_vcvc_swigregister(pre_decoder_vcvc)

def pre_decoder_vcvc_make(*args, **kwargs):
  """
    pre_decoder_vcvc_make(int N_ant, int vlen, std::string style, std::string name="pre_decoder_vcvc") -> pre_decoder_vcvc_sptr

    Return a shared_ptr to a new instance of lte::pre_decoder_vcvc.

    To avoid accidental use of raw pointers, lte::pre_decoder_vcvc's constructor is in a private implementation class. lte::pre_decoder_vcvc::make is the public interface for creating new instances.

    Params: (N_ant, vlen, style, name)
    """
  return _lte_swig.pre_decoder_vcvc_make(*args, **kwargs)

class pre_decoder_vcvc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::pre_decoder_vcvc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::pre_decoder_vcvc)> self) -> pre_decoder_vcvc_sptr
        __init__(boost::shared_ptr<(gr::lte::pre_decoder_vcvc)> self, pre_decoder_vcvc p) -> pre_decoder_vcvc_sptr
        """
        this = _lte_swig.new_pre_decoder_vcvc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pre_decoder_vcvc_sptr self) -> pre_decoder_vcvc"""
        return _lte_swig.pre_decoder_vcvc_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_pre_decoder_vcvc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pre_decoder_vcvc_sptr self, int N_ant, int vlen, std::string style, std::string name="pre_decoder_vcvc") -> pre_decoder_vcvc_sptr

        Return a shared_ptr to a new instance of lte::pre_decoder_vcvc.

        To avoid accidental use of raw pointers, lte::pre_decoder_vcvc's constructor is in a private implementation class. lte::pre_decoder_vcvc::make is the public interface for creating new instances.

        Params: (N_ant, vlen, style, name)
        """
        return _lte_swig.pre_decoder_vcvc_sptr_make(self, *args, **kwargs)

    def set_N_ant(self, *args, **kwargs):
        """
        set_N_ant(pre_decoder_vcvc_sptr self, int N_ant)

        Params: (N_ant)
        """
        return _lte_swig.pre_decoder_vcvc_sptr_set_N_ant(self, *args, **kwargs)

    def get_N_ant(self):
        """
        get_N_ant(pre_decoder_vcvc_sptr self) -> int

        Params: (NONE)
        """
        return _lte_swig.pre_decoder_vcvc_sptr_get_N_ant(self)

    def set_decoding_style(self, *args, **kwargs):
        """
        set_decoding_style(pre_decoder_vcvc_sptr self, std::string style)

        Params: (style)
        """
        return _lte_swig.pre_decoder_vcvc_sptr_set_decoding_style(self, *args, **kwargs)

    def get_decoding_style(self):
        """
        get_decoding_style(pre_decoder_vcvc_sptr self) -> std::string

        Params: (NONE)
        """
        return _lte_swig.pre_decoder_vcvc_sptr_get_decoding_style(self)

    def history(self):
        """history(pre_decoder_vcvc_sptr self) -> unsigned int"""
        return _lte_swig.pre_decoder_vcvc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pre_decoder_vcvc_sptr self, int which, int delay)
        declare_sample_delay(pre_decoder_vcvc_sptr self, unsigned int delay)
        """
        return _lte_swig.pre_decoder_vcvc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pre_decoder_vcvc_sptr self, int which) -> unsigned int"""
        return _lte_swig.pre_decoder_vcvc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pre_decoder_vcvc_sptr self) -> int"""
        return _lte_swig.pre_decoder_vcvc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pre_decoder_vcvc_sptr self) -> double"""
        return _lte_swig.pre_decoder_vcvc_sptr_relative_rate(self)

    def start(self):
        """start(pre_decoder_vcvc_sptr self) -> bool"""
        return _lte_swig.pre_decoder_vcvc_sptr_start(self)

    def stop(self):
        """stop(pre_decoder_vcvc_sptr self) -> bool"""
        return _lte_swig.pre_decoder_vcvc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pre_decoder_vcvc_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.pre_decoder_vcvc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pre_decoder_vcvc_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.pre_decoder_vcvc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pre_decoder_vcvc_sptr self) -> int"""
        return _lte_swig.pre_decoder_vcvc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pre_decoder_vcvc_sptr self, int m)"""
        return _lte_swig.pre_decoder_vcvc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pre_decoder_vcvc_sptr self)"""
        return _lte_swig.pre_decoder_vcvc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pre_decoder_vcvc_sptr self) -> bool"""
        return _lte_swig.pre_decoder_vcvc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pre_decoder_vcvc_sptr self, int m)"""
        return _lte_swig.pre_decoder_vcvc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pre_decoder_vcvc_sptr self) -> int"""
        return _lte_swig.pre_decoder_vcvc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pre_decoder_vcvc_sptr self, int i) -> long"""
        return _lte_swig.pre_decoder_vcvc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pre_decoder_vcvc_sptr self, long max_output_buffer)
        set_max_output_buffer(pre_decoder_vcvc_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.pre_decoder_vcvc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pre_decoder_vcvc_sptr self, int i) -> long"""
        return _lte_swig.pre_decoder_vcvc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pre_decoder_vcvc_sptr self, long min_output_buffer)
        set_min_output_buffer(pre_decoder_vcvc_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.pre_decoder_vcvc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pre_decoder_vcvc_sptr self) -> float"""
        return _lte_swig.pre_decoder_vcvc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pre_decoder_vcvc_sptr self) -> float"""
        return _lte_swig.pre_decoder_vcvc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pre_decoder_vcvc_sptr self) -> float"""
        return _lte_swig.pre_decoder_vcvc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pre_decoder_vcvc_sptr self) -> float"""
        return _lte_swig.pre_decoder_vcvc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pre_decoder_vcvc_sptr self) -> float"""
        return _lte_swig.pre_decoder_vcvc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pre_decoder_vcvc_sptr self) -> float"""
        return _lte_swig.pre_decoder_vcvc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pre_decoder_vcvc_sptr self, int which) -> float
        pc_input_buffers_full(pre_decoder_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pre_decoder_vcvc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pre_decoder_vcvc_sptr self, int which) -> float
        pc_input_buffers_full_avg(pre_decoder_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pre_decoder_vcvc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pre_decoder_vcvc_sptr self, int which) -> float
        pc_input_buffers_full_var(pre_decoder_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pre_decoder_vcvc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pre_decoder_vcvc_sptr self, int which) -> float
        pc_output_buffers_full(pre_decoder_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pre_decoder_vcvc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pre_decoder_vcvc_sptr self, int which) -> float
        pc_output_buffers_full_avg(pre_decoder_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pre_decoder_vcvc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pre_decoder_vcvc_sptr self, int which) -> float
        pc_output_buffers_full_var(pre_decoder_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pre_decoder_vcvc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pre_decoder_vcvc_sptr self) -> float"""
        return _lte_swig.pre_decoder_vcvc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pre_decoder_vcvc_sptr self) -> float"""
        return _lte_swig.pre_decoder_vcvc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pre_decoder_vcvc_sptr self) -> float"""
        return _lte_swig.pre_decoder_vcvc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pre_decoder_vcvc_sptr self) -> float"""
        return _lte_swig.pre_decoder_vcvc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pre_decoder_vcvc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.pre_decoder_vcvc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pre_decoder_vcvc_sptr self)"""
        return _lte_swig.pre_decoder_vcvc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pre_decoder_vcvc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.pre_decoder_vcvc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pre_decoder_vcvc_sptr self) -> int"""
        return _lte_swig.pre_decoder_vcvc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pre_decoder_vcvc_sptr self) -> int"""
        return _lte_swig.pre_decoder_vcvc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pre_decoder_vcvc_sptr self, int priority) -> int"""
        return _lte_swig.pre_decoder_vcvc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pre_decoder_vcvc_sptr self) -> std::string"""
        return _lte_swig.pre_decoder_vcvc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pre_decoder_vcvc_sptr self) -> std::string"""
        return _lte_swig.pre_decoder_vcvc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pre_decoder_vcvc_sptr self) -> io_signature_sptr"""
        return _lte_swig.pre_decoder_vcvc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pre_decoder_vcvc_sptr self) -> io_signature_sptr"""
        return _lte_swig.pre_decoder_vcvc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pre_decoder_vcvc_sptr self) -> long"""
        return _lte_swig.pre_decoder_vcvc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pre_decoder_vcvc_sptr self) -> basic_block_sptr"""
        return _lte_swig.pre_decoder_vcvc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pre_decoder_vcvc_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.pre_decoder_vcvc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pre_decoder_vcvc_sptr self) -> std::string"""
        return _lte_swig.pre_decoder_vcvc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pre_decoder_vcvc_sptr self, std::string name)"""
        return _lte_swig.pre_decoder_vcvc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pre_decoder_vcvc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.pre_decoder_vcvc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pre_decoder_vcvc_sptr self) -> swig_int_ptr"""
        return _lte_swig.pre_decoder_vcvc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pre_decoder_vcvc_sptr self) -> swig_int_ptr"""
        return _lte_swig.pre_decoder_vcvc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pre_decoder_vcvc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.pre_decoder_vcvc_sptr_message_subscribers(self, *args, **kwargs)

pre_decoder_vcvc_sptr_swigregister = _lte_swig.pre_decoder_vcvc_sptr_swigregister
pre_decoder_vcvc_sptr_swigregister(pre_decoder_vcvc_sptr)

pre_decoder_vcvc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pre_decoder_vcvc = pre_decoder_vcvc.make;

class pbch_demux_vcvc(object):
    """Demultiplex PBCH data from resource grid."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int N_rb_dl, std::string name="pbch_demux_vcvc") -> pbch_demux_vcvc_sptr

        Return a shared_ptr to a new instance of lte::pbch_demux_vcvc.

        To avoid accidental use of raw pointers, lte::pbch_demux_vcvc's constructor is in a private implementation class. lte::pbch_demux_vcvc::make is the public interface for creating new instances.

        Params: (N_rb_dl, name)
        """
        return _lte_swig.pbch_demux_vcvc_make(*args, **kwargs)

    make = staticmethod(make)
    def set_cell_id(self, *args, **kwargs):
        """
        set_cell_id(pbch_demux_vcvc self, int id)

        Params: (id)
        """
        return _lte_swig.pbch_demux_vcvc_set_cell_id(self, *args, **kwargs)

    __swig_destroy__ = _lte_swig.delete_pbch_demux_vcvc
    __del__ = lambda self : None;
pbch_demux_vcvc_swigregister = _lte_swig.pbch_demux_vcvc_swigregister
pbch_demux_vcvc_swigregister(pbch_demux_vcvc)

def pbch_demux_vcvc_make(*args, **kwargs):
  """
    pbch_demux_vcvc_make(int N_rb_dl, std::string name="pbch_demux_vcvc") -> pbch_demux_vcvc_sptr

    Return a shared_ptr to a new instance of lte::pbch_demux_vcvc.

    To avoid accidental use of raw pointers, lte::pbch_demux_vcvc's constructor is in a private implementation class. lte::pbch_demux_vcvc::make is the public interface for creating new instances.

    Params: (N_rb_dl, name)
    """
  return _lte_swig.pbch_demux_vcvc_make(*args, **kwargs)

class pbch_demux_vcvc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::pbch_demux_vcvc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::pbch_demux_vcvc)> self) -> pbch_demux_vcvc_sptr
        __init__(boost::shared_ptr<(gr::lte::pbch_demux_vcvc)> self, pbch_demux_vcvc p) -> pbch_demux_vcvc_sptr
        """
        this = _lte_swig.new_pbch_demux_vcvc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pbch_demux_vcvc_sptr self) -> pbch_demux_vcvc"""
        return _lte_swig.pbch_demux_vcvc_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_pbch_demux_vcvc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pbch_demux_vcvc_sptr self, int N_rb_dl, std::string name="pbch_demux_vcvc") -> pbch_demux_vcvc_sptr

        Return a shared_ptr to a new instance of lte::pbch_demux_vcvc.

        To avoid accidental use of raw pointers, lte::pbch_demux_vcvc's constructor is in a private implementation class. lte::pbch_demux_vcvc::make is the public interface for creating new instances.

        Params: (N_rb_dl, name)
        """
        return _lte_swig.pbch_demux_vcvc_sptr_make(self, *args, **kwargs)

    def set_cell_id(self, *args, **kwargs):
        """
        set_cell_id(pbch_demux_vcvc_sptr self, int id)

        Params: (id)
        """
        return _lte_swig.pbch_demux_vcvc_sptr_set_cell_id(self, *args, **kwargs)

    def history(self):
        """history(pbch_demux_vcvc_sptr self) -> unsigned int"""
        return _lte_swig.pbch_demux_vcvc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pbch_demux_vcvc_sptr self, int which, int delay)
        declare_sample_delay(pbch_demux_vcvc_sptr self, unsigned int delay)
        """
        return _lte_swig.pbch_demux_vcvc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pbch_demux_vcvc_sptr self, int which) -> unsigned int"""
        return _lte_swig.pbch_demux_vcvc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pbch_demux_vcvc_sptr self) -> int"""
        return _lte_swig.pbch_demux_vcvc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pbch_demux_vcvc_sptr self) -> double"""
        return _lte_swig.pbch_demux_vcvc_sptr_relative_rate(self)

    def start(self):
        """start(pbch_demux_vcvc_sptr self) -> bool"""
        return _lte_swig.pbch_demux_vcvc_sptr_start(self)

    def stop(self):
        """stop(pbch_demux_vcvc_sptr self) -> bool"""
        return _lte_swig.pbch_demux_vcvc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pbch_demux_vcvc_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.pbch_demux_vcvc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pbch_demux_vcvc_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.pbch_demux_vcvc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pbch_demux_vcvc_sptr self) -> int"""
        return _lte_swig.pbch_demux_vcvc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pbch_demux_vcvc_sptr self, int m)"""
        return _lte_swig.pbch_demux_vcvc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pbch_demux_vcvc_sptr self)"""
        return _lte_swig.pbch_demux_vcvc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pbch_demux_vcvc_sptr self) -> bool"""
        return _lte_swig.pbch_demux_vcvc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pbch_demux_vcvc_sptr self, int m)"""
        return _lte_swig.pbch_demux_vcvc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pbch_demux_vcvc_sptr self) -> int"""
        return _lte_swig.pbch_demux_vcvc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pbch_demux_vcvc_sptr self, int i) -> long"""
        return _lte_swig.pbch_demux_vcvc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pbch_demux_vcvc_sptr self, long max_output_buffer)
        set_max_output_buffer(pbch_demux_vcvc_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.pbch_demux_vcvc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pbch_demux_vcvc_sptr self, int i) -> long"""
        return _lte_swig.pbch_demux_vcvc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pbch_demux_vcvc_sptr self, long min_output_buffer)
        set_min_output_buffer(pbch_demux_vcvc_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.pbch_demux_vcvc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pbch_demux_vcvc_sptr self) -> float"""
        return _lte_swig.pbch_demux_vcvc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pbch_demux_vcvc_sptr self) -> float"""
        return _lte_swig.pbch_demux_vcvc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pbch_demux_vcvc_sptr self) -> float"""
        return _lte_swig.pbch_demux_vcvc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pbch_demux_vcvc_sptr self) -> float"""
        return _lte_swig.pbch_demux_vcvc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pbch_demux_vcvc_sptr self) -> float"""
        return _lte_swig.pbch_demux_vcvc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pbch_demux_vcvc_sptr self) -> float"""
        return _lte_swig.pbch_demux_vcvc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pbch_demux_vcvc_sptr self, int which) -> float
        pc_input_buffers_full(pbch_demux_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pbch_demux_vcvc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pbch_demux_vcvc_sptr self, int which) -> float
        pc_input_buffers_full_avg(pbch_demux_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pbch_demux_vcvc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pbch_demux_vcvc_sptr self, int which) -> float
        pc_input_buffers_full_var(pbch_demux_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pbch_demux_vcvc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pbch_demux_vcvc_sptr self, int which) -> float
        pc_output_buffers_full(pbch_demux_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pbch_demux_vcvc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pbch_demux_vcvc_sptr self, int which) -> float
        pc_output_buffers_full_avg(pbch_demux_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pbch_demux_vcvc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pbch_demux_vcvc_sptr self, int which) -> float
        pc_output_buffers_full_var(pbch_demux_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pbch_demux_vcvc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pbch_demux_vcvc_sptr self) -> float"""
        return _lte_swig.pbch_demux_vcvc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pbch_demux_vcvc_sptr self) -> float"""
        return _lte_swig.pbch_demux_vcvc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pbch_demux_vcvc_sptr self) -> float"""
        return _lte_swig.pbch_demux_vcvc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pbch_demux_vcvc_sptr self) -> float"""
        return _lte_swig.pbch_demux_vcvc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pbch_demux_vcvc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.pbch_demux_vcvc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pbch_demux_vcvc_sptr self)"""
        return _lte_swig.pbch_demux_vcvc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pbch_demux_vcvc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.pbch_demux_vcvc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pbch_demux_vcvc_sptr self) -> int"""
        return _lte_swig.pbch_demux_vcvc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pbch_demux_vcvc_sptr self) -> int"""
        return _lte_swig.pbch_demux_vcvc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pbch_demux_vcvc_sptr self, int priority) -> int"""
        return _lte_swig.pbch_demux_vcvc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pbch_demux_vcvc_sptr self) -> std::string"""
        return _lte_swig.pbch_demux_vcvc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pbch_demux_vcvc_sptr self) -> std::string"""
        return _lte_swig.pbch_demux_vcvc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pbch_demux_vcvc_sptr self) -> io_signature_sptr"""
        return _lte_swig.pbch_demux_vcvc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pbch_demux_vcvc_sptr self) -> io_signature_sptr"""
        return _lte_swig.pbch_demux_vcvc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pbch_demux_vcvc_sptr self) -> long"""
        return _lte_swig.pbch_demux_vcvc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pbch_demux_vcvc_sptr self) -> basic_block_sptr"""
        return _lte_swig.pbch_demux_vcvc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pbch_demux_vcvc_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.pbch_demux_vcvc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pbch_demux_vcvc_sptr self) -> std::string"""
        return _lte_swig.pbch_demux_vcvc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pbch_demux_vcvc_sptr self, std::string name)"""
        return _lte_swig.pbch_demux_vcvc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pbch_demux_vcvc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.pbch_demux_vcvc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pbch_demux_vcvc_sptr self) -> swig_int_ptr"""
        return _lte_swig.pbch_demux_vcvc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pbch_demux_vcvc_sptr self) -> swig_int_ptr"""
        return _lte_swig.pbch_demux_vcvc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pbch_demux_vcvc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.pbch_demux_vcvc_sptr_message_subscribers(self, *args, **kwargs)

pbch_demux_vcvc_sptr_swigregister = _lte_swig.pbch_demux_vcvc_sptr_swigregister
pbch_demux_vcvc_sptr_swigregister(pbch_demux_vcvc_sptr)

pbch_demux_vcvc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pbch_demux_vcvc = pbch_demux_vcvc.make;

class channel_estimator_vcvc(object):
    """Channel Estimator for OFDM."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int subcarriers, std::string tag_key, std::string msg_buf_name, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & pilot_carriers, 
            gr_vector_vector_complexf pilot_symbols, 
            std::string name="channel_estimator_vcvc") -> channel_estimator_vcvc_sptr

        Return a shared_ptr to a new instance of lte::channel_estimator_vcvc.

        To avoid accidental use of raw pointers, lte::channel_estimator_vcvc's constructor is in a private implementation class. lte::channel_estimator_vcvc::make is the public interface for creating new instances.

        Params: (subcarriers, tag_key, msg_buf_name, pilot_carriers, pilot_symbols, name)
        """
        return _lte_swig.channel_estimator_vcvc_make(*args, **kwargs)

    make = staticmethod(make)
    def set_pilot_map(self, *args, **kwargs):
        """
        set_pilot_map(channel_estimator_vcvc self, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & pilot_carriers, 
            gr_vector_vector_complexf pilot_symbols)

        Params: (pilot_carriers, pilot_symbols)
        """
        return _lte_swig.channel_estimator_vcvc_set_pilot_map(self, *args, **kwargs)

    def get_pilot_carriers(self):
        """
        get_pilot_carriers(channel_estimator_vcvc self) -> std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >

        Params: (NONE)
        """
        return _lte_swig.channel_estimator_vcvc_get_pilot_carriers(self)

    __swig_destroy__ = _lte_swig.delete_channel_estimator_vcvc
    __del__ = lambda self : None;
channel_estimator_vcvc_swigregister = _lte_swig.channel_estimator_vcvc_swigregister
channel_estimator_vcvc_swigregister(channel_estimator_vcvc)

def channel_estimator_vcvc_make(*args, **kwargs):
  """
    channel_estimator_vcvc_make(int subcarriers, std::string tag_key, std::string msg_buf_name, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & pilot_carriers, 
        gr_vector_vector_complexf pilot_symbols, 
        std::string name="channel_estimator_vcvc") -> channel_estimator_vcvc_sptr

    Return a shared_ptr to a new instance of lte::channel_estimator_vcvc.

    To avoid accidental use of raw pointers, lte::channel_estimator_vcvc's constructor is in a private implementation class. lte::channel_estimator_vcvc::make is the public interface for creating new instances.

    Params: (subcarriers, tag_key, msg_buf_name, pilot_carriers, pilot_symbols, name)
    """
  return _lte_swig.channel_estimator_vcvc_make(*args, **kwargs)

class channel_estimator_vcvc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::channel_estimator_vcvc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::channel_estimator_vcvc)> self) -> channel_estimator_vcvc_sptr
        __init__(boost::shared_ptr<(gr::lte::channel_estimator_vcvc)> self, channel_estimator_vcvc p) -> channel_estimator_vcvc_sptr
        """
        this = _lte_swig.new_channel_estimator_vcvc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(channel_estimator_vcvc_sptr self) -> channel_estimator_vcvc"""
        return _lte_swig.channel_estimator_vcvc_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_channel_estimator_vcvc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(channel_estimator_vcvc_sptr self, int subcarriers, std::string tag_key, std::string msg_buf_name, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & pilot_carriers, 
            gr_vector_vector_complexf pilot_symbols, 
            std::string name="channel_estimator_vcvc") -> channel_estimator_vcvc_sptr

        Return a shared_ptr to a new instance of lte::channel_estimator_vcvc.

        To avoid accidental use of raw pointers, lte::channel_estimator_vcvc's constructor is in a private implementation class. lte::channel_estimator_vcvc::make is the public interface for creating new instances.

        Params: (subcarriers, tag_key, msg_buf_name, pilot_carriers, pilot_symbols, name)
        """
        return _lte_swig.channel_estimator_vcvc_sptr_make(self, *args, **kwargs)

    def set_pilot_map(self, *args, **kwargs):
        """
        set_pilot_map(channel_estimator_vcvc_sptr self, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & pilot_carriers, 
            gr_vector_vector_complexf pilot_symbols)

        Params: (pilot_carriers, pilot_symbols)
        """
        return _lte_swig.channel_estimator_vcvc_sptr_set_pilot_map(self, *args, **kwargs)

    def get_pilot_carriers(self):
        """
        get_pilot_carriers(channel_estimator_vcvc_sptr self) -> std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >

        Params: (NONE)
        """
        return _lte_swig.channel_estimator_vcvc_sptr_get_pilot_carriers(self)

    def history(self):
        """history(channel_estimator_vcvc_sptr self) -> unsigned int"""
        return _lte_swig.channel_estimator_vcvc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(channel_estimator_vcvc_sptr self, int which, int delay)
        declare_sample_delay(channel_estimator_vcvc_sptr self, unsigned int delay)
        """
        return _lte_swig.channel_estimator_vcvc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(channel_estimator_vcvc_sptr self, int which) -> unsigned int"""
        return _lte_swig.channel_estimator_vcvc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(channel_estimator_vcvc_sptr self) -> int"""
        return _lte_swig.channel_estimator_vcvc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(channel_estimator_vcvc_sptr self) -> double"""
        return _lte_swig.channel_estimator_vcvc_sptr_relative_rate(self)

    def start(self):
        """start(channel_estimator_vcvc_sptr self) -> bool"""
        return _lte_swig.channel_estimator_vcvc_sptr_start(self)

    def stop(self):
        """stop(channel_estimator_vcvc_sptr self) -> bool"""
        return _lte_swig.channel_estimator_vcvc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(channel_estimator_vcvc_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.channel_estimator_vcvc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(channel_estimator_vcvc_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.channel_estimator_vcvc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(channel_estimator_vcvc_sptr self) -> int"""
        return _lte_swig.channel_estimator_vcvc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(channel_estimator_vcvc_sptr self, int m)"""
        return _lte_swig.channel_estimator_vcvc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(channel_estimator_vcvc_sptr self)"""
        return _lte_swig.channel_estimator_vcvc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(channel_estimator_vcvc_sptr self) -> bool"""
        return _lte_swig.channel_estimator_vcvc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(channel_estimator_vcvc_sptr self, int m)"""
        return _lte_swig.channel_estimator_vcvc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(channel_estimator_vcvc_sptr self) -> int"""
        return _lte_swig.channel_estimator_vcvc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(channel_estimator_vcvc_sptr self, int i) -> long"""
        return _lte_swig.channel_estimator_vcvc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(channel_estimator_vcvc_sptr self, long max_output_buffer)
        set_max_output_buffer(channel_estimator_vcvc_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.channel_estimator_vcvc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(channel_estimator_vcvc_sptr self, int i) -> long"""
        return _lte_swig.channel_estimator_vcvc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(channel_estimator_vcvc_sptr self, long min_output_buffer)
        set_min_output_buffer(channel_estimator_vcvc_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.channel_estimator_vcvc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(channel_estimator_vcvc_sptr self) -> float"""
        return _lte_swig.channel_estimator_vcvc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(channel_estimator_vcvc_sptr self) -> float"""
        return _lte_swig.channel_estimator_vcvc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(channel_estimator_vcvc_sptr self) -> float"""
        return _lte_swig.channel_estimator_vcvc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(channel_estimator_vcvc_sptr self) -> float"""
        return _lte_swig.channel_estimator_vcvc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(channel_estimator_vcvc_sptr self) -> float"""
        return _lte_swig.channel_estimator_vcvc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(channel_estimator_vcvc_sptr self) -> float"""
        return _lte_swig.channel_estimator_vcvc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(channel_estimator_vcvc_sptr self, int which) -> float
        pc_input_buffers_full(channel_estimator_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.channel_estimator_vcvc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(channel_estimator_vcvc_sptr self, int which) -> float
        pc_input_buffers_full_avg(channel_estimator_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.channel_estimator_vcvc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(channel_estimator_vcvc_sptr self, int which) -> float
        pc_input_buffers_full_var(channel_estimator_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.channel_estimator_vcvc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(channel_estimator_vcvc_sptr self, int which) -> float
        pc_output_buffers_full(channel_estimator_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.channel_estimator_vcvc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(channel_estimator_vcvc_sptr self, int which) -> float
        pc_output_buffers_full_avg(channel_estimator_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.channel_estimator_vcvc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(channel_estimator_vcvc_sptr self, int which) -> float
        pc_output_buffers_full_var(channel_estimator_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.channel_estimator_vcvc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(channel_estimator_vcvc_sptr self) -> float"""
        return _lte_swig.channel_estimator_vcvc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(channel_estimator_vcvc_sptr self) -> float"""
        return _lte_swig.channel_estimator_vcvc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(channel_estimator_vcvc_sptr self) -> float"""
        return _lte_swig.channel_estimator_vcvc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(channel_estimator_vcvc_sptr self) -> float"""
        return _lte_swig.channel_estimator_vcvc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(channel_estimator_vcvc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.channel_estimator_vcvc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(channel_estimator_vcvc_sptr self)"""
        return _lte_swig.channel_estimator_vcvc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(channel_estimator_vcvc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.channel_estimator_vcvc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(channel_estimator_vcvc_sptr self) -> int"""
        return _lte_swig.channel_estimator_vcvc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(channel_estimator_vcvc_sptr self) -> int"""
        return _lte_swig.channel_estimator_vcvc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(channel_estimator_vcvc_sptr self, int priority) -> int"""
        return _lte_swig.channel_estimator_vcvc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(channel_estimator_vcvc_sptr self) -> std::string"""
        return _lte_swig.channel_estimator_vcvc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(channel_estimator_vcvc_sptr self) -> std::string"""
        return _lte_swig.channel_estimator_vcvc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(channel_estimator_vcvc_sptr self) -> io_signature_sptr"""
        return _lte_swig.channel_estimator_vcvc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(channel_estimator_vcvc_sptr self) -> io_signature_sptr"""
        return _lte_swig.channel_estimator_vcvc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(channel_estimator_vcvc_sptr self) -> long"""
        return _lte_swig.channel_estimator_vcvc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(channel_estimator_vcvc_sptr self) -> basic_block_sptr"""
        return _lte_swig.channel_estimator_vcvc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(channel_estimator_vcvc_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.channel_estimator_vcvc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(channel_estimator_vcvc_sptr self) -> std::string"""
        return _lte_swig.channel_estimator_vcvc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(channel_estimator_vcvc_sptr self, std::string name)"""
        return _lte_swig.channel_estimator_vcvc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(channel_estimator_vcvc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.channel_estimator_vcvc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(channel_estimator_vcvc_sptr self) -> swig_int_ptr"""
        return _lte_swig.channel_estimator_vcvc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(channel_estimator_vcvc_sptr self) -> swig_int_ptr"""
        return _lte_swig.channel_estimator_vcvc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(channel_estimator_vcvc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.channel_estimator_vcvc_sptr_message_subscribers(self, *args, **kwargs)

channel_estimator_vcvc_sptr_swigregister = _lte_swig.channel_estimator_vcvc_sptr_swigregister
channel_estimator_vcvc_sptr_swigregister(channel_estimator_vcvc_sptr)

channel_estimator_vcvc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
channel_estimator_vcvc = channel_estimator_vcvc.make;

class extract_subcarriers_vcvc(object):
    """Extract occupied subcarriers in frequency domain."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int N_rb_dl, int fftl, std::string name="extract_subcarriers_vcvc") -> extract_subcarriers_vcvc_sptr

        Return a shared_ptr to a new instance of lte::extract_subcarriers_vcvc.

        To avoid accidental use of raw pointers, lte::extract_subcarriers_vcvc's constructor is in a private implementation class. lte::extract_subcarriers_vcvc::make is the public interface for creating new instances.

        Params: (N_rb_dl, fftl, name)
        """
        return _lte_swig.extract_subcarriers_vcvc_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_extract_subcarriers_vcvc
    __del__ = lambda self : None;
extract_subcarriers_vcvc_swigregister = _lte_swig.extract_subcarriers_vcvc_swigregister
extract_subcarriers_vcvc_swigregister(extract_subcarriers_vcvc)

def extract_subcarriers_vcvc_make(*args, **kwargs):
  """
    extract_subcarriers_vcvc_make(int N_rb_dl, int fftl, std::string name="extract_subcarriers_vcvc") -> extract_subcarriers_vcvc_sptr

    Return a shared_ptr to a new instance of lte::extract_subcarriers_vcvc.

    To avoid accidental use of raw pointers, lte::extract_subcarriers_vcvc's constructor is in a private implementation class. lte::extract_subcarriers_vcvc::make is the public interface for creating new instances.

    Params: (N_rb_dl, fftl, name)
    """
  return _lte_swig.extract_subcarriers_vcvc_make(*args, **kwargs)

class extract_subcarriers_vcvc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::extract_subcarriers_vcvc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::extract_subcarriers_vcvc)> self) -> extract_subcarriers_vcvc_sptr
        __init__(boost::shared_ptr<(gr::lte::extract_subcarriers_vcvc)> self, extract_subcarriers_vcvc p) -> extract_subcarriers_vcvc_sptr
        """
        this = _lte_swig.new_extract_subcarriers_vcvc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(extract_subcarriers_vcvc_sptr self) -> extract_subcarriers_vcvc"""
        return _lte_swig.extract_subcarriers_vcvc_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_extract_subcarriers_vcvc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(extract_subcarriers_vcvc_sptr self, int N_rb_dl, int fftl, std::string name="extract_subcarriers_vcvc") -> extract_subcarriers_vcvc_sptr

        Return a shared_ptr to a new instance of lte::extract_subcarriers_vcvc.

        To avoid accidental use of raw pointers, lte::extract_subcarriers_vcvc's constructor is in a private implementation class. lte::extract_subcarriers_vcvc::make is the public interface for creating new instances.

        Params: (N_rb_dl, fftl, name)
        """
        return _lte_swig.extract_subcarriers_vcvc_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(extract_subcarriers_vcvc_sptr self) -> unsigned int"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(extract_subcarriers_vcvc_sptr self, int which, int delay)
        declare_sample_delay(extract_subcarriers_vcvc_sptr self, unsigned int delay)
        """
        return _lte_swig.extract_subcarriers_vcvc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(extract_subcarriers_vcvc_sptr self, int which) -> unsigned int"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(extract_subcarriers_vcvc_sptr self) -> int"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(extract_subcarriers_vcvc_sptr self) -> double"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_relative_rate(self)

    def start(self):
        """start(extract_subcarriers_vcvc_sptr self) -> bool"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_start(self)

    def stop(self):
        """stop(extract_subcarriers_vcvc_sptr self) -> bool"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(extract_subcarriers_vcvc_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(extract_subcarriers_vcvc_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(extract_subcarriers_vcvc_sptr self) -> int"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(extract_subcarriers_vcvc_sptr self, int m)"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(extract_subcarriers_vcvc_sptr self)"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(extract_subcarriers_vcvc_sptr self) -> bool"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(extract_subcarriers_vcvc_sptr self, int m)"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(extract_subcarriers_vcvc_sptr self) -> int"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(extract_subcarriers_vcvc_sptr self, int i) -> long"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(extract_subcarriers_vcvc_sptr self, long max_output_buffer)
        set_max_output_buffer(extract_subcarriers_vcvc_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.extract_subcarriers_vcvc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(extract_subcarriers_vcvc_sptr self, int i) -> long"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(extract_subcarriers_vcvc_sptr self, long min_output_buffer)
        set_min_output_buffer(extract_subcarriers_vcvc_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.extract_subcarriers_vcvc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(extract_subcarriers_vcvc_sptr self) -> float"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(extract_subcarriers_vcvc_sptr self) -> float"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(extract_subcarriers_vcvc_sptr self) -> float"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(extract_subcarriers_vcvc_sptr self) -> float"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(extract_subcarriers_vcvc_sptr self) -> float"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(extract_subcarriers_vcvc_sptr self) -> float"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(extract_subcarriers_vcvc_sptr self, int which) -> float
        pc_input_buffers_full(extract_subcarriers_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.extract_subcarriers_vcvc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(extract_subcarriers_vcvc_sptr self, int which) -> float
        pc_input_buffers_full_avg(extract_subcarriers_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.extract_subcarriers_vcvc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(extract_subcarriers_vcvc_sptr self, int which) -> float
        pc_input_buffers_full_var(extract_subcarriers_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.extract_subcarriers_vcvc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(extract_subcarriers_vcvc_sptr self, int which) -> float
        pc_output_buffers_full(extract_subcarriers_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.extract_subcarriers_vcvc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(extract_subcarriers_vcvc_sptr self, int which) -> float
        pc_output_buffers_full_avg(extract_subcarriers_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.extract_subcarriers_vcvc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(extract_subcarriers_vcvc_sptr self, int which) -> float
        pc_output_buffers_full_var(extract_subcarriers_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.extract_subcarriers_vcvc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(extract_subcarriers_vcvc_sptr self) -> float"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(extract_subcarriers_vcvc_sptr self) -> float"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(extract_subcarriers_vcvc_sptr self) -> float"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(extract_subcarriers_vcvc_sptr self) -> float"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(extract_subcarriers_vcvc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(extract_subcarriers_vcvc_sptr self)"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(extract_subcarriers_vcvc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(extract_subcarriers_vcvc_sptr self) -> int"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(extract_subcarriers_vcvc_sptr self) -> int"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(extract_subcarriers_vcvc_sptr self, int priority) -> int"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(extract_subcarriers_vcvc_sptr self) -> std::string"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(extract_subcarriers_vcvc_sptr self) -> std::string"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(extract_subcarriers_vcvc_sptr self) -> io_signature_sptr"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(extract_subcarriers_vcvc_sptr self) -> io_signature_sptr"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(extract_subcarriers_vcvc_sptr self) -> long"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(extract_subcarriers_vcvc_sptr self) -> basic_block_sptr"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(extract_subcarriers_vcvc_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(extract_subcarriers_vcvc_sptr self) -> std::string"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(extract_subcarriers_vcvc_sptr self, std::string name)"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(extract_subcarriers_vcvc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.extract_subcarriers_vcvc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(extract_subcarriers_vcvc_sptr self) -> swig_int_ptr"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(extract_subcarriers_vcvc_sptr self) -> swig_int_ptr"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(extract_subcarriers_vcvc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.extract_subcarriers_vcvc_sptr_message_subscribers(self, *args, **kwargs)

extract_subcarriers_vcvc_sptr_swigregister = _lte_swig.extract_subcarriers_vcvc_sptr_swigregister
extract_subcarriers_vcvc_sptr_swigregister(extract_subcarriers_vcvc_sptr)

extract_subcarriers_vcvc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
extract_subcarriers_vcvc = extract_subcarriers_vcvc.make;

class remove_cp_cvc(object):
    """Remove LTE specific CP from stream and output OFDM symbol vectors in time domain."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int fftl, std::string key, std::string name="remove_cp_cvc") -> remove_cp_cvc_sptr

        Return a shared_ptr to a new instance of lte::remove_cp_cvc.

        To avoid accidental use of raw pointers, lte::remove_cp_cvc's constructor is in a private implementation class. lte::remove_cp_cvc::make is the public interface for creating new instances.

        Params: (fftl, key, name)
        """
        return _lte_swig.remove_cp_cvc_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_remove_cp_cvc
    __del__ = lambda self : None;
remove_cp_cvc_swigregister = _lte_swig.remove_cp_cvc_swigregister
remove_cp_cvc_swigregister(remove_cp_cvc)

def remove_cp_cvc_make(*args, **kwargs):
  """
    remove_cp_cvc_make(int fftl, std::string key, std::string name="remove_cp_cvc") -> remove_cp_cvc_sptr

    Return a shared_ptr to a new instance of lte::remove_cp_cvc.

    To avoid accidental use of raw pointers, lte::remove_cp_cvc's constructor is in a private implementation class. lte::remove_cp_cvc::make is the public interface for creating new instances.

    Params: (fftl, key, name)
    """
  return _lte_swig.remove_cp_cvc_make(*args, **kwargs)

class remove_cp_cvc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::remove_cp_cvc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::remove_cp_cvc)> self) -> remove_cp_cvc_sptr
        __init__(boost::shared_ptr<(gr::lte::remove_cp_cvc)> self, remove_cp_cvc p) -> remove_cp_cvc_sptr
        """
        this = _lte_swig.new_remove_cp_cvc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(remove_cp_cvc_sptr self) -> remove_cp_cvc"""
        return _lte_swig.remove_cp_cvc_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_remove_cp_cvc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(remove_cp_cvc_sptr self, int fftl, std::string key, std::string name="remove_cp_cvc") -> remove_cp_cvc_sptr

        Return a shared_ptr to a new instance of lte::remove_cp_cvc.

        To avoid accidental use of raw pointers, lte::remove_cp_cvc's constructor is in a private implementation class. lte::remove_cp_cvc::make is the public interface for creating new instances.

        Params: (fftl, key, name)
        """
        return _lte_swig.remove_cp_cvc_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(remove_cp_cvc_sptr self) -> unsigned int"""
        return _lte_swig.remove_cp_cvc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(remove_cp_cvc_sptr self, int which, int delay)
        declare_sample_delay(remove_cp_cvc_sptr self, unsigned int delay)
        """
        return _lte_swig.remove_cp_cvc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(remove_cp_cvc_sptr self, int which) -> unsigned int"""
        return _lte_swig.remove_cp_cvc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(remove_cp_cvc_sptr self) -> int"""
        return _lte_swig.remove_cp_cvc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(remove_cp_cvc_sptr self) -> double"""
        return _lte_swig.remove_cp_cvc_sptr_relative_rate(self)

    def start(self):
        """start(remove_cp_cvc_sptr self) -> bool"""
        return _lte_swig.remove_cp_cvc_sptr_start(self)

    def stop(self):
        """stop(remove_cp_cvc_sptr self) -> bool"""
        return _lte_swig.remove_cp_cvc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(remove_cp_cvc_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.remove_cp_cvc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(remove_cp_cvc_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.remove_cp_cvc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(remove_cp_cvc_sptr self) -> int"""
        return _lte_swig.remove_cp_cvc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(remove_cp_cvc_sptr self, int m)"""
        return _lte_swig.remove_cp_cvc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(remove_cp_cvc_sptr self)"""
        return _lte_swig.remove_cp_cvc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(remove_cp_cvc_sptr self) -> bool"""
        return _lte_swig.remove_cp_cvc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(remove_cp_cvc_sptr self, int m)"""
        return _lte_swig.remove_cp_cvc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(remove_cp_cvc_sptr self) -> int"""
        return _lte_swig.remove_cp_cvc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(remove_cp_cvc_sptr self, int i) -> long"""
        return _lte_swig.remove_cp_cvc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(remove_cp_cvc_sptr self, long max_output_buffer)
        set_max_output_buffer(remove_cp_cvc_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.remove_cp_cvc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(remove_cp_cvc_sptr self, int i) -> long"""
        return _lte_swig.remove_cp_cvc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(remove_cp_cvc_sptr self, long min_output_buffer)
        set_min_output_buffer(remove_cp_cvc_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.remove_cp_cvc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(remove_cp_cvc_sptr self) -> float"""
        return _lte_swig.remove_cp_cvc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(remove_cp_cvc_sptr self) -> float"""
        return _lte_swig.remove_cp_cvc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(remove_cp_cvc_sptr self) -> float"""
        return _lte_swig.remove_cp_cvc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(remove_cp_cvc_sptr self) -> float"""
        return _lte_swig.remove_cp_cvc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(remove_cp_cvc_sptr self) -> float"""
        return _lte_swig.remove_cp_cvc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(remove_cp_cvc_sptr self) -> float"""
        return _lte_swig.remove_cp_cvc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(remove_cp_cvc_sptr self, int which) -> float
        pc_input_buffers_full(remove_cp_cvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.remove_cp_cvc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(remove_cp_cvc_sptr self, int which) -> float
        pc_input_buffers_full_avg(remove_cp_cvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.remove_cp_cvc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(remove_cp_cvc_sptr self, int which) -> float
        pc_input_buffers_full_var(remove_cp_cvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.remove_cp_cvc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(remove_cp_cvc_sptr self, int which) -> float
        pc_output_buffers_full(remove_cp_cvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.remove_cp_cvc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(remove_cp_cvc_sptr self, int which) -> float
        pc_output_buffers_full_avg(remove_cp_cvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.remove_cp_cvc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(remove_cp_cvc_sptr self, int which) -> float
        pc_output_buffers_full_var(remove_cp_cvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.remove_cp_cvc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(remove_cp_cvc_sptr self) -> float"""
        return _lte_swig.remove_cp_cvc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(remove_cp_cvc_sptr self) -> float"""
        return _lte_swig.remove_cp_cvc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(remove_cp_cvc_sptr self) -> float"""
        return _lte_swig.remove_cp_cvc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(remove_cp_cvc_sptr self) -> float"""
        return _lte_swig.remove_cp_cvc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(remove_cp_cvc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.remove_cp_cvc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(remove_cp_cvc_sptr self)"""
        return _lte_swig.remove_cp_cvc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(remove_cp_cvc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.remove_cp_cvc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(remove_cp_cvc_sptr self) -> int"""
        return _lte_swig.remove_cp_cvc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(remove_cp_cvc_sptr self) -> int"""
        return _lte_swig.remove_cp_cvc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(remove_cp_cvc_sptr self, int priority) -> int"""
        return _lte_swig.remove_cp_cvc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(remove_cp_cvc_sptr self) -> std::string"""
        return _lte_swig.remove_cp_cvc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(remove_cp_cvc_sptr self) -> std::string"""
        return _lte_swig.remove_cp_cvc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(remove_cp_cvc_sptr self) -> io_signature_sptr"""
        return _lte_swig.remove_cp_cvc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(remove_cp_cvc_sptr self) -> io_signature_sptr"""
        return _lte_swig.remove_cp_cvc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(remove_cp_cvc_sptr self) -> long"""
        return _lte_swig.remove_cp_cvc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(remove_cp_cvc_sptr self) -> basic_block_sptr"""
        return _lte_swig.remove_cp_cvc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(remove_cp_cvc_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.remove_cp_cvc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(remove_cp_cvc_sptr self) -> std::string"""
        return _lte_swig.remove_cp_cvc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(remove_cp_cvc_sptr self, std::string name)"""
        return _lte_swig.remove_cp_cvc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(remove_cp_cvc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.remove_cp_cvc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(remove_cp_cvc_sptr self) -> swig_int_ptr"""
        return _lte_swig.remove_cp_cvc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(remove_cp_cvc_sptr self) -> swig_int_ptr"""
        return _lte_swig.remove_cp_cvc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(remove_cp_cvc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.remove_cp_cvc_sptr_message_subscribers(self, *args, **kwargs)

remove_cp_cvc_sptr_swigregister = _lte_swig.remove_cp_cvc_sptr_swigregister
remove_cp_cvc_sptr_swigregister(remove_cp_cvc_sptr)

remove_cp_cvc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
remove_cp_cvc = remove_cp_cvc.make;

class sss_calculator_vcm(object):
    """Detect SSS in symbol."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int fftl, std::string key_id, std::string key_offset, std::string name="sss_calculator_vcm") -> sss_calculator_vcm_sptr

        Return a shared_ptr to a new instance of lte::sss_calculator_vcm.

        To avoid accidental use of raw pointers, lte::sss_calculator_vcm's constructor is in a private implementation class. lte::sss_calculator_vcm::make is the public interface for creating new instances.

        Params: (fftl, key_id, key_offset, name)
        """
        return _lte_swig.sss_calculator_vcm_make(*args, **kwargs)

    make = staticmethod(make)
    def get_cell_id(self):
        """
        get_cell_id(sss_calculator_vcm self) -> int

        Params: (NONE)
        """
        return _lte_swig.sss_calculator_vcm_get_cell_id(self)

    def get_frame_start(self):
        """
        get_frame_start(sss_calculator_vcm self) -> long

        Params: (NONE)
        """
        return _lte_swig.sss_calculator_vcm_get_frame_start(self)

    __swig_destroy__ = _lte_swig.delete_sss_calculator_vcm
    __del__ = lambda self : None;
sss_calculator_vcm_swigregister = _lte_swig.sss_calculator_vcm_swigregister
sss_calculator_vcm_swigregister(sss_calculator_vcm)

def sss_calculator_vcm_make(*args, **kwargs):
  """
    sss_calculator_vcm_make(int fftl, std::string key_id, std::string key_offset, std::string name="sss_calculator_vcm") -> sss_calculator_vcm_sptr

    Return a shared_ptr to a new instance of lte::sss_calculator_vcm.

    To avoid accidental use of raw pointers, lte::sss_calculator_vcm's constructor is in a private implementation class. lte::sss_calculator_vcm::make is the public interface for creating new instances.

    Params: (fftl, key_id, key_offset, name)
    """
  return _lte_swig.sss_calculator_vcm_make(*args, **kwargs)

class sss_calculator_vcm_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::sss_calculator_vcm)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::sss_calculator_vcm)> self) -> sss_calculator_vcm_sptr
        __init__(boost::shared_ptr<(gr::lte::sss_calculator_vcm)> self, sss_calculator_vcm p) -> sss_calculator_vcm_sptr
        """
        this = _lte_swig.new_sss_calculator_vcm_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sss_calculator_vcm_sptr self) -> sss_calculator_vcm"""
        return _lte_swig.sss_calculator_vcm_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_sss_calculator_vcm_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(sss_calculator_vcm_sptr self, int fftl, std::string key_id, std::string key_offset, std::string name="sss_calculator_vcm") -> sss_calculator_vcm_sptr

        Return a shared_ptr to a new instance of lte::sss_calculator_vcm.

        To avoid accidental use of raw pointers, lte::sss_calculator_vcm's constructor is in a private implementation class. lte::sss_calculator_vcm::make is the public interface for creating new instances.

        Params: (fftl, key_id, key_offset, name)
        """
        return _lte_swig.sss_calculator_vcm_sptr_make(self, *args, **kwargs)

    def get_cell_id(self):
        """
        get_cell_id(sss_calculator_vcm_sptr self) -> int

        Params: (NONE)
        """
        return _lte_swig.sss_calculator_vcm_sptr_get_cell_id(self)

    def get_frame_start(self):
        """
        get_frame_start(sss_calculator_vcm_sptr self) -> long

        Params: (NONE)
        """
        return _lte_swig.sss_calculator_vcm_sptr_get_frame_start(self)

    def history(self):
        """history(sss_calculator_vcm_sptr self) -> unsigned int"""
        return _lte_swig.sss_calculator_vcm_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sss_calculator_vcm_sptr self, int which, int delay)
        declare_sample_delay(sss_calculator_vcm_sptr self, unsigned int delay)
        """
        return _lte_swig.sss_calculator_vcm_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sss_calculator_vcm_sptr self, int which) -> unsigned int"""
        return _lte_swig.sss_calculator_vcm_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sss_calculator_vcm_sptr self) -> int"""
        return _lte_swig.sss_calculator_vcm_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sss_calculator_vcm_sptr self) -> double"""
        return _lte_swig.sss_calculator_vcm_sptr_relative_rate(self)

    def start(self):
        """start(sss_calculator_vcm_sptr self) -> bool"""
        return _lte_swig.sss_calculator_vcm_sptr_start(self)

    def stop(self):
        """stop(sss_calculator_vcm_sptr self) -> bool"""
        return _lte_swig.sss_calculator_vcm_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sss_calculator_vcm_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.sss_calculator_vcm_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sss_calculator_vcm_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.sss_calculator_vcm_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sss_calculator_vcm_sptr self) -> int"""
        return _lte_swig.sss_calculator_vcm_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sss_calculator_vcm_sptr self, int m)"""
        return _lte_swig.sss_calculator_vcm_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sss_calculator_vcm_sptr self)"""
        return _lte_swig.sss_calculator_vcm_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sss_calculator_vcm_sptr self) -> bool"""
        return _lte_swig.sss_calculator_vcm_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sss_calculator_vcm_sptr self, int m)"""
        return _lte_swig.sss_calculator_vcm_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sss_calculator_vcm_sptr self) -> int"""
        return _lte_swig.sss_calculator_vcm_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sss_calculator_vcm_sptr self, int i) -> long"""
        return _lte_swig.sss_calculator_vcm_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sss_calculator_vcm_sptr self, long max_output_buffer)
        set_max_output_buffer(sss_calculator_vcm_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.sss_calculator_vcm_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sss_calculator_vcm_sptr self, int i) -> long"""
        return _lte_swig.sss_calculator_vcm_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sss_calculator_vcm_sptr self, long min_output_buffer)
        set_min_output_buffer(sss_calculator_vcm_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.sss_calculator_vcm_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sss_calculator_vcm_sptr self) -> float"""
        return _lte_swig.sss_calculator_vcm_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sss_calculator_vcm_sptr self) -> float"""
        return _lte_swig.sss_calculator_vcm_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sss_calculator_vcm_sptr self) -> float"""
        return _lte_swig.sss_calculator_vcm_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sss_calculator_vcm_sptr self) -> float"""
        return _lte_swig.sss_calculator_vcm_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sss_calculator_vcm_sptr self) -> float"""
        return _lte_swig.sss_calculator_vcm_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sss_calculator_vcm_sptr self) -> float"""
        return _lte_swig.sss_calculator_vcm_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sss_calculator_vcm_sptr self, int which) -> float
        pc_input_buffers_full(sss_calculator_vcm_sptr self) -> pmt_vector_float
        """
        return _lte_swig.sss_calculator_vcm_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sss_calculator_vcm_sptr self, int which) -> float
        pc_input_buffers_full_avg(sss_calculator_vcm_sptr self) -> pmt_vector_float
        """
        return _lte_swig.sss_calculator_vcm_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sss_calculator_vcm_sptr self, int which) -> float
        pc_input_buffers_full_var(sss_calculator_vcm_sptr self) -> pmt_vector_float
        """
        return _lte_swig.sss_calculator_vcm_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sss_calculator_vcm_sptr self, int which) -> float
        pc_output_buffers_full(sss_calculator_vcm_sptr self) -> pmt_vector_float
        """
        return _lte_swig.sss_calculator_vcm_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sss_calculator_vcm_sptr self, int which) -> float
        pc_output_buffers_full_avg(sss_calculator_vcm_sptr self) -> pmt_vector_float
        """
        return _lte_swig.sss_calculator_vcm_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sss_calculator_vcm_sptr self, int which) -> float
        pc_output_buffers_full_var(sss_calculator_vcm_sptr self) -> pmt_vector_float
        """
        return _lte_swig.sss_calculator_vcm_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sss_calculator_vcm_sptr self) -> float"""
        return _lte_swig.sss_calculator_vcm_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sss_calculator_vcm_sptr self) -> float"""
        return _lte_swig.sss_calculator_vcm_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sss_calculator_vcm_sptr self) -> float"""
        return _lte_swig.sss_calculator_vcm_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sss_calculator_vcm_sptr self) -> float"""
        return _lte_swig.sss_calculator_vcm_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sss_calculator_vcm_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.sss_calculator_vcm_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sss_calculator_vcm_sptr self)"""
        return _lte_swig.sss_calculator_vcm_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sss_calculator_vcm_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.sss_calculator_vcm_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sss_calculator_vcm_sptr self) -> int"""
        return _lte_swig.sss_calculator_vcm_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sss_calculator_vcm_sptr self) -> int"""
        return _lte_swig.sss_calculator_vcm_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sss_calculator_vcm_sptr self, int priority) -> int"""
        return _lte_swig.sss_calculator_vcm_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sss_calculator_vcm_sptr self) -> std::string"""
        return _lte_swig.sss_calculator_vcm_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sss_calculator_vcm_sptr self) -> std::string"""
        return _lte_swig.sss_calculator_vcm_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sss_calculator_vcm_sptr self) -> io_signature_sptr"""
        return _lte_swig.sss_calculator_vcm_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sss_calculator_vcm_sptr self) -> io_signature_sptr"""
        return _lte_swig.sss_calculator_vcm_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sss_calculator_vcm_sptr self) -> long"""
        return _lte_swig.sss_calculator_vcm_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sss_calculator_vcm_sptr self) -> basic_block_sptr"""
        return _lte_swig.sss_calculator_vcm_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sss_calculator_vcm_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.sss_calculator_vcm_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sss_calculator_vcm_sptr self) -> std::string"""
        return _lte_swig.sss_calculator_vcm_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sss_calculator_vcm_sptr self, std::string name)"""
        return _lte_swig.sss_calculator_vcm_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sss_calculator_vcm_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.sss_calculator_vcm_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sss_calculator_vcm_sptr self) -> swig_int_ptr"""
        return _lte_swig.sss_calculator_vcm_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sss_calculator_vcm_sptr self) -> swig_int_ptr"""
        return _lte_swig.sss_calculator_vcm_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sss_calculator_vcm_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.sss_calculator_vcm_sptr_message_subscribers(self, *args, **kwargs)

sss_calculator_vcm_sptr_swigregister = _lte_swig.sss_calculator_vcm_sptr_swigregister
sss_calculator_vcm_sptr_swigregister(sss_calculator_vcm_sptr)

sss_calculator_vcm_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sss_calculator_vcm = sss_calculator_vcm.make;

class pcfich_unpack_vfm(object):
    """Unpack CFI and publish it on output message port."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def activate_debug_mode(self, *args, **kwargs):
        """
        activate_debug_mode(pcfich_unpack_vfm self, bool ena)

        Params: (ena)
        """
        return _lte_swig.pcfich_unpack_vfm_activate_debug_mode(self, *args, **kwargs)

    def cfi_results(self):
        """
        cfi_results(pcfich_unpack_vfm self) -> std::vector< int,std::allocator< int > >

        Params: (NONE)
        """
        return _lte_swig.pcfich_unpack_vfm_cfi_results(self)

    def make(*args, **kwargs):
        """
        make(std::string key, std::string msg_buf_name, std::string name="pcfich_unpack_vfm") -> pcfich_unpack_vfm_sptr

        Return a shared_ptr to a new instance of lte::pcfich_unpack_vfm.

        To avoid accidental use of raw pointers, lte::pcfich_unpack_vfm's constructor is in a private implementation class. lte::pcfich_unpack_vfm::make is the public interface for creating new instances.

        Params: (key, msg_buf_name, name)
        """
        return _lte_swig.pcfich_unpack_vfm_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_pcfich_unpack_vfm
    __del__ = lambda self : None;
pcfich_unpack_vfm_swigregister = _lte_swig.pcfich_unpack_vfm_swigregister
pcfich_unpack_vfm_swigregister(pcfich_unpack_vfm)

def pcfich_unpack_vfm_make(*args, **kwargs):
  """
    pcfich_unpack_vfm_make(std::string key, std::string msg_buf_name, std::string name="pcfich_unpack_vfm") -> pcfich_unpack_vfm_sptr

    Return a shared_ptr to a new instance of lte::pcfich_unpack_vfm.

    To avoid accidental use of raw pointers, lte::pcfich_unpack_vfm's constructor is in a private implementation class. lte::pcfich_unpack_vfm::make is the public interface for creating new instances.

    Params: (key, msg_buf_name, name)
    """
  return _lte_swig.pcfich_unpack_vfm_make(*args, **kwargs)

class pcfich_unpack_vfm_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::pcfich_unpack_vfm)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::pcfich_unpack_vfm)> self) -> pcfich_unpack_vfm_sptr
        __init__(boost::shared_ptr<(gr::lte::pcfich_unpack_vfm)> self, pcfich_unpack_vfm p) -> pcfich_unpack_vfm_sptr
        """
        this = _lte_swig.new_pcfich_unpack_vfm_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pcfich_unpack_vfm_sptr self) -> pcfich_unpack_vfm"""
        return _lte_swig.pcfich_unpack_vfm_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_pcfich_unpack_vfm_sptr
    __del__ = lambda self : None;
    def activate_debug_mode(self, *args, **kwargs):
        """
        activate_debug_mode(pcfich_unpack_vfm_sptr self, bool ena)

        Params: (ena)
        """
        return _lte_swig.pcfich_unpack_vfm_sptr_activate_debug_mode(self, *args, **kwargs)

    def cfi_results(self):
        """
        cfi_results(pcfich_unpack_vfm_sptr self) -> std::vector< int,std::allocator< int > >

        Params: (NONE)
        """
        return _lte_swig.pcfich_unpack_vfm_sptr_cfi_results(self)

    def make(self, *args, **kwargs):
        """
        make(pcfich_unpack_vfm_sptr self, std::string key, std::string msg_buf_name, std::string name="pcfich_unpack_vfm") -> pcfich_unpack_vfm_sptr

        Return a shared_ptr to a new instance of lte::pcfich_unpack_vfm.

        To avoid accidental use of raw pointers, lte::pcfich_unpack_vfm's constructor is in a private implementation class. lte::pcfich_unpack_vfm::make is the public interface for creating new instances.

        Params: (key, msg_buf_name, name)
        """
        return _lte_swig.pcfich_unpack_vfm_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(pcfich_unpack_vfm_sptr self) -> unsigned int"""
        return _lte_swig.pcfich_unpack_vfm_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pcfich_unpack_vfm_sptr self, int which, int delay)
        declare_sample_delay(pcfich_unpack_vfm_sptr self, unsigned int delay)
        """
        return _lte_swig.pcfich_unpack_vfm_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pcfich_unpack_vfm_sptr self, int which) -> unsigned int"""
        return _lte_swig.pcfich_unpack_vfm_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pcfich_unpack_vfm_sptr self) -> int"""
        return _lte_swig.pcfich_unpack_vfm_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pcfich_unpack_vfm_sptr self) -> double"""
        return _lte_swig.pcfich_unpack_vfm_sptr_relative_rate(self)

    def start(self):
        """start(pcfich_unpack_vfm_sptr self) -> bool"""
        return _lte_swig.pcfich_unpack_vfm_sptr_start(self)

    def stop(self):
        """stop(pcfich_unpack_vfm_sptr self) -> bool"""
        return _lte_swig.pcfich_unpack_vfm_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pcfich_unpack_vfm_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.pcfich_unpack_vfm_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pcfich_unpack_vfm_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.pcfich_unpack_vfm_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pcfich_unpack_vfm_sptr self) -> int"""
        return _lte_swig.pcfich_unpack_vfm_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pcfich_unpack_vfm_sptr self, int m)"""
        return _lte_swig.pcfich_unpack_vfm_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pcfich_unpack_vfm_sptr self)"""
        return _lte_swig.pcfich_unpack_vfm_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pcfich_unpack_vfm_sptr self) -> bool"""
        return _lte_swig.pcfich_unpack_vfm_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pcfich_unpack_vfm_sptr self, int m)"""
        return _lte_swig.pcfich_unpack_vfm_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pcfich_unpack_vfm_sptr self) -> int"""
        return _lte_swig.pcfich_unpack_vfm_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pcfich_unpack_vfm_sptr self, int i) -> long"""
        return _lte_swig.pcfich_unpack_vfm_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pcfich_unpack_vfm_sptr self, long max_output_buffer)
        set_max_output_buffer(pcfich_unpack_vfm_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.pcfich_unpack_vfm_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pcfich_unpack_vfm_sptr self, int i) -> long"""
        return _lte_swig.pcfich_unpack_vfm_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pcfich_unpack_vfm_sptr self, long min_output_buffer)
        set_min_output_buffer(pcfich_unpack_vfm_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.pcfich_unpack_vfm_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pcfich_unpack_vfm_sptr self) -> float"""
        return _lte_swig.pcfich_unpack_vfm_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pcfich_unpack_vfm_sptr self) -> float"""
        return _lte_swig.pcfich_unpack_vfm_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pcfich_unpack_vfm_sptr self) -> float"""
        return _lte_swig.pcfich_unpack_vfm_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pcfich_unpack_vfm_sptr self) -> float"""
        return _lte_swig.pcfich_unpack_vfm_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pcfich_unpack_vfm_sptr self) -> float"""
        return _lte_swig.pcfich_unpack_vfm_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pcfich_unpack_vfm_sptr self) -> float"""
        return _lte_swig.pcfich_unpack_vfm_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pcfich_unpack_vfm_sptr self, int which) -> float
        pc_input_buffers_full(pcfich_unpack_vfm_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pcfich_unpack_vfm_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pcfich_unpack_vfm_sptr self, int which) -> float
        pc_input_buffers_full_avg(pcfich_unpack_vfm_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pcfich_unpack_vfm_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pcfich_unpack_vfm_sptr self, int which) -> float
        pc_input_buffers_full_var(pcfich_unpack_vfm_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pcfich_unpack_vfm_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pcfich_unpack_vfm_sptr self, int which) -> float
        pc_output_buffers_full(pcfich_unpack_vfm_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pcfich_unpack_vfm_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pcfich_unpack_vfm_sptr self, int which) -> float
        pc_output_buffers_full_avg(pcfich_unpack_vfm_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pcfich_unpack_vfm_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pcfich_unpack_vfm_sptr self, int which) -> float
        pc_output_buffers_full_var(pcfich_unpack_vfm_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pcfich_unpack_vfm_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pcfich_unpack_vfm_sptr self) -> float"""
        return _lte_swig.pcfich_unpack_vfm_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pcfich_unpack_vfm_sptr self) -> float"""
        return _lte_swig.pcfich_unpack_vfm_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pcfich_unpack_vfm_sptr self) -> float"""
        return _lte_swig.pcfich_unpack_vfm_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pcfich_unpack_vfm_sptr self) -> float"""
        return _lte_swig.pcfich_unpack_vfm_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pcfich_unpack_vfm_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.pcfich_unpack_vfm_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pcfich_unpack_vfm_sptr self)"""
        return _lte_swig.pcfich_unpack_vfm_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pcfich_unpack_vfm_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.pcfich_unpack_vfm_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pcfich_unpack_vfm_sptr self) -> int"""
        return _lte_swig.pcfich_unpack_vfm_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pcfich_unpack_vfm_sptr self) -> int"""
        return _lte_swig.pcfich_unpack_vfm_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pcfich_unpack_vfm_sptr self, int priority) -> int"""
        return _lte_swig.pcfich_unpack_vfm_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pcfich_unpack_vfm_sptr self) -> std::string"""
        return _lte_swig.pcfich_unpack_vfm_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pcfich_unpack_vfm_sptr self) -> std::string"""
        return _lte_swig.pcfich_unpack_vfm_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pcfich_unpack_vfm_sptr self) -> io_signature_sptr"""
        return _lte_swig.pcfich_unpack_vfm_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pcfich_unpack_vfm_sptr self) -> io_signature_sptr"""
        return _lte_swig.pcfich_unpack_vfm_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pcfich_unpack_vfm_sptr self) -> long"""
        return _lte_swig.pcfich_unpack_vfm_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pcfich_unpack_vfm_sptr self) -> basic_block_sptr"""
        return _lte_swig.pcfich_unpack_vfm_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pcfich_unpack_vfm_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.pcfich_unpack_vfm_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pcfich_unpack_vfm_sptr self) -> std::string"""
        return _lte_swig.pcfich_unpack_vfm_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pcfich_unpack_vfm_sptr self, std::string name)"""
        return _lte_swig.pcfich_unpack_vfm_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pcfich_unpack_vfm_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.pcfich_unpack_vfm_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pcfich_unpack_vfm_sptr self) -> swig_int_ptr"""
        return _lte_swig.pcfich_unpack_vfm_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pcfich_unpack_vfm_sptr self) -> swig_int_ptr"""
        return _lte_swig.pcfich_unpack_vfm_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pcfich_unpack_vfm_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.pcfich_unpack_vfm_sptr_message_subscribers(self, *args, **kwargs)

pcfich_unpack_vfm_sptr_swigregister = _lte_swig.pcfich_unpack_vfm_sptr_swigregister
pcfich_unpack_vfm_sptr_swigregister(pcfich_unpack_vfm_sptr)

pcfich_unpack_vfm_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pcfich_unpack_vfm = pcfich_unpack_vfm.make;

class rough_symbol_sync_cc(object):
    """CP based rough sync to OFDM symbols."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int fftl, int vlen, std::string name="rough_symbol_sync_cc") -> rough_symbol_sync_cc_sptr

        Return a shared_ptr to a new instance of lte::rough_symbol_sync_cc.

        To avoid accidental use of raw pointers, lte::rough_symbol_sync_cc's constructor is in a private implementation class. lte::rough_symbol_sync_cc::make is the public interface for creating new instances.

        Params: (fftl, vlen, name)
        """
        return _lte_swig.rough_symbol_sync_cc_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_rough_symbol_sync_cc
    __del__ = lambda self : None;
rough_symbol_sync_cc_swigregister = _lte_swig.rough_symbol_sync_cc_swigregister
rough_symbol_sync_cc_swigregister(rough_symbol_sync_cc)

def rough_symbol_sync_cc_make(*args, **kwargs):
  """
    rough_symbol_sync_cc_make(int fftl, int vlen, std::string name="rough_symbol_sync_cc") -> rough_symbol_sync_cc_sptr

    Return a shared_ptr to a new instance of lte::rough_symbol_sync_cc.

    To avoid accidental use of raw pointers, lte::rough_symbol_sync_cc's constructor is in a private implementation class. lte::rough_symbol_sync_cc::make is the public interface for creating new instances.

    Params: (fftl, vlen, name)
    """
  return _lte_swig.rough_symbol_sync_cc_make(*args, **kwargs)

class rough_symbol_sync_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::rough_symbol_sync_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::rough_symbol_sync_cc)> self) -> rough_symbol_sync_cc_sptr
        __init__(boost::shared_ptr<(gr::lte::rough_symbol_sync_cc)> self, rough_symbol_sync_cc p) -> rough_symbol_sync_cc_sptr
        """
        this = _lte_swig.new_rough_symbol_sync_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(rough_symbol_sync_cc_sptr self) -> rough_symbol_sync_cc"""
        return _lte_swig.rough_symbol_sync_cc_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_rough_symbol_sync_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(rough_symbol_sync_cc_sptr self, int fftl, int vlen, std::string name="rough_symbol_sync_cc") -> rough_symbol_sync_cc_sptr

        Return a shared_ptr to a new instance of lte::rough_symbol_sync_cc.

        To avoid accidental use of raw pointers, lte::rough_symbol_sync_cc's constructor is in a private implementation class. lte::rough_symbol_sync_cc::make is the public interface for creating new instances.

        Params: (fftl, vlen, name)
        """
        return _lte_swig.rough_symbol_sync_cc_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(rough_symbol_sync_cc_sptr self) -> unsigned int"""
        return _lte_swig.rough_symbol_sync_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(rough_symbol_sync_cc_sptr self, int which, int delay)
        declare_sample_delay(rough_symbol_sync_cc_sptr self, unsigned int delay)
        """
        return _lte_swig.rough_symbol_sync_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(rough_symbol_sync_cc_sptr self, int which) -> unsigned int"""
        return _lte_swig.rough_symbol_sync_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(rough_symbol_sync_cc_sptr self) -> int"""
        return _lte_swig.rough_symbol_sync_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(rough_symbol_sync_cc_sptr self) -> double"""
        return _lte_swig.rough_symbol_sync_cc_sptr_relative_rate(self)

    def start(self):
        """start(rough_symbol_sync_cc_sptr self) -> bool"""
        return _lte_swig.rough_symbol_sync_cc_sptr_start(self)

    def stop(self):
        """stop(rough_symbol_sync_cc_sptr self) -> bool"""
        return _lte_swig.rough_symbol_sync_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(rough_symbol_sync_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.rough_symbol_sync_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(rough_symbol_sync_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.rough_symbol_sync_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(rough_symbol_sync_cc_sptr self) -> int"""
        return _lte_swig.rough_symbol_sync_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(rough_symbol_sync_cc_sptr self, int m)"""
        return _lte_swig.rough_symbol_sync_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(rough_symbol_sync_cc_sptr self)"""
        return _lte_swig.rough_symbol_sync_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(rough_symbol_sync_cc_sptr self) -> bool"""
        return _lte_swig.rough_symbol_sync_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(rough_symbol_sync_cc_sptr self, int m)"""
        return _lte_swig.rough_symbol_sync_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(rough_symbol_sync_cc_sptr self) -> int"""
        return _lte_swig.rough_symbol_sync_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(rough_symbol_sync_cc_sptr self, int i) -> long"""
        return _lte_swig.rough_symbol_sync_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(rough_symbol_sync_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(rough_symbol_sync_cc_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.rough_symbol_sync_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(rough_symbol_sync_cc_sptr self, int i) -> long"""
        return _lte_swig.rough_symbol_sync_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(rough_symbol_sync_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(rough_symbol_sync_cc_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.rough_symbol_sync_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(rough_symbol_sync_cc_sptr self) -> float"""
        return _lte_swig.rough_symbol_sync_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(rough_symbol_sync_cc_sptr self) -> float"""
        return _lte_swig.rough_symbol_sync_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(rough_symbol_sync_cc_sptr self) -> float"""
        return _lte_swig.rough_symbol_sync_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(rough_symbol_sync_cc_sptr self) -> float"""
        return _lte_swig.rough_symbol_sync_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(rough_symbol_sync_cc_sptr self) -> float"""
        return _lte_swig.rough_symbol_sync_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(rough_symbol_sync_cc_sptr self) -> float"""
        return _lte_swig.rough_symbol_sync_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(rough_symbol_sync_cc_sptr self, int which) -> float
        pc_input_buffers_full(rough_symbol_sync_cc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.rough_symbol_sync_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(rough_symbol_sync_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(rough_symbol_sync_cc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.rough_symbol_sync_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(rough_symbol_sync_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(rough_symbol_sync_cc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.rough_symbol_sync_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(rough_symbol_sync_cc_sptr self, int which) -> float
        pc_output_buffers_full(rough_symbol_sync_cc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.rough_symbol_sync_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(rough_symbol_sync_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(rough_symbol_sync_cc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.rough_symbol_sync_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(rough_symbol_sync_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(rough_symbol_sync_cc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.rough_symbol_sync_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(rough_symbol_sync_cc_sptr self) -> float"""
        return _lte_swig.rough_symbol_sync_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(rough_symbol_sync_cc_sptr self) -> float"""
        return _lte_swig.rough_symbol_sync_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(rough_symbol_sync_cc_sptr self) -> float"""
        return _lte_swig.rough_symbol_sync_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(rough_symbol_sync_cc_sptr self) -> float"""
        return _lte_swig.rough_symbol_sync_cc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(rough_symbol_sync_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.rough_symbol_sync_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(rough_symbol_sync_cc_sptr self)"""
        return _lte_swig.rough_symbol_sync_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(rough_symbol_sync_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.rough_symbol_sync_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(rough_symbol_sync_cc_sptr self) -> int"""
        return _lte_swig.rough_symbol_sync_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(rough_symbol_sync_cc_sptr self) -> int"""
        return _lte_swig.rough_symbol_sync_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(rough_symbol_sync_cc_sptr self, int priority) -> int"""
        return _lte_swig.rough_symbol_sync_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(rough_symbol_sync_cc_sptr self) -> std::string"""
        return _lte_swig.rough_symbol_sync_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(rough_symbol_sync_cc_sptr self) -> std::string"""
        return _lte_swig.rough_symbol_sync_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(rough_symbol_sync_cc_sptr self) -> io_signature_sptr"""
        return _lte_swig.rough_symbol_sync_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(rough_symbol_sync_cc_sptr self) -> io_signature_sptr"""
        return _lte_swig.rough_symbol_sync_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(rough_symbol_sync_cc_sptr self) -> long"""
        return _lte_swig.rough_symbol_sync_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(rough_symbol_sync_cc_sptr self) -> basic_block_sptr"""
        return _lte_swig.rough_symbol_sync_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(rough_symbol_sync_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.rough_symbol_sync_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(rough_symbol_sync_cc_sptr self) -> std::string"""
        return _lte_swig.rough_symbol_sync_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(rough_symbol_sync_cc_sptr self, std::string name)"""
        return _lte_swig.rough_symbol_sync_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(rough_symbol_sync_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.rough_symbol_sync_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(rough_symbol_sync_cc_sptr self) -> swig_int_ptr"""
        return _lte_swig.rough_symbol_sync_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(rough_symbol_sync_cc_sptr self) -> swig_int_ptr"""
        return _lte_swig.rough_symbol_sync_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(rough_symbol_sync_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.rough_symbol_sync_cc_sptr_message_subscribers(self, *args, **kwargs)

rough_symbol_sync_cc_sptr_swigregister = _lte_swig.rough_symbol_sync_cc_sptr_swigregister
rough_symbol_sync_cc_sptr_swigregister(rough_symbol_sync_cc_sptr)

rough_symbol_sync_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
rough_symbol_sync_cc = rough_symbol_sync_cc.make;

class pss_symbol_selector_cvc(object):
    """Extract symbols where PSS is assumed."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int fftl, std::string name="pss_symbol_selector_cvc") -> pss_symbol_selector_cvc_sptr

        Return a shared_ptr to a new instance of lte::pss_symbol_selector_cvc.

        To avoid accidental use of raw pointers, lte::pss_symbol_selector_cvc's constructor is in a private implementation class. lte::pss_symbol_selector_cvc::make is the public interface for creating new instances.

        Params: (fftl, name)
        """
        return _lte_swig.pss_symbol_selector_cvc_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_pss_symbol_selector_cvc
    __del__ = lambda self : None;
pss_symbol_selector_cvc_swigregister = _lte_swig.pss_symbol_selector_cvc_swigregister
pss_symbol_selector_cvc_swigregister(pss_symbol_selector_cvc)

def pss_symbol_selector_cvc_make(*args, **kwargs):
  """
    pss_symbol_selector_cvc_make(int fftl, std::string name="pss_symbol_selector_cvc") -> pss_symbol_selector_cvc_sptr

    Return a shared_ptr to a new instance of lte::pss_symbol_selector_cvc.

    To avoid accidental use of raw pointers, lte::pss_symbol_selector_cvc's constructor is in a private implementation class. lte::pss_symbol_selector_cvc::make is the public interface for creating new instances.

    Params: (fftl, name)
    """
  return _lte_swig.pss_symbol_selector_cvc_make(*args, **kwargs)

class pss_symbol_selector_cvc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::pss_symbol_selector_cvc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::pss_symbol_selector_cvc)> self) -> pss_symbol_selector_cvc_sptr
        __init__(boost::shared_ptr<(gr::lte::pss_symbol_selector_cvc)> self, pss_symbol_selector_cvc p) -> pss_symbol_selector_cvc_sptr
        """
        this = _lte_swig.new_pss_symbol_selector_cvc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pss_symbol_selector_cvc_sptr self) -> pss_symbol_selector_cvc"""
        return _lte_swig.pss_symbol_selector_cvc_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_pss_symbol_selector_cvc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pss_symbol_selector_cvc_sptr self, int fftl, std::string name="pss_symbol_selector_cvc") -> pss_symbol_selector_cvc_sptr

        Return a shared_ptr to a new instance of lte::pss_symbol_selector_cvc.

        To avoid accidental use of raw pointers, lte::pss_symbol_selector_cvc's constructor is in a private implementation class. lte::pss_symbol_selector_cvc::make is the public interface for creating new instances.

        Params: (fftl, name)
        """
        return _lte_swig.pss_symbol_selector_cvc_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(pss_symbol_selector_cvc_sptr self) -> unsigned int"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pss_symbol_selector_cvc_sptr self, int which, int delay)
        declare_sample_delay(pss_symbol_selector_cvc_sptr self, unsigned int delay)
        """
        return _lte_swig.pss_symbol_selector_cvc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pss_symbol_selector_cvc_sptr self, int which) -> unsigned int"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pss_symbol_selector_cvc_sptr self) -> int"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pss_symbol_selector_cvc_sptr self) -> double"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_relative_rate(self)

    def start(self):
        """start(pss_symbol_selector_cvc_sptr self) -> bool"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_start(self)

    def stop(self):
        """stop(pss_symbol_selector_cvc_sptr self) -> bool"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pss_symbol_selector_cvc_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pss_symbol_selector_cvc_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pss_symbol_selector_cvc_sptr self) -> int"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pss_symbol_selector_cvc_sptr self, int m)"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pss_symbol_selector_cvc_sptr self)"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pss_symbol_selector_cvc_sptr self) -> bool"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pss_symbol_selector_cvc_sptr self, int m)"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pss_symbol_selector_cvc_sptr self) -> int"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pss_symbol_selector_cvc_sptr self, int i) -> long"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pss_symbol_selector_cvc_sptr self, long max_output_buffer)
        set_max_output_buffer(pss_symbol_selector_cvc_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.pss_symbol_selector_cvc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pss_symbol_selector_cvc_sptr self, int i) -> long"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pss_symbol_selector_cvc_sptr self, long min_output_buffer)
        set_min_output_buffer(pss_symbol_selector_cvc_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.pss_symbol_selector_cvc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pss_symbol_selector_cvc_sptr self) -> float"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pss_symbol_selector_cvc_sptr self) -> float"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pss_symbol_selector_cvc_sptr self) -> float"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pss_symbol_selector_cvc_sptr self) -> float"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pss_symbol_selector_cvc_sptr self) -> float"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pss_symbol_selector_cvc_sptr self) -> float"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pss_symbol_selector_cvc_sptr self, int which) -> float
        pc_input_buffers_full(pss_symbol_selector_cvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pss_symbol_selector_cvc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pss_symbol_selector_cvc_sptr self, int which) -> float
        pc_input_buffers_full_avg(pss_symbol_selector_cvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pss_symbol_selector_cvc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pss_symbol_selector_cvc_sptr self, int which) -> float
        pc_input_buffers_full_var(pss_symbol_selector_cvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pss_symbol_selector_cvc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pss_symbol_selector_cvc_sptr self, int which) -> float
        pc_output_buffers_full(pss_symbol_selector_cvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pss_symbol_selector_cvc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pss_symbol_selector_cvc_sptr self, int which) -> float
        pc_output_buffers_full_avg(pss_symbol_selector_cvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pss_symbol_selector_cvc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pss_symbol_selector_cvc_sptr self, int which) -> float
        pc_output_buffers_full_var(pss_symbol_selector_cvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pss_symbol_selector_cvc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pss_symbol_selector_cvc_sptr self) -> float"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pss_symbol_selector_cvc_sptr self) -> float"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pss_symbol_selector_cvc_sptr self) -> float"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pss_symbol_selector_cvc_sptr self) -> float"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pss_symbol_selector_cvc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pss_symbol_selector_cvc_sptr self)"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pss_symbol_selector_cvc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pss_symbol_selector_cvc_sptr self) -> int"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pss_symbol_selector_cvc_sptr self) -> int"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pss_symbol_selector_cvc_sptr self, int priority) -> int"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pss_symbol_selector_cvc_sptr self) -> std::string"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pss_symbol_selector_cvc_sptr self) -> std::string"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pss_symbol_selector_cvc_sptr self) -> io_signature_sptr"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pss_symbol_selector_cvc_sptr self) -> io_signature_sptr"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pss_symbol_selector_cvc_sptr self) -> long"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pss_symbol_selector_cvc_sptr self) -> basic_block_sptr"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pss_symbol_selector_cvc_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pss_symbol_selector_cvc_sptr self) -> std::string"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pss_symbol_selector_cvc_sptr self, std::string name)"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pss_symbol_selector_cvc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.pss_symbol_selector_cvc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pss_symbol_selector_cvc_sptr self) -> swig_int_ptr"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pss_symbol_selector_cvc_sptr self) -> swig_int_ptr"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pss_symbol_selector_cvc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.pss_symbol_selector_cvc_sptr_message_subscribers(self, *args, **kwargs)

pss_symbol_selector_cvc_sptr_swigregister = _lte_swig.pss_symbol_selector_cvc_sptr_swigregister
pss_symbol_selector_cvc_sptr_swigregister(pss_symbol_selector_cvc_sptr)

pss_symbol_selector_cvc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pss_symbol_selector_cvc = pss_symbol_selector_cvc.make;

class pss_calculator_vcm(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int fftl, std::string name="pss_calculator_vcm") -> pss_calculator_vcm_sptr

        Return a shared_ptr to a new instance of lte::pss_calculator_vcm.

        To avoid accidental use of raw pointers, lte::pss_calculator_vcm's constructor is in a private implementation class. lte::pss_calculator_vcm::make is the public interface for creating new instances.

        Params: (fftl, name)
        """
        return _lte_swig.pss_calculator_vcm_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_pss_calculator_vcm
    __del__ = lambda self : None;
pss_calculator_vcm_swigregister = _lte_swig.pss_calculator_vcm_swigregister
pss_calculator_vcm_swigregister(pss_calculator_vcm)

def pss_calculator_vcm_make(*args, **kwargs):
  """
    pss_calculator_vcm_make(int fftl, std::string name="pss_calculator_vcm") -> pss_calculator_vcm_sptr

    Return a shared_ptr to a new instance of lte::pss_calculator_vcm.

    To avoid accidental use of raw pointers, lte::pss_calculator_vcm's constructor is in a private implementation class. lte::pss_calculator_vcm::make is the public interface for creating new instances.

    Params: (fftl, name)
    """
  return _lte_swig.pss_calculator_vcm_make(*args, **kwargs)

class pss_calculator_vcm_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::pss_calculator_vcm)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::pss_calculator_vcm)> self) -> pss_calculator_vcm_sptr
        __init__(boost::shared_ptr<(gr::lte::pss_calculator_vcm)> self, pss_calculator_vcm p) -> pss_calculator_vcm_sptr
        """
        this = _lte_swig.new_pss_calculator_vcm_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pss_calculator_vcm_sptr self) -> pss_calculator_vcm"""
        return _lte_swig.pss_calculator_vcm_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_pss_calculator_vcm_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pss_calculator_vcm_sptr self, int fftl, std::string name="pss_calculator_vcm") -> pss_calculator_vcm_sptr

        Return a shared_ptr to a new instance of lte::pss_calculator_vcm.

        To avoid accidental use of raw pointers, lte::pss_calculator_vcm's constructor is in a private implementation class. lte::pss_calculator_vcm::make is the public interface for creating new instances.

        Params: (fftl, name)
        """
        return _lte_swig.pss_calculator_vcm_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(pss_calculator_vcm_sptr self) -> unsigned int"""
        return _lte_swig.pss_calculator_vcm_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pss_calculator_vcm_sptr self, int which, int delay)
        declare_sample_delay(pss_calculator_vcm_sptr self, unsigned int delay)
        """
        return _lte_swig.pss_calculator_vcm_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pss_calculator_vcm_sptr self, int which) -> unsigned int"""
        return _lte_swig.pss_calculator_vcm_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pss_calculator_vcm_sptr self) -> int"""
        return _lte_swig.pss_calculator_vcm_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pss_calculator_vcm_sptr self) -> double"""
        return _lte_swig.pss_calculator_vcm_sptr_relative_rate(self)

    def start(self):
        """start(pss_calculator_vcm_sptr self) -> bool"""
        return _lte_swig.pss_calculator_vcm_sptr_start(self)

    def stop(self):
        """stop(pss_calculator_vcm_sptr self) -> bool"""
        return _lte_swig.pss_calculator_vcm_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pss_calculator_vcm_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.pss_calculator_vcm_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pss_calculator_vcm_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.pss_calculator_vcm_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pss_calculator_vcm_sptr self) -> int"""
        return _lte_swig.pss_calculator_vcm_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pss_calculator_vcm_sptr self, int m)"""
        return _lte_swig.pss_calculator_vcm_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pss_calculator_vcm_sptr self)"""
        return _lte_swig.pss_calculator_vcm_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pss_calculator_vcm_sptr self) -> bool"""
        return _lte_swig.pss_calculator_vcm_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pss_calculator_vcm_sptr self, int m)"""
        return _lte_swig.pss_calculator_vcm_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pss_calculator_vcm_sptr self) -> int"""
        return _lte_swig.pss_calculator_vcm_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pss_calculator_vcm_sptr self, int i) -> long"""
        return _lte_swig.pss_calculator_vcm_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pss_calculator_vcm_sptr self, long max_output_buffer)
        set_max_output_buffer(pss_calculator_vcm_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.pss_calculator_vcm_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pss_calculator_vcm_sptr self, int i) -> long"""
        return _lte_swig.pss_calculator_vcm_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pss_calculator_vcm_sptr self, long min_output_buffer)
        set_min_output_buffer(pss_calculator_vcm_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.pss_calculator_vcm_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pss_calculator_vcm_sptr self) -> float"""
        return _lte_swig.pss_calculator_vcm_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pss_calculator_vcm_sptr self) -> float"""
        return _lte_swig.pss_calculator_vcm_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pss_calculator_vcm_sptr self) -> float"""
        return _lte_swig.pss_calculator_vcm_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pss_calculator_vcm_sptr self) -> float"""
        return _lte_swig.pss_calculator_vcm_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pss_calculator_vcm_sptr self) -> float"""
        return _lte_swig.pss_calculator_vcm_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pss_calculator_vcm_sptr self) -> float"""
        return _lte_swig.pss_calculator_vcm_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pss_calculator_vcm_sptr self, int which) -> float
        pc_input_buffers_full(pss_calculator_vcm_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pss_calculator_vcm_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pss_calculator_vcm_sptr self, int which) -> float
        pc_input_buffers_full_avg(pss_calculator_vcm_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pss_calculator_vcm_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pss_calculator_vcm_sptr self, int which) -> float
        pc_input_buffers_full_var(pss_calculator_vcm_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pss_calculator_vcm_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pss_calculator_vcm_sptr self, int which) -> float
        pc_output_buffers_full(pss_calculator_vcm_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pss_calculator_vcm_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pss_calculator_vcm_sptr self, int which) -> float
        pc_output_buffers_full_avg(pss_calculator_vcm_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pss_calculator_vcm_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pss_calculator_vcm_sptr self, int which) -> float
        pc_output_buffers_full_var(pss_calculator_vcm_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pss_calculator_vcm_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pss_calculator_vcm_sptr self) -> float"""
        return _lte_swig.pss_calculator_vcm_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pss_calculator_vcm_sptr self) -> float"""
        return _lte_swig.pss_calculator_vcm_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pss_calculator_vcm_sptr self) -> float"""
        return _lte_swig.pss_calculator_vcm_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pss_calculator_vcm_sptr self) -> float"""
        return _lte_swig.pss_calculator_vcm_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pss_calculator_vcm_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.pss_calculator_vcm_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pss_calculator_vcm_sptr self)"""
        return _lte_swig.pss_calculator_vcm_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pss_calculator_vcm_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.pss_calculator_vcm_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pss_calculator_vcm_sptr self) -> int"""
        return _lte_swig.pss_calculator_vcm_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pss_calculator_vcm_sptr self) -> int"""
        return _lte_swig.pss_calculator_vcm_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pss_calculator_vcm_sptr self, int priority) -> int"""
        return _lte_swig.pss_calculator_vcm_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pss_calculator_vcm_sptr self) -> std::string"""
        return _lte_swig.pss_calculator_vcm_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pss_calculator_vcm_sptr self) -> std::string"""
        return _lte_swig.pss_calculator_vcm_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pss_calculator_vcm_sptr self) -> io_signature_sptr"""
        return _lte_swig.pss_calculator_vcm_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pss_calculator_vcm_sptr self) -> io_signature_sptr"""
        return _lte_swig.pss_calculator_vcm_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pss_calculator_vcm_sptr self) -> long"""
        return _lte_swig.pss_calculator_vcm_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pss_calculator_vcm_sptr self) -> basic_block_sptr"""
        return _lte_swig.pss_calculator_vcm_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pss_calculator_vcm_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.pss_calculator_vcm_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pss_calculator_vcm_sptr self) -> std::string"""
        return _lte_swig.pss_calculator_vcm_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pss_calculator_vcm_sptr self, std::string name)"""
        return _lte_swig.pss_calculator_vcm_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pss_calculator_vcm_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.pss_calculator_vcm_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pss_calculator_vcm_sptr self) -> swig_int_ptr"""
        return _lte_swig.pss_calculator_vcm_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pss_calculator_vcm_sptr self) -> swig_int_ptr"""
        return _lte_swig.pss_calculator_vcm_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pss_calculator_vcm_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.pss_calculator_vcm_sptr_message_subscribers(self, *args, **kwargs)

pss_calculator_vcm_sptr_swigregister = _lte_swig.pss_calculator_vcm_sptr_swigregister
pss_calculator_vcm_sptr_swigregister(pss_calculator_vcm_sptr)

pss_calculator_vcm_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pss_calculator_vcm = pss_calculator_vcm.make;

class pss_tagger_cc(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int fftl, std::string name="pss_tagger_cc") -> pss_tagger_cc_sptr

        Return a shared_ptr to a new instance of lte::pss_tagger_cc.

        To avoid accidental use of raw pointers, lte::pss_tagger_cc's constructor is in a private implementation class. lte::pss_tagger_cc::make is the public interface for creating new instances.

        Params: (fftl, name)
        """
        return _lte_swig.pss_tagger_cc_make(*args, **kwargs)

    make = staticmethod(make)
    def set_half_frame_start(self, *args, **kwargs):
        """
        set_half_frame_start(pss_tagger_cc self, int start)

        Params: (start)
        """
        return _lte_swig.pss_tagger_cc_set_half_frame_start(self, *args, **kwargs)

    def set_N_id_2(self, *args, **kwargs):
        """
        set_N_id_2(pss_tagger_cc self, int nid2)

        Params: (nid2)
        """
        return _lte_swig.pss_tagger_cc_set_N_id_2(self, *args, **kwargs)

    def lock(self):
        """
        lock(pss_tagger_cc self)

        Params: (NONE)
        """
        return _lte_swig.pss_tagger_cc_lock(self)

    def unlock(self):
        """
        unlock(pss_tagger_cc self)

        Params: (NONE)
        """
        return _lte_swig.pss_tagger_cc_unlock(self)

    __swig_destroy__ = _lte_swig.delete_pss_tagger_cc
    __del__ = lambda self : None;
pss_tagger_cc_swigregister = _lte_swig.pss_tagger_cc_swigregister
pss_tagger_cc_swigregister(pss_tagger_cc)

def pss_tagger_cc_make(*args, **kwargs):
  """
    pss_tagger_cc_make(int fftl, std::string name="pss_tagger_cc") -> pss_tagger_cc_sptr

    Return a shared_ptr to a new instance of lte::pss_tagger_cc.

    To avoid accidental use of raw pointers, lte::pss_tagger_cc's constructor is in a private implementation class. lte::pss_tagger_cc::make is the public interface for creating new instances.

    Params: (fftl, name)
    """
  return _lte_swig.pss_tagger_cc_make(*args, **kwargs)

class pss_tagger_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::pss_tagger_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::pss_tagger_cc)> self) -> pss_tagger_cc_sptr
        __init__(boost::shared_ptr<(gr::lte::pss_tagger_cc)> self, pss_tagger_cc p) -> pss_tagger_cc_sptr
        """
        this = _lte_swig.new_pss_tagger_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pss_tagger_cc_sptr self) -> pss_tagger_cc"""
        return _lte_swig.pss_tagger_cc_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_pss_tagger_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pss_tagger_cc_sptr self, int fftl, std::string name="pss_tagger_cc") -> pss_tagger_cc_sptr

        Return a shared_ptr to a new instance of lte::pss_tagger_cc.

        To avoid accidental use of raw pointers, lte::pss_tagger_cc's constructor is in a private implementation class. lte::pss_tagger_cc::make is the public interface for creating new instances.

        Params: (fftl, name)
        """
        return _lte_swig.pss_tagger_cc_sptr_make(self, *args, **kwargs)

    def set_half_frame_start(self, *args, **kwargs):
        """
        set_half_frame_start(pss_tagger_cc_sptr self, int start)

        Params: (start)
        """
        return _lte_swig.pss_tagger_cc_sptr_set_half_frame_start(self, *args, **kwargs)

    def set_N_id_2(self, *args, **kwargs):
        """
        set_N_id_2(pss_tagger_cc_sptr self, int nid2)

        Params: (nid2)
        """
        return _lte_swig.pss_tagger_cc_sptr_set_N_id_2(self, *args, **kwargs)

    def lock(self):
        """
        lock(pss_tagger_cc_sptr self)

        Params: (NONE)
        """
        return _lte_swig.pss_tagger_cc_sptr_lock(self)

    def unlock(self):
        """
        unlock(pss_tagger_cc_sptr self)

        Params: (NONE)
        """
        return _lte_swig.pss_tagger_cc_sptr_unlock(self)

    def history(self):
        """history(pss_tagger_cc_sptr self) -> unsigned int"""
        return _lte_swig.pss_tagger_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pss_tagger_cc_sptr self, int which, int delay)
        declare_sample_delay(pss_tagger_cc_sptr self, unsigned int delay)
        """
        return _lte_swig.pss_tagger_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pss_tagger_cc_sptr self, int which) -> unsigned int"""
        return _lte_swig.pss_tagger_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pss_tagger_cc_sptr self) -> int"""
        return _lte_swig.pss_tagger_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pss_tagger_cc_sptr self) -> double"""
        return _lte_swig.pss_tagger_cc_sptr_relative_rate(self)

    def start(self):
        """start(pss_tagger_cc_sptr self) -> bool"""
        return _lte_swig.pss_tagger_cc_sptr_start(self)

    def stop(self):
        """stop(pss_tagger_cc_sptr self) -> bool"""
        return _lte_swig.pss_tagger_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pss_tagger_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.pss_tagger_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pss_tagger_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.pss_tagger_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pss_tagger_cc_sptr self) -> int"""
        return _lte_swig.pss_tagger_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pss_tagger_cc_sptr self, int m)"""
        return _lte_swig.pss_tagger_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pss_tagger_cc_sptr self)"""
        return _lte_swig.pss_tagger_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pss_tagger_cc_sptr self) -> bool"""
        return _lte_swig.pss_tagger_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pss_tagger_cc_sptr self, int m)"""
        return _lte_swig.pss_tagger_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pss_tagger_cc_sptr self) -> int"""
        return _lte_swig.pss_tagger_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pss_tagger_cc_sptr self, int i) -> long"""
        return _lte_swig.pss_tagger_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pss_tagger_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(pss_tagger_cc_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.pss_tagger_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pss_tagger_cc_sptr self, int i) -> long"""
        return _lte_swig.pss_tagger_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pss_tagger_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(pss_tagger_cc_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.pss_tagger_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pss_tagger_cc_sptr self) -> float"""
        return _lte_swig.pss_tagger_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pss_tagger_cc_sptr self) -> float"""
        return _lte_swig.pss_tagger_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pss_tagger_cc_sptr self) -> float"""
        return _lte_swig.pss_tagger_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pss_tagger_cc_sptr self) -> float"""
        return _lte_swig.pss_tagger_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pss_tagger_cc_sptr self) -> float"""
        return _lte_swig.pss_tagger_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pss_tagger_cc_sptr self) -> float"""
        return _lte_swig.pss_tagger_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pss_tagger_cc_sptr self, int which) -> float
        pc_input_buffers_full(pss_tagger_cc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pss_tagger_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pss_tagger_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(pss_tagger_cc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pss_tagger_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pss_tagger_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(pss_tagger_cc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pss_tagger_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pss_tagger_cc_sptr self, int which) -> float
        pc_output_buffers_full(pss_tagger_cc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pss_tagger_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pss_tagger_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(pss_tagger_cc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pss_tagger_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pss_tagger_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(pss_tagger_cc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pss_tagger_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pss_tagger_cc_sptr self) -> float"""
        return _lte_swig.pss_tagger_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pss_tagger_cc_sptr self) -> float"""
        return _lte_swig.pss_tagger_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pss_tagger_cc_sptr self) -> float"""
        return _lte_swig.pss_tagger_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pss_tagger_cc_sptr self) -> float"""
        return _lte_swig.pss_tagger_cc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pss_tagger_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.pss_tagger_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pss_tagger_cc_sptr self)"""
        return _lte_swig.pss_tagger_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pss_tagger_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.pss_tagger_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pss_tagger_cc_sptr self) -> int"""
        return _lte_swig.pss_tagger_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pss_tagger_cc_sptr self) -> int"""
        return _lte_swig.pss_tagger_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pss_tagger_cc_sptr self, int priority) -> int"""
        return _lte_swig.pss_tagger_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pss_tagger_cc_sptr self) -> std::string"""
        return _lte_swig.pss_tagger_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pss_tagger_cc_sptr self) -> std::string"""
        return _lte_swig.pss_tagger_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pss_tagger_cc_sptr self) -> io_signature_sptr"""
        return _lte_swig.pss_tagger_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pss_tagger_cc_sptr self) -> io_signature_sptr"""
        return _lte_swig.pss_tagger_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pss_tagger_cc_sptr self) -> long"""
        return _lte_swig.pss_tagger_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pss_tagger_cc_sptr self) -> basic_block_sptr"""
        return _lte_swig.pss_tagger_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pss_tagger_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.pss_tagger_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pss_tagger_cc_sptr self) -> std::string"""
        return _lte_swig.pss_tagger_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pss_tagger_cc_sptr self, std::string name)"""
        return _lte_swig.pss_tagger_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pss_tagger_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.pss_tagger_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pss_tagger_cc_sptr self) -> swig_int_ptr"""
        return _lte_swig.pss_tagger_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pss_tagger_cc_sptr self) -> swig_int_ptr"""
        return _lte_swig.pss_tagger_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pss_tagger_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.pss_tagger_cc_sptr_message_subscribers(self, *args, **kwargs)

pss_tagger_cc_sptr_swigregister = _lte_swig.pss_tagger_cc_sptr_swigregister
pss_tagger_cc_sptr_swigregister(pss_tagger_cc_sptr)

pss_tagger_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pss_tagger_cc = pss_tagger_cc.make;

class correlator(object):
    """This is a helper class to provide Fast Correlation using FFTW3f."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """
        __init__(gr::lte::correlator self, gr_complex * in1, gr_complex * in2, gr_complex * out, int len) -> correlator

        Params: (in1, in2, out, len)
        """
        this = _lte_swig.new_correlator(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lte_swig.delete_correlator
    __del__ = lambda self : None;
    def execute(self):
        """
        execute(correlator self)

        Params: (NONE)
        """
        return _lte_swig.correlator_execute(self)

    def get_maximum(self, *args, **kwargs):
        """
        get_maximum(correlator self, int & pos, float & max)

        Params: (pos, max)
        """
        return _lte_swig.correlator_get_maximum(self, *args, **kwargs)

correlator_swigregister = _lte_swig.correlator_swigregister
correlator_swigregister(correlator)

class sss_symbol_selector_cvc(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int fftl, std::string name="sss_symbol_selector_cvc") -> sss_symbol_selector_cvc_sptr

        Return a shared_ptr to a new instance of lte::sss_symbol_selector_cvc.

        To avoid accidental use of raw pointers, lte::sss_symbol_selector_cvc's constructor is in a private implementation class. lte::sss_symbol_selector_cvc::make is the public interface for creating new instances.

        Params: (fftl, name)
        """
        return _lte_swig.sss_symbol_selector_cvc_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_sss_symbol_selector_cvc
    __del__ = lambda self : None;
sss_symbol_selector_cvc_swigregister = _lte_swig.sss_symbol_selector_cvc_swigregister
sss_symbol_selector_cvc_swigregister(sss_symbol_selector_cvc)

def sss_symbol_selector_cvc_make(*args, **kwargs):
  """
    sss_symbol_selector_cvc_make(int fftl, std::string name="sss_symbol_selector_cvc") -> sss_symbol_selector_cvc_sptr

    Return a shared_ptr to a new instance of lte::sss_symbol_selector_cvc.

    To avoid accidental use of raw pointers, lte::sss_symbol_selector_cvc's constructor is in a private implementation class. lte::sss_symbol_selector_cvc::make is the public interface for creating new instances.

    Params: (fftl, name)
    """
  return _lte_swig.sss_symbol_selector_cvc_make(*args, **kwargs)

class sss_symbol_selector_cvc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::sss_symbol_selector_cvc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::sss_symbol_selector_cvc)> self) -> sss_symbol_selector_cvc_sptr
        __init__(boost::shared_ptr<(gr::lte::sss_symbol_selector_cvc)> self, sss_symbol_selector_cvc p) -> sss_symbol_selector_cvc_sptr
        """
        this = _lte_swig.new_sss_symbol_selector_cvc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sss_symbol_selector_cvc_sptr self) -> sss_symbol_selector_cvc"""
        return _lte_swig.sss_symbol_selector_cvc_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_sss_symbol_selector_cvc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(sss_symbol_selector_cvc_sptr self, int fftl, std::string name="sss_symbol_selector_cvc") -> sss_symbol_selector_cvc_sptr

        Return a shared_ptr to a new instance of lte::sss_symbol_selector_cvc.

        To avoid accidental use of raw pointers, lte::sss_symbol_selector_cvc's constructor is in a private implementation class. lte::sss_symbol_selector_cvc::make is the public interface for creating new instances.

        Params: (fftl, name)
        """
        return _lte_swig.sss_symbol_selector_cvc_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(sss_symbol_selector_cvc_sptr self) -> unsigned int"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sss_symbol_selector_cvc_sptr self, int which, int delay)
        declare_sample_delay(sss_symbol_selector_cvc_sptr self, unsigned int delay)
        """
        return _lte_swig.sss_symbol_selector_cvc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sss_symbol_selector_cvc_sptr self, int which) -> unsigned int"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sss_symbol_selector_cvc_sptr self) -> int"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sss_symbol_selector_cvc_sptr self) -> double"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_relative_rate(self)

    def start(self):
        """start(sss_symbol_selector_cvc_sptr self) -> bool"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_start(self)

    def stop(self):
        """stop(sss_symbol_selector_cvc_sptr self) -> bool"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sss_symbol_selector_cvc_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sss_symbol_selector_cvc_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sss_symbol_selector_cvc_sptr self) -> int"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sss_symbol_selector_cvc_sptr self, int m)"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sss_symbol_selector_cvc_sptr self)"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sss_symbol_selector_cvc_sptr self) -> bool"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sss_symbol_selector_cvc_sptr self, int m)"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sss_symbol_selector_cvc_sptr self) -> int"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sss_symbol_selector_cvc_sptr self, int i) -> long"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sss_symbol_selector_cvc_sptr self, long max_output_buffer)
        set_max_output_buffer(sss_symbol_selector_cvc_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.sss_symbol_selector_cvc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sss_symbol_selector_cvc_sptr self, int i) -> long"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sss_symbol_selector_cvc_sptr self, long min_output_buffer)
        set_min_output_buffer(sss_symbol_selector_cvc_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.sss_symbol_selector_cvc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sss_symbol_selector_cvc_sptr self) -> float"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sss_symbol_selector_cvc_sptr self) -> float"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sss_symbol_selector_cvc_sptr self) -> float"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sss_symbol_selector_cvc_sptr self) -> float"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sss_symbol_selector_cvc_sptr self) -> float"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sss_symbol_selector_cvc_sptr self) -> float"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sss_symbol_selector_cvc_sptr self, int which) -> float
        pc_input_buffers_full(sss_symbol_selector_cvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.sss_symbol_selector_cvc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sss_symbol_selector_cvc_sptr self, int which) -> float
        pc_input_buffers_full_avg(sss_symbol_selector_cvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.sss_symbol_selector_cvc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sss_symbol_selector_cvc_sptr self, int which) -> float
        pc_input_buffers_full_var(sss_symbol_selector_cvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.sss_symbol_selector_cvc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sss_symbol_selector_cvc_sptr self, int which) -> float
        pc_output_buffers_full(sss_symbol_selector_cvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.sss_symbol_selector_cvc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sss_symbol_selector_cvc_sptr self, int which) -> float
        pc_output_buffers_full_avg(sss_symbol_selector_cvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.sss_symbol_selector_cvc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sss_symbol_selector_cvc_sptr self, int which) -> float
        pc_output_buffers_full_var(sss_symbol_selector_cvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.sss_symbol_selector_cvc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sss_symbol_selector_cvc_sptr self) -> float"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sss_symbol_selector_cvc_sptr self) -> float"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sss_symbol_selector_cvc_sptr self) -> float"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sss_symbol_selector_cvc_sptr self) -> float"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sss_symbol_selector_cvc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sss_symbol_selector_cvc_sptr self)"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sss_symbol_selector_cvc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sss_symbol_selector_cvc_sptr self) -> int"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sss_symbol_selector_cvc_sptr self) -> int"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sss_symbol_selector_cvc_sptr self, int priority) -> int"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sss_symbol_selector_cvc_sptr self) -> std::string"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sss_symbol_selector_cvc_sptr self) -> std::string"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sss_symbol_selector_cvc_sptr self) -> io_signature_sptr"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sss_symbol_selector_cvc_sptr self) -> io_signature_sptr"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sss_symbol_selector_cvc_sptr self) -> long"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sss_symbol_selector_cvc_sptr self) -> basic_block_sptr"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sss_symbol_selector_cvc_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sss_symbol_selector_cvc_sptr self) -> std::string"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sss_symbol_selector_cvc_sptr self, std::string name)"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sss_symbol_selector_cvc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.sss_symbol_selector_cvc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sss_symbol_selector_cvc_sptr self) -> swig_int_ptr"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sss_symbol_selector_cvc_sptr self) -> swig_int_ptr"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sss_symbol_selector_cvc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.sss_symbol_selector_cvc_sptr_message_subscribers(self, *args, **kwargs)

sss_symbol_selector_cvc_sptr_swigregister = _lte_swig.sss_symbol_selector_cvc_sptr_swigregister
sss_symbol_selector_cvc_sptr_swigregister(sss_symbol_selector_cvc_sptr)

sss_symbol_selector_cvc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sss_symbol_selector_cvc = sss_symbol_selector_cvc.make;

class sss_tagger_cc(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int fftl, std::string name="sss_tagger_cc") -> sss_tagger_cc_sptr

        Return a shared_ptr to a new instance of lte::sss_tagger_cc.

        To avoid accidental use of raw pointers, lte::sss_tagger_cc's constructor is in a private implementation class. lte::sss_tagger_cc::make is the public interface for creating new instances.

        Params: (fftl, name)
        """
        return _lte_swig.sss_tagger_cc_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_sss_tagger_cc
    __del__ = lambda self : None;
sss_tagger_cc_swigregister = _lte_swig.sss_tagger_cc_swigregister
sss_tagger_cc_swigregister(sss_tagger_cc)

def sss_tagger_cc_make(*args, **kwargs):
  """
    sss_tagger_cc_make(int fftl, std::string name="sss_tagger_cc") -> sss_tagger_cc_sptr

    Return a shared_ptr to a new instance of lte::sss_tagger_cc.

    To avoid accidental use of raw pointers, lte::sss_tagger_cc's constructor is in a private implementation class. lte::sss_tagger_cc::make is the public interface for creating new instances.

    Params: (fftl, name)
    """
  return _lte_swig.sss_tagger_cc_make(*args, **kwargs)

class sss_tagger_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::sss_tagger_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::sss_tagger_cc)> self) -> sss_tagger_cc_sptr
        __init__(boost::shared_ptr<(gr::lte::sss_tagger_cc)> self, sss_tagger_cc p) -> sss_tagger_cc_sptr
        """
        this = _lte_swig.new_sss_tagger_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sss_tagger_cc_sptr self) -> sss_tagger_cc"""
        return _lte_swig.sss_tagger_cc_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_sss_tagger_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(sss_tagger_cc_sptr self, int fftl, std::string name="sss_tagger_cc") -> sss_tagger_cc_sptr

        Return a shared_ptr to a new instance of lte::sss_tagger_cc.

        To avoid accidental use of raw pointers, lte::sss_tagger_cc's constructor is in a private implementation class. lte::sss_tagger_cc::make is the public interface for creating new instances.

        Params: (fftl, name)
        """
        return _lte_swig.sss_tagger_cc_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(sss_tagger_cc_sptr self) -> unsigned int"""
        return _lte_swig.sss_tagger_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sss_tagger_cc_sptr self, int which, int delay)
        declare_sample_delay(sss_tagger_cc_sptr self, unsigned int delay)
        """
        return _lte_swig.sss_tagger_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sss_tagger_cc_sptr self, int which) -> unsigned int"""
        return _lte_swig.sss_tagger_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sss_tagger_cc_sptr self) -> int"""
        return _lte_swig.sss_tagger_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sss_tagger_cc_sptr self) -> double"""
        return _lte_swig.sss_tagger_cc_sptr_relative_rate(self)

    def start(self):
        """start(sss_tagger_cc_sptr self) -> bool"""
        return _lte_swig.sss_tagger_cc_sptr_start(self)

    def stop(self):
        """stop(sss_tagger_cc_sptr self) -> bool"""
        return _lte_swig.sss_tagger_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sss_tagger_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.sss_tagger_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sss_tagger_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.sss_tagger_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sss_tagger_cc_sptr self) -> int"""
        return _lte_swig.sss_tagger_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sss_tagger_cc_sptr self, int m)"""
        return _lte_swig.sss_tagger_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sss_tagger_cc_sptr self)"""
        return _lte_swig.sss_tagger_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sss_tagger_cc_sptr self) -> bool"""
        return _lte_swig.sss_tagger_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sss_tagger_cc_sptr self, int m)"""
        return _lte_swig.sss_tagger_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sss_tagger_cc_sptr self) -> int"""
        return _lte_swig.sss_tagger_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sss_tagger_cc_sptr self, int i) -> long"""
        return _lte_swig.sss_tagger_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sss_tagger_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(sss_tagger_cc_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.sss_tagger_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sss_tagger_cc_sptr self, int i) -> long"""
        return _lte_swig.sss_tagger_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sss_tagger_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(sss_tagger_cc_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.sss_tagger_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sss_tagger_cc_sptr self) -> float"""
        return _lte_swig.sss_tagger_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sss_tagger_cc_sptr self) -> float"""
        return _lte_swig.sss_tagger_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sss_tagger_cc_sptr self) -> float"""
        return _lte_swig.sss_tagger_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sss_tagger_cc_sptr self) -> float"""
        return _lte_swig.sss_tagger_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sss_tagger_cc_sptr self) -> float"""
        return _lte_swig.sss_tagger_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sss_tagger_cc_sptr self) -> float"""
        return _lte_swig.sss_tagger_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sss_tagger_cc_sptr self, int which) -> float
        pc_input_buffers_full(sss_tagger_cc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.sss_tagger_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sss_tagger_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(sss_tagger_cc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.sss_tagger_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sss_tagger_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(sss_tagger_cc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.sss_tagger_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sss_tagger_cc_sptr self, int which) -> float
        pc_output_buffers_full(sss_tagger_cc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.sss_tagger_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sss_tagger_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(sss_tagger_cc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.sss_tagger_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sss_tagger_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(sss_tagger_cc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.sss_tagger_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sss_tagger_cc_sptr self) -> float"""
        return _lte_swig.sss_tagger_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sss_tagger_cc_sptr self) -> float"""
        return _lte_swig.sss_tagger_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sss_tagger_cc_sptr self) -> float"""
        return _lte_swig.sss_tagger_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sss_tagger_cc_sptr self) -> float"""
        return _lte_swig.sss_tagger_cc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sss_tagger_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.sss_tagger_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sss_tagger_cc_sptr self)"""
        return _lte_swig.sss_tagger_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sss_tagger_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.sss_tagger_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sss_tagger_cc_sptr self) -> int"""
        return _lte_swig.sss_tagger_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sss_tagger_cc_sptr self) -> int"""
        return _lte_swig.sss_tagger_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sss_tagger_cc_sptr self, int priority) -> int"""
        return _lte_swig.sss_tagger_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sss_tagger_cc_sptr self) -> std::string"""
        return _lte_swig.sss_tagger_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sss_tagger_cc_sptr self) -> std::string"""
        return _lte_swig.sss_tagger_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sss_tagger_cc_sptr self) -> io_signature_sptr"""
        return _lte_swig.sss_tagger_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sss_tagger_cc_sptr self) -> io_signature_sptr"""
        return _lte_swig.sss_tagger_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sss_tagger_cc_sptr self) -> long"""
        return _lte_swig.sss_tagger_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sss_tagger_cc_sptr self) -> basic_block_sptr"""
        return _lte_swig.sss_tagger_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sss_tagger_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.sss_tagger_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sss_tagger_cc_sptr self) -> std::string"""
        return _lte_swig.sss_tagger_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sss_tagger_cc_sptr self, std::string name)"""
        return _lte_swig.sss_tagger_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sss_tagger_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.sss_tagger_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sss_tagger_cc_sptr self) -> swig_int_ptr"""
        return _lte_swig.sss_tagger_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sss_tagger_cc_sptr self) -> swig_int_ptr"""
        return _lte_swig.sss_tagger_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sss_tagger_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.sss_tagger_cc_sptr_message_subscribers(self, *args, **kwargs)

sss_tagger_cc_sptr_swigregister = _lte_swig.sss_tagger_cc_sptr_swigregister
sss_tagger_cc_sptr_swigregister(sss_tagger_cc_sptr)

sss_tagger_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sss_tagger_cc = sss_tagger_cc.make;

class sync_frequency_c(object):
    """
    Calculate fractional frequency offset

    This block calculates FFO by correlating CPs and sets the frequency of a signal source block.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(boost::shared_ptr< gr::analog::sig_source_c > & sig, int fftl, std::string name="sync_frequency_c") -> sync_frequency_c_sptr

        Return a shared_ptr to a new instance of lte::sync_frequency_c.

        To avoid accidental use of raw pointers, lte::sync_frequency_c's constructor is in a private implementation class. lte::sync_frequency_c::make is the public interface for creating new instances.

        Params: (sig, fftl, name)
        """
        return _lte_swig.sync_frequency_c_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_sync_frequency_c
    __del__ = lambda self : None;
sync_frequency_c_swigregister = _lte_swig.sync_frequency_c_swigregister
sync_frequency_c_swigregister(sync_frequency_c)

def sync_frequency_c_make(*args, **kwargs):
  """
    sync_frequency_c_make(boost::shared_ptr< gr::analog::sig_source_c > & sig, int fftl, std::string name="sync_frequency_c") -> sync_frequency_c_sptr

    Return a shared_ptr to a new instance of lte::sync_frequency_c.

    To avoid accidental use of raw pointers, lte::sync_frequency_c's constructor is in a private implementation class. lte::sync_frequency_c::make is the public interface for creating new instances.

    Params: (sig, fftl, name)
    """
  return _lte_swig.sync_frequency_c_make(*args, **kwargs)

class sync_frequency_c_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::sync_frequency_c)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::sync_frequency_c)> self) -> sync_frequency_c_sptr
        __init__(boost::shared_ptr<(gr::lte::sync_frequency_c)> self, sync_frequency_c p) -> sync_frequency_c_sptr
        """
        this = _lte_swig.new_sync_frequency_c_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sync_frequency_c_sptr self) -> sync_frequency_c"""
        return _lte_swig.sync_frequency_c_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_sync_frequency_c_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(sync_frequency_c_sptr self, boost::shared_ptr< gr::analog::sig_source_c > & sig, int fftl, std::string name="sync_frequency_c") -> sync_frequency_c_sptr

        Return a shared_ptr to a new instance of lte::sync_frequency_c.

        To avoid accidental use of raw pointers, lte::sync_frequency_c's constructor is in a private implementation class. lte::sync_frequency_c::make is the public interface for creating new instances.

        Params: (sig, fftl, name)
        """
        return _lte_swig.sync_frequency_c_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(sync_frequency_c_sptr self) -> unsigned int"""
        return _lte_swig.sync_frequency_c_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sync_frequency_c_sptr self, int which, int delay)
        declare_sample_delay(sync_frequency_c_sptr self, unsigned int delay)
        """
        return _lte_swig.sync_frequency_c_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sync_frequency_c_sptr self, int which) -> unsigned int"""
        return _lte_swig.sync_frequency_c_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sync_frequency_c_sptr self) -> int"""
        return _lte_swig.sync_frequency_c_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sync_frequency_c_sptr self) -> double"""
        return _lte_swig.sync_frequency_c_sptr_relative_rate(self)

    def start(self):
        """start(sync_frequency_c_sptr self) -> bool"""
        return _lte_swig.sync_frequency_c_sptr_start(self)

    def stop(self):
        """stop(sync_frequency_c_sptr self) -> bool"""
        return _lte_swig.sync_frequency_c_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sync_frequency_c_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.sync_frequency_c_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sync_frequency_c_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.sync_frequency_c_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sync_frequency_c_sptr self) -> int"""
        return _lte_swig.sync_frequency_c_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sync_frequency_c_sptr self, int m)"""
        return _lte_swig.sync_frequency_c_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sync_frequency_c_sptr self)"""
        return _lte_swig.sync_frequency_c_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sync_frequency_c_sptr self) -> bool"""
        return _lte_swig.sync_frequency_c_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sync_frequency_c_sptr self, int m)"""
        return _lte_swig.sync_frequency_c_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sync_frequency_c_sptr self) -> int"""
        return _lte_swig.sync_frequency_c_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sync_frequency_c_sptr self, int i) -> long"""
        return _lte_swig.sync_frequency_c_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sync_frequency_c_sptr self, long max_output_buffer)
        set_max_output_buffer(sync_frequency_c_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.sync_frequency_c_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sync_frequency_c_sptr self, int i) -> long"""
        return _lte_swig.sync_frequency_c_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sync_frequency_c_sptr self, long min_output_buffer)
        set_min_output_buffer(sync_frequency_c_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.sync_frequency_c_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sync_frequency_c_sptr self) -> float"""
        return _lte_swig.sync_frequency_c_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sync_frequency_c_sptr self) -> float"""
        return _lte_swig.sync_frequency_c_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sync_frequency_c_sptr self) -> float"""
        return _lte_swig.sync_frequency_c_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sync_frequency_c_sptr self) -> float"""
        return _lte_swig.sync_frequency_c_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sync_frequency_c_sptr self) -> float"""
        return _lte_swig.sync_frequency_c_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sync_frequency_c_sptr self) -> float"""
        return _lte_swig.sync_frequency_c_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sync_frequency_c_sptr self, int which) -> float
        pc_input_buffers_full(sync_frequency_c_sptr self) -> pmt_vector_float
        """
        return _lte_swig.sync_frequency_c_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sync_frequency_c_sptr self, int which) -> float
        pc_input_buffers_full_avg(sync_frequency_c_sptr self) -> pmt_vector_float
        """
        return _lte_swig.sync_frequency_c_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sync_frequency_c_sptr self, int which) -> float
        pc_input_buffers_full_var(sync_frequency_c_sptr self) -> pmt_vector_float
        """
        return _lte_swig.sync_frequency_c_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sync_frequency_c_sptr self, int which) -> float
        pc_output_buffers_full(sync_frequency_c_sptr self) -> pmt_vector_float
        """
        return _lte_swig.sync_frequency_c_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sync_frequency_c_sptr self, int which) -> float
        pc_output_buffers_full_avg(sync_frequency_c_sptr self) -> pmt_vector_float
        """
        return _lte_swig.sync_frequency_c_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sync_frequency_c_sptr self, int which) -> float
        pc_output_buffers_full_var(sync_frequency_c_sptr self) -> pmt_vector_float
        """
        return _lte_swig.sync_frequency_c_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sync_frequency_c_sptr self) -> float"""
        return _lte_swig.sync_frequency_c_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sync_frequency_c_sptr self) -> float"""
        return _lte_swig.sync_frequency_c_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sync_frequency_c_sptr self) -> float"""
        return _lte_swig.sync_frequency_c_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sync_frequency_c_sptr self) -> float"""
        return _lte_swig.sync_frequency_c_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sync_frequency_c_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.sync_frequency_c_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sync_frequency_c_sptr self)"""
        return _lte_swig.sync_frequency_c_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sync_frequency_c_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.sync_frequency_c_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sync_frequency_c_sptr self) -> int"""
        return _lte_swig.sync_frequency_c_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sync_frequency_c_sptr self) -> int"""
        return _lte_swig.sync_frequency_c_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sync_frequency_c_sptr self, int priority) -> int"""
        return _lte_swig.sync_frequency_c_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sync_frequency_c_sptr self) -> std::string"""
        return _lte_swig.sync_frequency_c_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sync_frequency_c_sptr self) -> std::string"""
        return _lte_swig.sync_frequency_c_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sync_frequency_c_sptr self) -> io_signature_sptr"""
        return _lte_swig.sync_frequency_c_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sync_frequency_c_sptr self) -> io_signature_sptr"""
        return _lte_swig.sync_frequency_c_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sync_frequency_c_sptr self) -> long"""
        return _lte_swig.sync_frequency_c_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sync_frequency_c_sptr self) -> basic_block_sptr"""
        return _lte_swig.sync_frequency_c_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sync_frequency_c_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.sync_frequency_c_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sync_frequency_c_sptr self) -> std::string"""
        return _lte_swig.sync_frequency_c_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sync_frequency_c_sptr self, std::string name)"""
        return _lte_swig.sync_frequency_c_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sync_frequency_c_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.sync_frequency_c_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sync_frequency_c_sptr self) -> swig_int_ptr"""
        return _lte_swig.sync_frequency_c_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sync_frequency_c_sptr self) -> swig_int_ptr"""
        return _lte_swig.sync_frequency_c_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sync_frequency_c_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.sync_frequency_c_sptr_message_subscribers(self, *args, **kwargs)

sync_frequency_c_sptr_swigregister = _lte_swig.sync_frequency_c_sptr_swigregister
sync_frequency_c_sptr_swigregister(sync_frequency_c_sptr)

sync_frequency_c_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sync_frequency_c = sync_frequency_c.make;

class descrambler_vfvf(object):
    """
    LTE Descrambler

    Scrambling sequences are setable on runtime and chosen upon tag reception.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def set_descr_seqs(self, *args, **kwargs):
        """
        set_descr_seqs(descrambler_vfvf self, std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > seqs)

        Params: (seqs)
        """
        return _lte_swig.descrambler_vfvf_set_descr_seqs(self, *args, **kwargs)

    def make(*args, **kwargs):
        """
        make(std::string tag_key, std::string msg_buf_name, int len, std::string name="descrambler_vfvf") -> descrambler_vfvf_sptr

        Return a shared_ptr to a new instance of lte::descrambler_vfvf.

        To avoid accidental use of raw pointers, lte::descrambler_vfvf's constructor is in a private implementation class. lte::descrambler_vfvf::make is the public interface for creating new instances.

        Params: (tag_key, msg_buf_name, len, name)
        """
        return _lte_swig.descrambler_vfvf_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_descrambler_vfvf
    __del__ = lambda self : None;
descrambler_vfvf_swigregister = _lte_swig.descrambler_vfvf_swigregister
descrambler_vfvf_swigregister(descrambler_vfvf)

def descrambler_vfvf_make(*args, **kwargs):
  """
    descrambler_vfvf_make(std::string tag_key, std::string msg_buf_name, int len, std::string name="descrambler_vfvf") -> descrambler_vfvf_sptr

    Return a shared_ptr to a new instance of lte::descrambler_vfvf.

    To avoid accidental use of raw pointers, lte::descrambler_vfvf's constructor is in a private implementation class. lte::descrambler_vfvf::make is the public interface for creating new instances.

    Params: (tag_key, msg_buf_name, len, name)
    """
  return _lte_swig.descrambler_vfvf_make(*args, **kwargs)

class descrambler_vfvf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::descrambler_vfvf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::descrambler_vfvf)> self) -> descrambler_vfvf_sptr
        __init__(boost::shared_ptr<(gr::lte::descrambler_vfvf)> self, descrambler_vfvf p) -> descrambler_vfvf_sptr
        """
        this = _lte_swig.new_descrambler_vfvf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(descrambler_vfvf_sptr self) -> descrambler_vfvf"""
        return _lte_swig.descrambler_vfvf_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_descrambler_vfvf_sptr
    __del__ = lambda self : None;
    def set_descr_seqs(self, *args, **kwargs):
        """
        set_descr_seqs(descrambler_vfvf_sptr self, std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > seqs)

        Params: (seqs)
        """
        return _lte_swig.descrambler_vfvf_sptr_set_descr_seqs(self, *args, **kwargs)

    def make(self, *args, **kwargs):
        """
        make(descrambler_vfvf_sptr self, std::string tag_key, std::string msg_buf_name, int len, std::string name="descrambler_vfvf") -> descrambler_vfvf_sptr

        Return a shared_ptr to a new instance of lte::descrambler_vfvf.

        To avoid accidental use of raw pointers, lte::descrambler_vfvf's constructor is in a private implementation class. lte::descrambler_vfvf::make is the public interface for creating new instances.

        Params: (tag_key, msg_buf_name, len, name)
        """
        return _lte_swig.descrambler_vfvf_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(descrambler_vfvf_sptr self) -> unsigned int"""
        return _lte_swig.descrambler_vfvf_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(descrambler_vfvf_sptr self, int which, int delay)
        declare_sample_delay(descrambler_vfvf_sptr self, unsigned int delay)
        """
        return _lte_swig.descrambler_vfvf_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(descrambler_vfvf_sptr self, int which) -> unsigned int"""
        return _lte_swig.descrambler_vfvf_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(descrambler_vfvf_sptr self) -> int"""
        return _lte_swig.descrambler_vfvf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(descrambler_vfvf_sptr self) -> double"""
        return _lte_swig.descrambler_vfvf_sptr_relative_rate(self)

    def start(self):
        """start(descrambler_vfvf_sptr self) -> bool"""
        return _lte_swig.descrambler_vfvf_sptr_start(self)

    def stop(self):
        """stop(descrambler_vfvf_sptr self) -> bool"""
        return _lte_swig.descrambler_vfvf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(descrambler_vfvf_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.descrambler_vfvf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(descrambler_vfvf_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.descrambler_vfvf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(descrambler_vfvf_sptr self) -> int"""
        return _lte_swig.descrambler_vfvf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(descrambler_vfvf_sptr self, int m)"""
        return _lte_swig.descrambler_vfvf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(descrambler_vfvf_sptr self)"""
        return _lte_swig.descrambler_vfvf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(descrambler_vfvf_sptr self) -> bool"""
        return _lte_swig.descrambler_vfvf_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(descrambler_vfvf_sptr self, int m)"""
        return _lte_swig.descrambler_vfvf_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(descrambler_vfvf_sptr self) -> int"""
        return _lte_swig.descrambler_vfvf_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(descrambler_vfvf_sptr self, int i) -> long"""
        return _lte_swig.descrambler_vfvf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(descrambler_vfvf_sptr self, long max_output_buffer)
        set_max_output_buffer(descrambler_vfvf_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.descrambler_vfvf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(descrambler_vfvf_sptr self, int i) -> long"""
        return _lte_swig.descrambler_vfvf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(descrambler_vfvf_sptr self, long min_output_buffer)
        set_min_output_buffer(descrambler_vfvf_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.descrambler_vfvf_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(descrambler_vfvf_sptr self) -> float"""
        return _lte_swig.descrambler_vfvf_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(descrambler_vfvf_sptr self) -> float"""
        return _lte_swig.descrambler_vfvf_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(descrambler_vfvf_sptr self) -> float"""
        return _lte_swig.descrambler_vfvf_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(descrambler_vfvf_sptr self) -> float"""
        return _lte_swig.descrambler_vfvf_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(descrambler_vfvf_sptr self) -> float"""
        return _lte_swig.descrambler_vfvf_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(descrambler_vfvf_sptr self) -> float"""
        return _lte_swig.descrambler_vfvf_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(descrambler_vfvf_sptr self, int which) -> float
        pc_input_buffers_full(descrambler_vfvf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.descrambler_vfvf_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(descrambler_vfvf_sptr self, int which) -> float
        pc_input_buffers_full_avg(descrambler_vfvf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.descrambler_vfvf_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(descrambler_vfvf_sptr self, int which) -> float
        pc_input_buffers_full_var(descrambler_vfvf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.descrambler_vfvf_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(descrambler_vfvf_sptr self, int which) -> float
        pc_output_buffers_full(descrambler_vfvf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.descrambler_vfvf_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(descrambler_vfvf_sptr self, int which) -> float
        pc_output_buffers_full_avg(descrambler_vfvf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.descrambler_vfvf_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(descrambler_vfvf_sptr self, int which) -> float
        pc_output_buffers_full_var(descrambler_vfvf_sptr self) -> pmt_vector_float
        """
        return _lte_swig.descrambler_vfvf_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(descrambler_vfvf_sptr self) -> float"""
        return _lte_swig.descrambler_vfvf_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(descrambler_vfvf_sptr self) -> float"""
        return _lte_swig.descrambler_vfvf_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(descrambler_vfvf_sptr self) -> float"""
        return _lte_swig.descrambler_vfvf_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(descrambler_vfvf_sptr self) -> float"""
        return _lte_swig.descrambler_vfvf_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(descrambler_vfvf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.descrambler_vfvf_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(descrambler_vfvf_sptr self)"""
        return _lte_swig.descrambler_vfvf_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(descrambler_vfvf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.descrambler_vfvf_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(descrambler_vfvf_sptr self) -> int"""
        return _lte_swig.descrambler_vfvf_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(descrambler_vfvf_sptr self) -> int"""
        return _lte_swig.descrambler_vfvf_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(descrambler_vfvf_sptr self, int priority) -> int"""
        return _lte_swig.descrambler_vfvf_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(descrambler_vfvf_sptr self) -> std::string"""
        return _lte_swig.descrambler_vfvf_sptr_name(self)

    def symbol_name(self):
        """symbol_name(descrambler_vfvf_sptr self) -> std::string"""
        return _lte_swig.descrambler_vfvf_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(descrambler_vfvf_sptr self) -> io_signature_sptr"""
        return _lte_swig.descrambler_vfvf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(descrambler_vfvf_sptr self) -> io_signature_sptr"""
        return _lte_swig.descrambler_vfvf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(descrambler_vfvf_sptr self) -> long"""
        return _lte_swig.descrambler_vfvf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(descrambler_vfvf_sptr self) -> basic_block_sptr"""
        return _lte_swig.descrambler_vfvf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(descrambler_vfvf_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.descrambler_vfvf_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(descrambler_vfvf_sptr self) -> std::string"""
        return _lte_swig.descrambler_vfvf_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(descrambler_vfvf_sptr self, std::string name)"""
        return _lte_swig.descrambler_vfvf_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(descrambler_vfvf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.descrambler_vfvf_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(descrambler_vfvf_sptr self) -> swig_int_ptr"""
        return _lte_swig.descrambler_vfvf_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(descrambler_vfvf_sptr self) -> swig_int_ptr"""
        return _lte_swig.descrambler_vfvf_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(descrambler_vfvf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.descrambler_vfvf_sptr_message_subscribers(self, *args, **kwargs)

descrambler_vfvf_sptr_swigregister = _lte_swig.descrambler_vfvf_sptr_swigregister
descrambler_vfvf_sptr_swigregister(descrambler_vfvf_sptr)

descrambler_vfvf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
descrambler_vfvf = descrambler_vfvf.make;

class pcfich_demux_vcvc(object):
    """Demux PCFICH from resource grid."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def set_cell_id(self, *args, **kwargs):
        """
        set_cell_id(pcfich_demux_vcvc self, int id)

        Params: (id)
        """
        return _lte_swig.pcfich_demux_vcvc_set_cell_id(self, *args, **kwargs)

    def make(*args, **kwargs):
        """
        make(int N_rb_dl, std::string key, std::string out_key, std::string msg_buf_name, std::string name="pcfich_demux_vcvc") -> pcfich_demux_vcvc_sptr

        Return a shared_ptr to a new instance of lte::pcfich_demux_vcvc.

        To avoid accidental use of raw pointers, lte::pcfich_demux_vcvc's constructor is in a private implementation class. lte::pcfich_demux_vcvc::make is the public interface for creating new instances.

        Params: (N_rb_dl, key, out_key, msg_buf_name, name)
        """
        return _lte_swig.pcfich_demux_vcvc_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_pcfich_demux_vcvc
    __del__ = lambda self : None;
pcfich_demux_vcvc_swigregister = _lte_swig.pcfich_demux_vcvc_swigregister
pcfich_demux_vcvc_swigregister(pcfich_demux_vcvc)

def pcfich_demux_vcvc_make(*args, **kwargs):
  """
    pcfich_demux_vcvc_make(int N_rb_dl, std::string key, std::string out_key, std::string msg_buf_name, std::string name="pcfich_demux_vcvc") -> pcfich_demux_vcvc_sptr

    Return a shared_ptr to a new instance of lte::pcfich_demux_vcvc.

    To avoid accidental use of raw pointers, lte::pcfich_demux_vcvc's constructor is in a private implementation class. lte::pcfich_demux_vcvc::make is the public interface for creating new instances.

    Params: (N_rb_dl, key, out_key, msg_buf_name, name)
    """
  return _lte_swig.pcfich_demux_vcvc_make(*args, **kwargs)

class pcfich_demux_vcvc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::pcfich_demux_vcvc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::pcfich_demux_vcvc)> self) -> pcfich_demux_vcvc_sptr
        __init__(boost::shared_ptr<(gr::lte::pcfich_demux_vcvc)> self, pcfich_demux_vcvc p) -> pcfich_demux_vcvc_sptr
        """
        this = _lte_swig.new_pcfich_demux_vcvc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pcfich_demux_vcvc_sptr self) -> pcfich_demux_vcvc"""
        return _lte_swig.pcfich_demux_vcvc_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_pcfich_demux_vcvc_sptr
    __del__ = lambda self : None;
    def set_cell_id(self, *args, **kwargs):
        """
        set_cell_id(pcfich_demux_vcvc_sptr self, int id)

        Params: (id)
        """
        return _lte_swig.pcfich_demux_vcvc_sptr_set_cell_id(self, *args, **kwargs)

    def make(self, *args, **kwargs):
        """
        make(pcfich_demux_vcvc_sptr self, int N_rb_dl, std::string key, std::string out_key, std::string msg_buf_name, std::string name="pcfich_demux_vcvc") -> pcfich_demux_vcvc_sptr

        Return a shared_ptr to a new instance of lte::pcfich_demux_vcvc.

        To avoid accidental use of raw pointers, lte::pcfich_demux_vcvc's constructor is in a private implementation class. lte::pcfich_demux_vcvc::make is the public interface for creating new instances.

        Params: (N_rb_dl, key, out_key, msg_buf_name, name)
        """
        return _lte_swig.pcfich_demux_vcvc_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(pcfich_demux_vcvc_sptr self) -> unsigned int"""
        return _lte_swig.pcfich_demux_vcvc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pcfich_demux_vcvc_sptr self, int which, int delay)
        declare_sample_delay(pcfich_demux_vcvc_sptr self, unsigned int delay)
        """
        return _lte_swig.pcfich_demux_vcvc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pcfich_demux_vcvc_sptr self, int which) -> unsigned int"""
        return _lte_swig.pcfich_demux_vcvc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pcfich_demux_vcvc_sptr self) -> int"""
        return _lte_swig.pcfich_demux_vcvc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pcfich_demux_vcvc_sptr self) -> double"""
        return _lte_swig.pcfich_demux_vcvc_sptr_relative_rate(self)

    def start(self):
        """start(pcfich_demux_vcvc_sptr self) -> bool"""
        return _lte_swig.pcfich_demux_vcvc_sptr_start(self)

    def stop(self):
        """stop(pcfich_demux_vcvc_sptr self) -> bool"""
        return _lte_swig.pcfich_demux_vcvc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pcfich_demux_vcvc_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.pcfich_demux_vcvc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pcfich_demux_vcvc_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.pcfich_demux_vcvc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pcfich_demux_vcvc_sptr self) -> int"""
        return _lte_swig.pcfich_demux_vcvc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pcfich_demux_vcvc_sptr self, int m)"""
        return _lte_swig.pcfich_demux_vcvc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pcfich_demux_vcvc_sptr self)"""
        return _lte_swig.pcfich_demux_vcvc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pcfich_demux_vcvc_sptr self) -> bool"""
        return _lte_swig.pcfich_demux_vcvc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pcfich_demux_vcvc_sptr self, int m)"""
        return _lte_swig.pcfich_demux_vcvc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pcfich_demux_vcvc_sptr self) -> int"""
        return _lte_swig.pcfich_demux_vcvc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pcfich_demux_vcvc_sptr self, int i) -> long"""
        return _lte_swig.pcfich_demux_vcvc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pcfich_demux_vcvc_sptr self, long max_output_buffer)
        set_max_output_buffer(pcfich_demux_vcvc_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.pcfich_demux_vcvc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pcfich_demux_vcvc_sptr self, int i) -> long"""
        return _lte_swig.pcfich_demux_vcvc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pcfich_demux_vcvc_sptr self, long min_output_buffer)
        set_min_output_buffer(pcfich_demux_vcvc_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.pcfich_demux_vcvc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pcfich_demux_vcvc_sptr self) -> float"""
        return _lte_swig.pcfich_demux_vcvc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pcfich_demux_vcvc_sptr self) -> float"""
        return _lte_swig.pcfich_demux_vcvc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pcfich_demux_vcvc_sptr self) -> float"""
        return _lte_swig.pcfich_demux_vcvc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pcfich_demux_vcvc_sptr self) -> float"""
        return _lte_swig.pcfich_demux_vcvc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pcfich_demux_vcvc_sptr self) -> float"""
        return _lte_swig.pcfich_demux_vcvc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pcfich_demux_vcvc_sptr self) -> float"""
        return _lte_swig.pcfich_demux_vcvc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pcfich_demux_vcvc_sptr self, int which) -> float
        pc_input_buffers_full(pcfich_demux_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pcfich_demux_vcvc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pcfich_demux_vcvc_sptr self, int which) -> float
        pc_input_buffers_full_avg(pcfich_demux_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pcfich_demux_vcvc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pcfich_demux_vcvc_sptr self, int which) -> float
        pc_input_buffers_full_var(pcfich_demux_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pcfich_demux_vcvc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pcfich_demux_vcvc_sptr self, int which) -> float
        pc_output_buffers_full(pcfich_demux_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pcfich_demux_vcvc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pcfich_demux_vcvc_sptr self, int which) -> float
        pc_output_buffers_full_avg(pcfich_demux_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pcfich_demux_vcvc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pcfich_demux_vcvc_sptr self, int which) -> float
        pc_output_buffers_full_var(pcfich_demux_vcvc_sptr self) -> pmt_vector_float
        """
        return _lte_swig.pcfich_demux_vcvc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pcfich_demux_vcvc_sptr self) -> float"""
        return _lte_swig.pcfich_demux_vcvc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pcfich_demux_vcvc_sptr self) -> float"""
        return _lte_swig.pcfich_demux_vcvc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pcfich_demux_vcvc_sptr self) -> float"""
        return _lte_swig.pcfich_demux_vcvc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pcfich_demux_vcvc_sptr self) -> float"""
        return _lte_swig.pcfich_demux_vcvc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pcfich_demux_vcvc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.pcfich_demux_vcvc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pcfich_demux_vcvc_sptr self)"""
        return _lte_swig.pcfich_demux_vcvc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pcfich_demux_vcvc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.pcfich_demux_vcvc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pcfich_demux_vcvc_sptr self) -> int"""
        return _lte_swig.pcfich_demux_vcvc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pcfich_demux_vcvc_sptr self) -> int"""
        return _lte_swig.pcfich_demux_vcvc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pcfich_demux_vcvc_sptr self, int priority) -> int"""
        return _lte_swig.pcfich_demux_vcvc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pcfich_demux_vcvc_sptr self) -> std::string"""
        return _lte_swig.pcfich_demux_vcvc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pcfich_demux_vcvc_sptr self) -> std::string"""
        return _lte_swig.pcfich_demux_vcvc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pcfich_demux_vcvc_sptr self) -> io_signature_sptr"""
        return _lte_swig.pcfich_demux_vcvc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pcfich_demux_vcvc_sptr self) -> io_signature_sptr"""
        return _lte_swig.pcfich_demux_vcvc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pcfich_demux_vcvc_sptr self) -> long"""
        return _lte_swig.pcfich_demux_vcvc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pcfich_demux_vcvc_sptr self) -> basic_block_sptr"""
        return _lte_swig.pcfich_demux_vcvc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pcfich_demux_vcvc_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.pcfich_demux_vcvc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pcfich_demux_vcvc_sptr self) -> std::string"""
        return _lte_swig.pcfich_demux_vcvc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pcfich_demux_vcvc_sptr self, std::string name)"""
        return _lte_swig.pcfich_demux_vcvc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pcfich_demux_vcvc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.pcfich_demux_vcvc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pcfich_demux_vcvc_sptr self) -> swig_int_ptr"""
        return _lte_swig.pcfich_demux_vcvc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pcfich_demux_vcvc_sptr self) -> swig_int_ptr"""
        return _lte_swig.pcfich_demux_vcvc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pcfich_demux_vcvc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.pcfich_demux_vcvc_sptr_message_subscribers(self, *args, **kwargs)

pcfich_demux_vcvc_sptr_swigregister = _lte_swig.pcfich_demux_vcvc_sptr_swigregister
pcfich_demux_vcvc_sptr_swigregister(pcfich_demux_vcvc_sptr)

pcfich_demux_vcvc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pcfich_demux_vcvc = pcfich_demux_vcvc.make;

class mimo_pss_coarse_sync(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int fftl, int syncl, int rxant) -> mimo_pss_coarse_sync_sptr

        Return a shared_ptr to a new instance of lte::mimo_pss_coarse_sync.

        To avoid accidental use of raw pointers, lte::mimo_pss_coarse_sync's constructor is in a private implementation class. lte::mimo_pss_coarse_sync::make is the public interface for creating new instances.

        Params: (fftl, syncl, rxant)
        """
        return _lte_swig.mimo_pss_coarse_sync_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_mimo_pss_coarse_sync
    __del__ = lambda self : None;
mimo_pss_coarse_sync_swigregister = _lte_swig.mimo_pss_coarse_sync_swigregister
mimo_pss_coarse_sync_swigregister(mimo_pss_coarse_sync)

def mimo_pss_coarse_sync_make(*args, **kwargs):
  """
    mimo_pss_coarse_sync_make(int fftl, int syncl, int rxant) -> mimo_pss_coarse_sync_sptr

    Return a shared_ptr to a new instance of lte::mimo_pss_coarse_sync.

    To avoid accidental use of raw pointers, lte::mimo_pss_coarse_sync's constructor is in a private implementation class. lte::mimo_pss_coarse_sync::make is the public interface for creating new instances.

    Params: (fftl, syncl, rxant)
    """
  return _lte_swig.mimo_pss_coarse_sync_make(*args, **kwargs)

class mimo_pss_coarse_sync_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::mimo_pss_coarse_sync)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::mimo_pss_coarse_sync)> self) -> mimo_pss_coarse_sync_sptr
        __init__(boost::shared_ptr<(gr::lte::mimo_pss_coarse_sync)> self, mimo_pss_coarse_sync p) -> mimo_pss_coarse_sync_sptr
        """
        this = _lte_swig.new_mimo_pss_coarse_sync_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mimo_pss_coarse_sync_sptr self) -> mimo_pss_coarse_sync"""
        return _lte_swig.mimo_pss_coarse_sync_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_mimo_pss_coarse_sync_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(mimo_pss_coarse_sync_sptr self, int fftl, int syncl, int rxant) -> mimo_pss_coarse_sync_sptr

        Return a shared_ptr to a new instance of lte::mimo_pss_coarse_sync.

        To avoid accidental use of raw pointers, lte::mimo_pss_coarse_sync's constructor is in a private implementation class. lte::mimo_pss_coarse_sync::make is the public interface for creating new instances.

        Params: (fftl, syncl, rxant)
        """
        return _lte_swig.mimo_pss_coarse_sync_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(mimo_pss_coarse_sync_sptr self) -> unsigned int"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mimo_pss_coarse_sync_sptr self, int which, int delay)
        declare_sample_delay(mimo_pss_coarse_sync_sptr self, unsigned int delay)
        """
        return _lte_swig.mimo_pss_coarse_sync_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mimo_pss_coarse_sync_sptr self, int which) -> unsigned int"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mimo_pss_coarse_sync_sptr self) -> int"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mimo_pss_coarse_sync_sptr self) -> double"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_relative_rate(self)

    def start(self):
        """start(mimo_pss_coarse_sync_sptr self) -> bool"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_start(self)

    def stop(self):
        """stop(mimo_pss_coarse_sync_sptr self) -> bool"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mimo_pss_coarse_sync_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mimo_pss_coarse_sync_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mimo_pss_coarse_sync_sptr self) -> int"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mimo_pss_coarse_sync_sptr self, int m)"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mimo_pss_coarse_sync_sptr self)"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mimo_pss_coarse_sync_sptr self) -> bool"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mimo_pss_coarse_sync_sptr self, int m)"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mimo_pss_coarse_sync_sptr self) -> int"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mimo_pss_coarse_sync_sptr self, int i) -> long"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mimo_pss_coarse_sync_sptr self, long max_output_buffer)
        set_max_output_buffer(mimo_pss_coarse_sync_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.mimo_pss_coarse_sync_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mimo_pss_coarse_sync_sptr self, int i) -> long"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mimo_pss_coarse_sync_sptr self, long min_output_buffer)
        set_min_output_buffer(mimo_pss_coarse_sync_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.mimo_pss_coarse_sync_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mimo_pss_coarse_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mimo_pss_coarse_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mimo_pss_coarse_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mimo_pss_coarse_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mimo_pss_coarse_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mimo_pss_coarse_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mimo_pss_coarse_sync_sptr self, int which) -> float
        pc_input_buffers_full(mimo_pss_coarse_sync_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_coarse_sync_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mimo_pss_coarse_sync_sptr self, int which) -> float
        pc_input_buffers_full_avg(mimo_pss_coarse_sync_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_coarse_sync_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mimo_pss_coarse_sync_sptr self, int which) -> float
        pc_input_buffers_full_var(mimo_pss_coarse_sync_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_coarse_sync_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mimo_pss_coarse_sync_sptr self, int which) -> float
        pc_output_buffers_full(mimo_pss_coarse_sync_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_coarse_sync_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mimo_pss_coarse_sync_sptr self, int which) -> float
        pc_output_buffers_full_avg(mimo_pss_coarse_sync_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_coarse_sync_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mimo_pss_coarse_sync_sptr self, int which) -> float
        pc_output_buffers_full_var(mimo_pss_coarse_sync_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_coarse_sync_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mimo_pss_coarse_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mimo_pss_coarse_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mimo_pss_coarse_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mimo_pss_coarse_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mimo_pss_coarse_sync_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mimo_pss_coarse_sync_sptr self)"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mimo_pss_coarse_sync_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mimo_pss_coarse_sync_sptr self) -> int"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mimo_pss_coarse_sync_sptr self) -> int"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mimo_pss_coarse_sync_sptr self, int priority) -> int"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mimo_pss_coarse_sync_sptr self) -> std::string"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mimo_pss_coarse_sync_sptr self) -> std::string"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mimo_pss_coarse_sync_sptr self) -> io_signature_sptr"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mimo_pss_coarse_sync_sptr self) -> io_signature_sptr"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mimo_pss_coarse_sync_sptr self) -> long"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mimo_pss_coarse_sync_sptr self) -> basic_block_sptr"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mimo_pss_coarse_sync_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mimo_pss_coarse_sync_sptr self) -> std::string"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mimo_pss_coarse_sync_sptr self, std::string name)"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mimo_pss_coarse_sync_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.mimo_pss_coarse_sync_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mimo_pss_coarse_sync_sptr self) -> swig_int_ptr"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mimo_pss_coarse_sync_sptr self) -> swig_int_ptr"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mimo_pss_coarse_sync_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.mimo_pss_coarse_sync_sptr_message_subscribers(self, *args, **kwargs)

mimo_pss_coarse_sync_sptr_swigregister = _lte_swig.mimo_pss_coarse_sync_sptr_swigregister
mimo_pss_coarse_sync_sptr_swigregister(mimo_pss_coarse_sync_sptr)

mimo_pss_coarse_sync_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mimo_pss_coarse_sync = mimo_pss_coarse_sync.make;

class mimo_pss_fine_sync(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int fftl, int rxant, int grpdelay) -> mimo_pss_fine_sync_sptr

        Return a shared_ptr to a new instance of lte::mimo_pss_fine_sync.

        To avoid accidental use of raw pointers, lte::mimo_pss_fine_sync's constructor is in a private implementation class. lte::mimo_pss_fine_sync::make is the public interface for creating new instances.

        Params: (fftl, rxant, grpdelay)
        """
        return _lte_swig.mimo_pss_fine_sync_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_mimo_pss_fine_sync
    __del__ = lambda self : None;
mimo_pss_fine_sync_swigregister = _lte_swig.mimo_pss_fine_sync_swigregister
mimo_pss_fine_sync_swigregister(mimo_pss_fine_sync)

def mimo_pss_fine_sync_make(*args, **kwargs):
  """
    mimo_pss_fine_sync_make(int fftl, int rxant, int grpdelay) -> mimo_pss_fine_sync_sptr

    Return a shared_ptr to a new instance of lte::mimo_pss_fine_sync.

    To avoid accidental use of raw pointers, lte::mimo_pss_fine_sync's constructor is in a private implementation class. lte::mimo_pss_fine_sync::make is the public interface for creating new instances.

    Params: (fftl, rxant, grpdelay)
    """
  return _lte_swig.mimo_pss_fine_sync_make(*args, **kwargs)

class mimo_pss_fine_sync_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::mimo_pss_fine_sync)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::mimo_pss_fine_sync)> self) -> mimo_pss_fine_sync_sptr
        __init__(boost::shared_ptr<(gr::lte::mimo_pss_fine_sync)> self, mimo_pss_fine_sync p) -> mimo_pss_fine_sync_sptr
        """
        this = _lte_swig.new_mimo_pss_fine_sync_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mimo_pss_fine_sync_sptr self) -> mimo_pss_fine_sync"""
        return _lte_swig.mimo_pss_fine_sync_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_mimo_pss_fine_sync_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(mimo_pss_fine_sync_sptr self, int fftl, int rxant, int grpdelay) -> mimo_pss_fine_sync_sptr

        Return a shared_ptr to a new instance of lte::mimo_pss_fine_sync.

        To avoid accidental use of raw pointers, lte::mimo_pss_fine_sync's constructor is in a private implementation class. lte::mimo_pss_fine_sync::make is the public interface for creating new instances.

        Params: (fftl, rxant, grpdelay)
        """
        return _lte_swig.mimo_pss_fine_sync_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(mimo_pss_fine_sync_sptr self) -> unsigned int"""
        return _lte_swig.mimo_pss_fine_sync_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mimo_pss_fine_sync_sptr self, int which, int delay)
        declare_sample_delay(mimo_pss_fine_sync_sptr self, unsigned int delay)
        """
        return _lte_swig.mimo_pss_fine_sync_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mimo_pss_fine_sync_sptr self, int which) -> unsigned int"""
        return _lte_swig.mimo_pss_fine_sync_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mimo_pss_fine_sync_sptr self) -> int"""
        return _lte_swig.mimo_pss_fine_sync_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mimo_pss_fine_sync_sptr self) -> double"""
        return _lte_swig.mimo_pss_fine_sync_sptr_relative_rate(self)

    def start(self):
        """start(mimo_pss_fine_sync_sptr self) -> bool"""
        return _lte_swig.mimo_pss_fine_sync_sptr_start(self)

    def stop(self):
        """stop(mimo_pss_fine_sync_sptr self) -> bool"""
        return _lte_swig.mimo_pss_fine_sync_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mimo_pss_fine_sync_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.mimo_pss_fine_sync_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mimo_pss_fine_sync_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.mimo_pss_fine_sync_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mimo_pss_fine_sync_sptr self) -> int"""
        return _lte_swig.mimo_pss_fine_sync_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mimo_pss_fine_sync_sptr self, int m)"""
        return _lte_swig.mimo_pss_fine_sync_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mimo_pss_fine_sync_sptr self)"""
        return _lte_swig.mimo_pss_fine_sync_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mimo_pss_fine_sync_sptr self) -> bool"""
        return _lte_swig.mimo_pss_fine_sync_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mimo_pss_fine_sync_sptr self, int m)"""
        return _lte_swig.mimo_pss_fine_sync_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mimo_pss_fine_sync_sptr self) -> int"""
        return _lte_swig.mimo_pss_fine_sync_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mimo_pss_fine_sync_sptr self, int i) -> long"""
        return _lte_swig.mimo_pss_fine_sync_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mimo_pss_fine_sync_sptr self, long max_output_buffer)
        set_max_output_buffer(mimo_pss_fine_sync_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.mimo_pss_fine_sync_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mimo_pss_fine_sync_sptr self, int i) -> long"""
        return _lte_swig.mimo_pss_fine_sync_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mimo_pss_fine_sync_sptr self, long min_output_buffer)
        set_min_output_buffer(mimo_pss_fine_sync_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.mimo_pss_fine_sync_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mimo_pss_fine_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_fine_sync_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mimo_pss_fine_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_fine_sync_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mimo_pss_fine_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_fine_sync_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mimo_pss_fine_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_fine_sync_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mimo_pss_fine_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_fine_sync_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mimo_pss_fine_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_fine_sync_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mimo_pss_fine_sync_sptr self, int which) -> float
        pc_input_buffers_full(mimo_pss_fine_sync_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_fine_sync_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mimo_pss_fine_sync_sptr self, int which) -> float
        pc_input_buffers_full_avg(mimo_pss_fine_sync_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_fine_sync_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mimo_pss_fine_sync_sptr self, int which) -> float
        pc_input_buffers_full_var(mimo_pss_fine_sync_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_fine_sync_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mimo_pss_fine_sync_sptr self, int which) -> float
        pc_output_buffers_full(mimo_pss_fine_sync_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_fine_sync_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mimo_pss_fine_sync_sptr self, int which) -> float
        pc_output_buffers_full_avg(mimo_pss_fine_sync_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_fine_sync_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mimo_pss_fine_sync_sptr self, int which) -> float
        pc_output_buffers_full_var(mimo_pss_fine_sync_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_fine_sync_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mimo_pss_fine_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_fine_sync_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mimo_pss_fine_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_fine_sync_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mimo_pss_fine_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_fine_sync_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mimo_pss_fine_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_fine_sync_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mimo_pss_fine_sync_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.mimo_pss_fine_sync_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mimo_pss_fine_sync_sptr self)"""
        return _lte_swig.mimo_pss_fine_sync_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mimo_pss_fine_sync_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.mimo_pss_fine_sync_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mimo_pss_fine_sync_sptr self) -> int"""
        return _lte_swig.mimo_pss_fine_sync_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mimo_pss_fine_sync_sptr self) -> int"""
        return _lte_swig.mimo_pss_fine_sync_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mimo_pss_fine_sync_sptr self, int priority) -> int"""
        return _lte_swig.mimo_pss_fine_sync_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mimo_pss_fine_sync_sptr self) -> std::string"""
        return _lte_swig.mimo_pss_fine_sync_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mimo_pss_fine_sync_sptr self) -> std::string"""
        return _lte_swig.mimo_pss_fine_sync_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mimo_pss_fine_sync_sptr self) -> io_signature_sptr"""
        return _lte_swig.mimo_pss_fine_sync_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mimo_pss_fine_sync_sptr self) -> io_signature_sptr"""
        return _lte_swig.mimo_pss_fine_sync_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mimo_pss_fine_sync_sptr self) -> long"""
        return _lte_swig.mimo_pss_fine_sync_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mimo_pss_fine_sync_sptr self) -> basic_block_sptr"""
        return _lte_swig.mimo_pss_fine_sync_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mimo_pss_fine_sync_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.mimo_pss_fine_sync_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mimo_pss_fine_sync_sptr self) -> std::string"""
        return _lte_swig.mimo_pss_fine_sync_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mimo_pss_fine_sync_sptr self, std::string name)"""
        return _lte_swig.mimo_pss_fine_sync_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mimo_pss_fine_sync_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.mimo_pss_fine_sync_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mimo_pss_fine_sync_sptr self) -> swig_int_ptr"""
        return _lte_swig.mimo_pss_fine_sync_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mimo_pss_fine_sync_sptr self) -> swig_int_ptr"""
        return _lte_swig.mimo_pss_fine_sync_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mimo_pss_fine_sync_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.mimo_pss_fine_sync_sptr_message_subscribers(self, *args, **kwargs)

mimo_pss_fine_sync_sptr_swigregister = _lte_swig.mimo_pss_fine_sync_sptr_swigregister
mimo_pss_fine_sync_sptr_swigregister(mimo_pss_fine_sync_sptr)

mimo_pss_fine_sync_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mimo_pss_fine_sync = mimo_pss_fine_sync.make;

class mimo_pss_tagger(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int fftl) -> mimo_pss_tagger_sptr

        Return a shared_ptr to a new instance of lte::mimo_pss_tagger.

        To avoid accidental use of raw pointers, lte::mimo_pss_tagger's constructor is in a private implementation class. lte::mimo_pss_tagger::make is the public interface for creating new instances.

        Params: (fftl)
        """
        return _lte_swig.mimo_pss_tagger_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_mimo_pss_tagger
    __del__ = lambda self : None;
mimo_pss_tagger_swigregister = _lte_swig.mimo_pss_tagger_swigregister
mimo_pss_tagger_swigregister(mimo_pss_tagger)

def mimo_pss_tagger_make(*args, **kwargs):
  """
    mimo_pss_tagger_make(int fftl) -> mimo_pss_tagger_sptr

    Return a shared_ptr to a new instance of lte::mimo_pss_tagger.

    To avoid accidental use of raw pointers, lte::mimo_pss_tagger's constructor is in a private implementation class. lte::mimo_pss_tagger::make is the public interface for creating new instances.

    Params: (fftl)
    """
  return _lte_swig.mimo_pss_tagger_make(*args, **kwargs)

class mimo_pss_tagger_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::mimo_pss_tagger)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::mimo_pss_tagger)> self) -> mimo_pss_tagger_sptr
        __init__(boost::shared_ptr<(gr::lte::mimo_pss_tagger)> self, mimo_pss_tagger p) -> mimo_pss_tagger_sptr
        """
        this = _lte_swig.new_mimo_pss_tagger_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mimo_pss_tagger_sptr self) -> mimo_pss_tagger"""
        return _lte_swig.mimo_pss_tagger_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_mimo_pss_tagger_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(mimo_pss_tagger_sptr self, int fftl) -> mimo_pss_tagger_sptr

        Return a shared_ptr to a new instance of lte::mimo_pss_tagger.

        To avoid accidental use of raw pointers, lte::mimo_pss_tagger's constructor is in a private implementation class. lte::mimo_pss_tagger::make is the public interface for creating new instances.

        Params: (fftl)
        """
        return _lte_swig.mimo_pss_tagger_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(mimo_pss_tagger_sptr self) -> unsigned int"""
        return _lte_swig.mimo_pss_tagger_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mimo_pss_tagger_sptr self, int which, int delay)
        declare_sample_delay(mimo_pss_tagger_sptr self, unsigned int delay)
        """
        return _lte_swig.mimo_pss_tagger_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mimo_pss_tagger_sptr self, int which) -> unsigned int"""
        return _lte_swig.mimo_pss_tagger_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mimo_pss_tagger_sptr self) -> int"""
        return _lte_swig.mimo_pss_tagger_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mimo_pss_tagger_sptr self) -> double"""
        return _lte_swig.mimo_pss_tagger_sptr_relative_rate(self)

    def start(self):
        """start(mimo_pss_tagger_sptr self) -> bool"""
        return _lte_swig.mimo_pss_tagger_sptr_start(self)

    def stop(self):
        """stop(mimo_pss_tagger_sptr self) -> bool"""
        return _lte_swig.mimo_pss_tagger_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mimo_pss_tagger_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.mimo_pss_tagger_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mimo_pss_tagger_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.mimo_pss_tagger_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mimo_pss_tagger_sptr self) -> int"""
        return _lte_swig.mimo_pss_tagger_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mimo_pss_tagger_sptr self, int m)"""
        return _lte_swig.mimo_pss_tagger_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mimo_pss_tagger_sptr self)"""
        return _lte_swig.mimo_pss_tagger_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mimo_pss_tagger_sptr self) -> bool"""
        return _lte_swig.mimo_pss_tagger_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mimo_pss_tagger_sptr self, int m)"""
        return _lte_swig.mimo_pss_tagger_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mimo_pss_tagger_sptr self) -> int"""
        return _lte_swig.mimo_pss_tagger_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mimo_pss_tagger_sptr self, int i) -> long"""
        return _lte_swig.mimo_pss_tagger_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mimo_pss_tagger_sptr self, long max_output_buffer)
        set_max_output_buffer(mimo_pss_tagger_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.mimo_pss_tagger_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mimo_pss_tagger_sptr self, int i) -> long"""
        return _lte_swig.mimo_pss_tagger_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mimo_pss_tagger_sptr self, long min_output_buffer)
        set_min_output_buffer(mimo_pss_tagger_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.mimo_pss_tagger_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mimo_pss_tagger_sptr self) -> float"""
        return _lte_swig.mimo_pss_tagger_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mimo_pss_tagger_sptr self) -> float"""
        return _lte_swig.mimo_pss_tagger_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mimo_pss_tagger_sptr self) -> float"""
        return _lte_swig.mimo_pss_tagger_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mimo_pss_tagger_sptr self) -> float"""
        return _lte_swig.mimo_pss_tagger_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mimo_pss_tagger_sptr self) -> float"""
        return _lte_swig.mimo_pss_tagger_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mimo_pss_tagger_sptr self) -> float"""
        return _lte_swig.mimo_pss_tagger_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mimo_pss_tagger_sptr self, int which) -> float
        pc_input_buffers_full(mimo_pss_tagger_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_tagger_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mimo_pss_tagger_sptr self, int which) -> float
        pc_input_buffers_full_avg(mimo_pss_tagger_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_tagger_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mimo_pss_tagger_sptr self, int which) -> float
        pc_input_buffers_full_var(mimo_pss_tagger_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_tagger_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mimo_pss_tagger_sptr self, int which) -> float
        pc_output_buffers_full(mimo_pss_tagger_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_tagger_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mimo_pss_tagger_sptr self, int which) -> float
        pc_output_buffers_full_avg(mimo_pss_tagger_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_tagger_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mimo_pss_tagger_sptr self, int which) -> float
        pc_output_buffers_full_var(mimo_pss_tagger_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_tagger_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mimo_pss_tagger_sptr self) -> float"""
        return _lte_swig.mimo_pss_tagger_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mimo_pss_tagger_sptr self) -> float"""
        return _lte_swig.mimo_pss_tagger_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mimo_pss_tagger_sptr self) -> float"""
        return _lte_swig.mimo_pss_tagger_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mimo_pss_tagger_sptr self) -> float"""
        return _lte_swig.mimo_pss_tagger_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mimo_pss_tagger_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.mimo_pss_tagger_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mimo_pss_tagger_sptr self)"""
        return _lte_swig.mimo_pss_tagger_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mimo_pss_tagger_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.mimo_pss_tagger_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mimo_pss_tagger_sptr self) -> int"""
        return _lte_swig.mimo_pss_tagger_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mimo_pss_tagger_sptr self) -> int"""
        return _lte_swig.mimo_pss_tagger_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mimo_pss_tagger_sptr self, int priority) -> int"""
        return _lte_swig.mimo_pss_tagger_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mimo_pss_tagger_sptr self) -> std::string"""
        return _lte_swig.mimo_pss_tagger_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mimo_pss_tagger_sptr self) -> std::string"""
        return _lte_swig.mimo_pss_tagger_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mimo_pss_tagger_sptr self) -> io_signature_sptr"""
        return _lte_swig.mimo_pss_tagger_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mimo_pss_tagger_sptr self) -> io_signature_sptr"""
        return _lte_swig.mimo_pss_tagger_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mimo_pss_tagger_sptr self) -> long"""
        return _lte_swig.mimo_pss_tagger_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mimo_pss_tagger_sptr self) -> basic_block_sptr"""
        return _lte_swig.mimo_pss_tagger_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mimo_pss_tagger_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.mimo_pss_tagger_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mimo_pss_tagger_sptr self) -> std::string"""
        return _lte_swig.mimo_pss_tagger_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mimo_pss_tagger_sptr self, std::string name)"""
        return _lte_swig.mimo_pss_tagger_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mimo_pss_tagger_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.mimo_pss_tagger_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mimo_pss_tagger_sptr self) -> swig_int_ptr"""
        return _lte_swig.mimo_pss_tagger_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mimo_pss_tagger_sptr self) -> swig_int_ptr"""
        return _lte_swig.mimo_pss_tagger_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mimo_pss_tagger_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.mimo_pss_tagger_sptr_message_subscribers(self, *args, **kwargs)

mimo_pss_tagger_sptr_swigregister = _lte_swig.mimo_pss_tagger_sptr_swigregister
mimo_pss_tagger_sptr_swigregister(mimo_pss_tagger_sptr)

mimo_pss_tagger_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mimo_pss_tagger = mimo_pss_tagger.make;

class mimo_pss_coarse_control(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> mimo_pss_coarse_control_sptr

        Return a shared_ptr to a new instance of lte::mimo_pss_coarse_control.

        To avoid accidental use of raw pointers, lte::mimo_pss_coarse_control's constructor is in a private implementation class. lte::mimo_pss_coarse_control::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _lte_swig.mimo_pss_coarse_control_make()

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_mimo_pss_coarse_control
    __del__ = lambda self : None;
mimo_pss_coarse_control_swigregister = _lte_swig.mimo_pss_coarse_control_swigregister
mimo_pss_coarse_control_swigregister(mimo_pss_coarse_control)

def mimo_pss_coarse_control_make():
  """
    mimo_pss_coarse_control_make() -> mimo_pss_coarse_control_sptr

    Return a shared_ptr to a new instance of lte::mimo_pss_coarse_control.

    To avoid accidental use of raw pointers, lte::mimo_pss_coarse_control's constructor is in a private implementation class. lte::mimo_pss_coarse_control::make is the public interface for creating new instances.

    Params: (NONE)
    """
  return _lte_swig.mimo_pss_coarse_control_make()

class mimo_pss_coarse_control_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::mimo_pss_coarse_control)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::mimo_pss_coarse_control)> self) -> mimo_pss_coarse_control_sptr
        __init__(boost::shared_ptr<(gr::lte::mimo_pss_coarse_control)> self, mimo_pss_coarse_control p) -> mimo_pss_coarse_control_sptr
        """
        this = _lte_swig.new_mimo_pss_coarse_control_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mimo_pss_coarse_control_sptr self) -> mimo_pss_coarse_control"""
        return _lte_swig.mimo_pss_coarse_control_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_mimo_pss_coarse_control_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(mimo_pss_coarse_control_sptr self) -> mimo_pss_coarse_control_sptr

        Return a shared_ptr to a new instance of lte::mimo_pss_coarse_control.

        To avoid accidental use of raw pointers, lte::mimo_pss_coarse_control's constructor is in a private implementation class. lte::mimo_pss_coarse_control::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _lte_swig.mimo_pss_coarse_control_sptr_make(self)

    def history(self):
        """history(mimo_pss_coarse_control_sptr self) -> unsigned int"""
        return _lte_swig.mimo_pss_coarse_control_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mimo_pss_coarse_control_sptr self, int which, int delay)
        declare_sample_delay(mimo_pss_coarse_control_sptr self, unsigned int delay)
        """
        return _lte_swig.mimo_pss_coarse_control_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mimo_pss_coarse_control_sptr self, int which) -> unsigned int"""
        return _lte_swig.mimo_pss_coarse_control_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mimo_pss_coarse_control_sptr self) -> int"""
        return _lte_swig.mimo_pss_coarse_control_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mimo_pss_coarse_control_sptr self) -> double"""
        return _lte_swig.mimo_pss_coarse_control_sptr_relative_rate(self)

    def start(self):
        """start(mimo_pss_coarse_control_sptr self) -> bool"""
        return _lte_swig.mimo_pss_coarse_control_sptr_start(self)

    def stop(self):
        """stop(mimo_pss_coarse_control_sptr self) -> bool"""
        return _lte_swig.mimo_pss_coarse_control_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mimo_pss_coarse_control_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.mimo_pss_coarse_control_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mimo_pss_coarse_control_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.mimo_pss_coarse_control_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mimo_pss_coarse_control_sptr self) -> int"""
        return _lte_swig.mimo_pss_coarse_control_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mimo_pss_coarse_control_sptr self, int m)"""
        return _lte_swig.mimo_pss_coarse_control_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mimo_pss_coarse_control_sptr self)"""
        return _lte_swig.mimo_pss_coarse_control_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mimo_pss_coarse_control_sptr self) -> bool"""
        return _lte_swig.mimo_pss_coarse_control_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mimo_pss_coarse_control_sptr self, int m)"""
        return _lte_swig.mimo_pss_coarse_control_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mimo_pss_coarse_control_sptr self) -> int"""
        return _lte_swig.mimo_pss_coarse_control_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mimo_pss_coarse_control_sptr self, int i) -> long"""
        return _lte_swig.mimo_pss_coarse_control_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mimo_pss_coarse_control_sptr self, long max_output_buffer)
        set_max_output_buffer(mimo_pss_coarse_control_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.mimo_pss_coarse_control_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mimo_pss_coarse_control_sptr self, int i) -> long"""
        return _lte_swig.mimo_pss_coarse_control_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mimo_pss_coarse_control_sptr self, long min_output_buffer)
        set_min_output_buffer(mimo_pss_coarse_control_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.mimo_pss_coarse_control_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mimo_pss_coarse_control_sptr self) -> float"""
        return _lte_swig.mimo_pss_coarse_control_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mimo_pss_coarse_control_sptr self) -> float"""
        return _lte_swig.mimo_pss_coarse_control_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mimo_pss_coarse_control_sptr self) -> float"""
        return _lte_swig.mimo_pss_coarse_control_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mimo_pss_coarse_control_sptr self) -> float"""
        return _lte_swig.mimo_pss_coarse_control_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mimo_pss_coarse_control_sptr self) -> float"""
        return _lte_swig.mimo_pss_coarse_control_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mimo_pss_coarse_control_sptr self) -> float"""
        return _lte_swig.mimo_pss_coarse_control_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mimo_pss_coarse_control_sptr self, int which) -> float
        pc_input_buffers_full(mimo_pss_coarse_control_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_coarse_control_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mimo_pss_coarse_control_sptr self, int which) -> float
        pc_input_buffers_full_avg(mimo_pss_coarse_control_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_coarse_control_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mimo_pss_coarse_control_sptr self, int which) -> float
        pc_input_buffers_full_var(mimo_pss_coarse_control_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_coarse_control_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mimo_pss_coarse_control_sptr self, int which) -> float
        pc_output_buffers_full(mimo_pss_coarse_control_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_coarse_control_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mimo_pss_coarse_control_sptr self, int which) -> float
        pc_output_buffers_full_avg(mimo_pss_coarse_control_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_coarse_control_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mimo_pss_coarse_control_sptr self, int which) -> float
        pc_output_buffers_full_var(mimo_pss_coarse_control_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_coarse_control_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mimo_pss_coarse_control_sptr self) -> float"""
        return _lte_swig.mimo_pss_coarse_control_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mimo_pss_coarse_control_sptr self) -> float"""
        return _lte_swig.mimo_pss_coarse_control_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mimo_pss_coarse_control_sptr self) -> float"""
        return _lte_swig.mimo_pss_coarse_control_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mimo_pss_coarse_control_sptr self) -> float"""
        return _lte_swig.mimo_pss_coarse_control_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mimo_pss_coarse_control_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.mimo_pss_coarse_control_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mimo_pss_coarse_control_sptr self)"""
        return _lte_swig.mimo_pss_coarse_control_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mimo_pss_coarse_control_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.mimo_pss_coarse_control_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mimo_pss_coarse_control_sptr self) -> int"""
        return _lte_swig.mimo_pss_coarse_control_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mimo_pss_coarse_control_sptr self) -> int"""
        return _lte_swig.mimo_pss_coarse_control_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mimo_pss_coarse_control_sptr self, int priority) -> int"""
        return _lte_swig.mimo_pss_coarse_control_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mimo_pss_coarse_control_sptr self) -> std::string"""
        return _lte_swig.mimo_pss_coarse_control_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mimo_pss_coarse_control_sptr self) -> std::string"""
        return _lte_swig.mimo_pss_coarse_control_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mimo_pss_coarse_control_sptr self) -> io_signature_sptr"""
        return _lte_swig.mimo_pss_coarse_control_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mimo_pss_coarse_control_sptr self) -> io_signature_sptr"""
        return _lte_swig.mimo_pss_coarse_control_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mimo_pss_coarse_control_sptr self) -> long"""
        return _lte_swig.mimo_pss_coarse_control_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mimo_pss_coarse_control_sptr self) -> basic_block_sptr"""
        return _lte_swig.mimo_pss_coarse_control_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mimo_pss_coarse_control_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.mimo_pss_coarse_control_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mimo_pss_coarse_control_sptr self) -> std::string"""
        return _lte_swig.mimo_pss_coarse_control_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mimo_pss_coarse_control_sptr self, std::string name)"""
        return _lte_swig.mimo_pss_coarse_control_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mimo_pss_coarse_control_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.mimo_pss_coarse_control_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mimo_pss_coarse_control_sptr self) -> swig_int_ptr"""
        return _lte_swig.mimo_pss_coarse_control_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mimo_pss_coarse_control_sptr self) -> swig_int_ptr"""
        return _lte_swig.mimo_pss_coarse_control_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mimo_pss_coarse_control_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.mimo_pss_coarse_control_sptr_message_subscribers(self, *args, **kwargs)

mimo_pss_coarse_control_sptr_swigregister = _lte_swig.mimo_pss_coarse_control_sptr_swigregister
mimo_pss_coarse_control_sptr_swigregister(mimo_pss_coarse_control_sptr)

mimo_pss_coarse_control_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mimo_pss_coarse_control = mimo_pss_coarse_control.make;

class pss(object):
    """helper class for pss blocks"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(gr::lte::pss self) -> pss

        Params: (NONE)
        """
        this = _lte_swig.new_pss()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lte_swig.delete_pss
    __del__ = lambda self : None;
    def gen_pss_t(*args, **kwargs):
        """
        gen_pss_t(gr_complex * zc_t, int cell_id, int len)

        Params: (zc_t, cell_id, len)
        """
        return _lte_swig.pss_gen_pss_t(*args, **kwargs)

    gen_pss_t = staticmethod(gen_pss_t)
    def gen_conj_pss_t(*args, **kwargs):
        """
        gen_conj_pss_t(gr_complex * zc_t, int cell_id, int len)

        Params: (zc_t, cell_id, len)
        """
        return _lte_swig.pss_gen_conj_pss_t(*args, **kwargs)

    gen_conj_pss_t = staticmethod(gen_conj_pss_t)
    def zc(*args, **kwargs):
        """
        zc(gr_complex * zc, int cell_id)

        Params: (zc, cell_id)
        """
        return _lte_swig.pss_zc(*args, **kwargs)

    zc = staticmethod(zc)
pss_swigregister = _lte_swig.pss_swigregister
pss_swigregister(pss)

def pss_gen_pss_t(*args, **kwargs):
  """
    pss_gen_pss_t(gr_complex * zc_t, int cell_id, int len)

    Params: (zc_t, cell_id, len)
    """
  return _lte_swig.pss_gen_pss_t(*args, **kwargs)

def pss_gen_conj_pss_t(*args, **kwargs):
  """
    pss_gen_conj_pss_t(gr_complex * zc_t, int cell_id, int len)

    Params: (zc_t, cell_id, len)
    """
  return _lte_swig.pss_gen_conj_pss_t(*args, **kwargs)

def pss_zc(*args, **kwargs):
  """
    pss_zc(gr_complex * zc, int cell_id)

    Params: (zc, cell_id)
    """
  return _lte_swig.pss_zc(*args, **kwargs)

class mimo_pss_freq_sync(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int fftl, int rxant, boost::shared_ptr< gr::analog::sig_source_c > & sig) -> mimo_pss_freq_sync_sptr

        Return a shared_ptr to a new instance of lte::mimo_pss_freq_sync.

        To avoid accidental use of raw pointers, lte::mimo_pss_freq_sync's constructor is in a private implementation class. lte::mimo_pss_freq_sync::make is the public interface for creating new instances.

        Params: (fftl, rxant, sig)
        """
        return _lte_swig.mimo_pss_freq_sync_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_mimo_pss_freq_sync
    __del__ = lambda self : None;
mimo_pss_freq_sync_swigregister = _lte_swig.mimo_pss_freq_sync_swigregister
mimo_pss_freq_sync_swigregister(mimo_pss_freq_sync)

def mimo_pss_freq_sync_make(*args, **kwargs):
  """
    mimo_pss_freq_sync_make(int fftl, int rxant, boost::shared_ptr< gr::analog::sig_source_c > & sig) -> mimo_pss_freq_sync_sptr

    Return a shared_ptr to a new instance of lte::mimo_pss_freq_sync.

    To avoid accidental use of raw pointers, lte::mimo_pss_freq_sync's constructor is in a private implementation class. lte::mimo_pss_freq_sync::make is the public interface for creating new instances.

    Params: (fftl, rxant, sig)
    """
  return _lte_swig.mimo_pss_freq_sync_make(*args, **kwargs)

class mimo_pss_freq_sync_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::mimo_pss_freq_sync)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::mimo_pss_freq_sync)> self) -> mimo_pss_freq_sync_sptr
        __init__(boost::shared_ptr<(gr::lte::mimo_pss_freq_sync)> self, mimo_pss_freq_sync p) -> mimo_pss_freq_sync_sptr
        """
        this = _lte_swig.new_mimo_pss_freq_sync_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mimo_pss_freq_sync_sptr self) -> mimo_pss_freq_sync"""
        return _lte_swig.mimo_pss_freq_sync_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_mimo_pss_freq_sync_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(mimo_pss_freq_sync_sptr self, int fftl, int rxant, boost::shared_ptr< gr::analog::sig_source_c > & sig) -> mimo_pss_freq_sync_sptr

        Return a shared_ptr to a new instance of lte::mimo_pss_freq_sync.

        To avoid accidental use of raw pointers, lte::mimo_pss_freq_sync's constructor is in a private implementation class. lte::mimo_pss_freq_sync::make is the public interface for creating new instances.

        Params: (fftl, rxant, sig)
        """
        return _lte_swig.mimo_pss_freq_sync_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(mimo_pss_freq_sync_sptr self) -> unsigned int"""
        return _lte_swig.mimo_pss_freq_sync_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mimo_pss_freq_sync_sptr self, int which, int delay)
        declare_sample_delay(mimo_pss_freq_sync_sptr self, unsigned int delay)
        """
        return _lte_swig.mimo_pss_freq_sync_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mimo_pss_freq_sync_sptr self, int which) -> unsigned int"""
        return _lte_swig.mimo_pss_freq_sync_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mimo_pss_freq_sync_sptr self) -> int"""
        return _lte_swig.mimo_pss_freq_sync_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mimo_pss_freq_sync_sptr self) -> double"""
        return _lte_swig.mimo_pss_freq_sync_sptr_relative_rate(self)

    def start(self):
        """start(mimo_pss_freq_sync_sptr self) -> bool"""
        return _lte_swig.mimo_pss_freq_sync_sptr_start(self)

    def stop(self):
        """stop(mimo_pss_freq_sync_sptr self) -> bool"""
        return _lte_swig.mimo_pss_freq_sync_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mimo_pss_freq_sync_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.mimo_pss_freq_sync_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mimo_pss_freq_sync_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.mimo_pss_freq_sync_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mimo_pss_freq_sync_sptr self) -> int"""
        return _lte_swig.mimo_pss_freq_sync_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mimo_pss_freq_sync_sptr self, int m)"""
        return _lte_swig.mimo_pss_freq_sync_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mimo_pss_freq_sync_sptr self)"""
        return _lte_swig.mimo_pss_freq_sync_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mimo_pss_freq_sync_sptr self) -> bool"""
        return _lte_swig.mimo_pss_freq_sync_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mimo_pss_freq_sync_sptr self, int m)"""
        return _lte_swig.mimo_pss_freq_sync_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mimo_pss_freq_sync_sptr self) -> int"""
        return _lte_swig.mimo_pss_freq_sync_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mimo_pss_freq_sync_sptr self, int i) -> long"""
        return _lte_swig.mimo_pss_freq_sync_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mimo_pss_freq_sync_sptr self, long max_output_buffer)
        set_max_output_buffer(mimo_pss_freq_sync_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.mimo_pss_freq_sync_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mimo_pss_freq_sync_sptr self, int i) -> long"""
        return _lte_swig.mimo_pss_freq_sync_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mimo_pss_freq_sync_sptr self, long min_output_buffer)
        set_min_output_buffer(mimo_pss_freq_sync_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.mimo_pss_freq_sync_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mimo_pss_freq_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_freq_sync_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mimo_pss_freq_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_freq_sync_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mimo_pss_freq_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_freq_sync_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mimo_pss_freq_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_freq_sync_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mimo_pss_freq_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_freq_sync_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mimo_pss_freq_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_freq_sync_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mimo_pss_freq_sync_sptr self, int which) -> float
        pc_input_buffers_full(mimo_pss_freq_sync_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_freq_sync_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mimo_pss_freq_sync_sptr self, int which) -> float
        pc_input_buffers_full_avg(mimo_pss_freq_sync_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_freq_sync_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mimo_pss_freq_sync_sptr self, int which) -> float
        pc_input_buffers_full_var(mimo_pss_freq_sync_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_freq_sync_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mimo_pss_freq_sync_sptr self, int which) -> float
        pc_output_buffers_full(mimo_pss_freq_sync_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_freq_sync_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mimo_pss_freq_sync_sptr self, int which) -> float
        pc_output_buffers_full_avg(mimo_pss_freq_sync_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_freq_sync_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mimo_pss_freq_sync_sptr self, int which) -> float
        pc_output_buffers_full_var(mimo_pss_freq_sync_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pss_freq_sync_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mimo_pss_freq_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_freq_sync_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mimo_pss_freq_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_freq_sync_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mimo_pss_freq_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_freq_sync_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mimo_pss_freq_sync_sptr self) -> float"""
        return _lte_swig.mimo_pss_freq_sync_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mimo_pss_freq_sync_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.mimo_pss_freq_sync_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mimo_pss_freq_sync_sptr self)"""
        return _lte_swig.mimo_pss_freq_sync_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mimo_pss_freq_sync_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.mimo_pss_freq_sync_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mimo_pss_freq_sync_sptr self) -> int"""
        return _lte_swig.mimo_pss_freq_sync_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mimo_pss_freq_sync_sptr self) -> int"""
        return _lte_swig.mimo_pss_freq_sync_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mimo_pss_freq_sync_sptr self, int priority) -> int"""
        return _lte_swig.mimo_pss_freq_sync_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mimo_pss_freq_sync_sptr self) -> std::string"""
        return _lte_swig.mimo_pss_freq_sync_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mimo_pss_freq_sync_sptr self) -> std::string"""
        return _lte_swig.mimo_pss_freq_sync_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mimo_pss_freq_sync_sptr self) -> io_signature_sptr"""
        return _lte_swig.mimo_pss_freq_sync_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mimo_pss_freq_sync_sptr self) -> io_signature_sptr"""
        return _lte_swig.mimo_pss_freq_sync_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mimo_pss_freq_sync_sptr self) -> long"""
        return _lte_swig.mimo_pss_freq_sync_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mimo_pss_freq_sync_sptr self) -> basic_block_sptr"""
        return _lte_swig.mimo_pss_freq_sync_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mimo_pss_freq_sync_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.mimo_pss_freq_sync_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mimo_pss_freq_sync_sptr self) -> std::string"""
        return _lte_swig.mimo_pss_freq_sync_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mimo_pss_freq_sync_sptr self, std::string name)"""
        return _lte_swig.mimo_pss_freq_sync_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mimo_pss_freq_sync_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.mimo_pss_freq_sync_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mimo_pss_freq_sync_sptr self) -> swig_int_ptr"""
        return _lte_swig.mimo_pss_freq_sync_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mimo_pss_freq_sync_sptr self) -> swig_int_ptr"""
        return _lte_swig.mimo_pss_freq_sync_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mimo_pss_freq_sync_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.mimo_pss_freq_sync_sptr_message_subscribers(self, *args, **kwargs)

mimo_pss_freq_sync_sptr_swigregister = _lte_swig.mimo_pss_freq_sync_sptr_swigregister
mimo_pss_freq_sync_sptr_swigregister(mimo_pss_freq_sync_sptr)

mimo_pss_freq_sync_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mimo_pss_freq_sync = mimo_pss_freq_sync.make;

class mimo_sss_symbol_selector(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int rxant, int n_rb_dl) -> mimo_sss_symbol_selector_sptr

        Return a shared_ptr to a new instance of lte::mimo_sss_symbol_selector.

        To avoid accidental use of raw pointers, lte::mimo_sss_symbol_selector's constructor is in a private implementation class. lte::mimo_sss_symbol_selector::make is the public interface for creating new instances.

        Params: (rxant, n_rb_dl)
        """
        return _lte_swig.mimo_sss_symbol_selector_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_mimo_sss_symbol_selector
    __del__ = lambda self : None;
mimo_sss_symbol_selector_swigregister = _lte_swig.mimo_sss_symbol_selector_swigregister
mimo_sss_symbol_selector_swigregister(mimo_sss_symbol_selector)

def mimo_sss_symbol_selector_make(*args, **kwargs):
  """
    mimo_sss_symbol_selector_make(int rxant, int n_rb_dl) -> mimo_sss_symbol_selector_sptr

    Return a shared_ptr to a new instance of lte::mimo_sss_symbol_selector.

    To avoid accidental use of raw pointers, lte::mimo_sss_symbol_selector's constructor is in a private implementation class. lte::mimo_sss_symbol_selector::make is the public interface for creating new instances.

    Params: (rxant, n_rb_dl)
    """
  return _lte_swig.mimo_sss_symbol_selector_make(*args, **kwargs)

class mimo_sss_symbol_selector_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::mimo_sss_symbol_selector)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::mimo_sss_symbol_selector)> self) -> mimo_sss_symbol_selector_sptr
        __init__(boost::shared_ptr<(gr::lte::mimo_sss_symbol_selector)> self, mimo_sss_symbol_selector p) -> mimo_sss_symbol_selector_sptr
        """
        this = _lte_swig.new_mimo_sss_symbol_selector_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mimo_sss_symbol_selector_sptr self) -> mimo_sss_symbol_selector"""
        return _lte_swig.mimo_sss_symbol_selector_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_mimo_sss_symbol_selector_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(mimo_sss_symbol_selector_sptr self, int rxant, int n_rb_dl) -> mimo_sss_symbol_selector_sptr

        Return a shared_ptr to a new instance of lte::mimo_sss_symbol_selector.

        To avoid accidental use of raw pointers, lte::mimo_sss_symbol_selector's constructor is in a private implementation class. lte::mimo_sss_symbol_selector::make is the public interface for creating new instances.

        Params: (rxant, n_rb_dl)
        """
        return _lte_swig.mimo_sss_symbol_selector_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(mimo_sss_symbol_selector_sptr self) -> unsigned int"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mimo_sss_symbol_selector_sptr self, int which, int delay)
        declare_sample_delay(mimo_sss_symbol_selector_sptr self, unsigned int delay)
        """
        return _lte_swig.mimo_sss_symbol_selector_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mimo_sss_symbol_selector_sptr self, int which) -> unsigned int"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mimo_sss_symbol_selector_sptr self) -> int"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mimo_sss_symbol_selector_sptr self) -> double"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_relative_rate(self)

    def start(self):
        """start(mimo_sss_symbol_selector_sptr self) -> bool"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_start(self)

    def stop(self):
        """stop(mimo_sss_symbol_selector_sptr self) -> bool"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mimo_sss_symbol_selector_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mimo_sss_symbol_selector_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mimo_sss_symbol_selector_sptr self) -> int"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mimo_sss_symbol_selector_sptr self, int m)"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mimo_sss_symbol_selector_sptr self)"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mimo_sss_symbol_selector_sptr self) -> bool"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mimo_sss_symbol_selector_sptr self, int m)"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mimo_sss_symbol_selector_sptr self) -> int"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mimo_sss_symbol_selector_sptr self, int i) -> long"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mimo_sss_symbol_selector_sptr self, long max_output_buffer)
        set_max_output_buffer(mimo_sss_symbol_selector_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.mimo_sss_symbol_selector_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mimo_sss_symbol_selector_sptr self, int i) -> long"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mimo_sss_symbol_selector_sptr self, long min_output_buffer)
        set_min_output_buffer(mimo_sss_symbol_selector_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.mimo_sss_symbol_selector_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mimo_sss_symbol_selector_sptr self) -> float"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mimo_sss_symbol_selector_sptr self) -> float"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mimo_sss_symbol_selector_sptr self) -> float"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mimo_sss_symbol_selector_sptr self) -> float"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mimo_sss_symbol_selector_sptr self) -> float"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mimo_sss_symbol_selector_sptr self) -> float"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mimo_sss_symbol_selector_sptr self, int which) -> float
        pc_input_buffers_full(mimo_sss_symbol_selector_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_sss_symbol_selector_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mimo_sss_symbol_selector_sptr self, int which) -> float
        pc_input_buffers_full_avg(mimo_sss_symbol_selector_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_sss_symbol_selector_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mimo_sss_symbol_selector_sptr self, int which) -> float
        pc_input_buffers_full_var(mimo_sss_symbol_selector_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_sss_symbol_selector_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mimo_sss_symbol_selector_sptr self, int which) -> float
        pc_output_buffers_full(mimo_sss_symbol_selector_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_sss_symbol_selector_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mimo_sss_symbol_selector_sptr self, int which) -> float
        pc_output_buffers_full_avg(mimo_sss_symbol_selector_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_sss_symbol_selector_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mimo_sss_symbol_selector_sptr self, int which) -> float
        pc_output_buffers_full_var(mimo_sss_symbol_selector_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_sss_symbol_selector_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mimo_sss_symbol_selector_sptr self) -> float"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mimo_sss_symbol_selector_sptr self) -> float"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mimo_sss_symbol_selector_sptr self) -> float"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mimo_sss_symbol_selector_sptr self) -> float"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mimo_sss_symbol_selector_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mimo_sss_symbol_selector_sptr self)"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mimo_sss_symbol_selector_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mimo_sss_symbol_selector_sptr self) -> int"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mimo_sss_symbol_selector_sptr self) -> int"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mimo_sss_symbol_selector_sptr self, int priority) -> int"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mimo_sss_symbol_selector_sptr self) -> std::string"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mimo_sss_symbol_selector_sptr self) -> std::string"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mimo_sss_symbol_selector_sptr self) -> io_signature_sptr"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mimo_sss_symbol_selector_sptr self) -> io_signature_sptr"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mimo_sss_symbol_selector_sptr self) -> long"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mimo_sss_symbol_selector_sptr self) -> basic_block_sptr"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mimo_sss_symbol_selector_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mimo_sss_symbol_selector_sptr self) -> std::string"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mimo_sss_symbol_selector_sptr self, std::string name)"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mimo_sss_symbol_selector_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.mimo_sss_symbol_selector_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mimo_sss_symbol_selector_sptr self) -> swig_int_ptr"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mimo_sss_symbol_selector_sptr self) -> swig_int_ptr"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mimo_sss_symbol_selector_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.mimo_sss_symbol_selector_sptr_message_subscribers(self, *args, **kwargs)

mimo_sss_symbol_selector_sptr_swigregister = _lte_swig.mimo_sss_symbol_selector_sptr_swigregister
mimo_sss_symbol_selector_sptr_swigregister(mimo_sss_symbol_selector_sptr)

mimo_sss_symbol_selector_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mimo_sss_symbol_selector = mimo_sss_symbol_selector.make;

class mimo_sss_calculator(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int rxant) -> mimo_sss_calculator_sptr

        Return a shared_ptr to a new instance of lte::mimo_sss_calculator.

        To avoid accidental use of raw pointers, lte::mimo_sss_calculator's constructor is in a private implementation class. lte::mimo_sss_calculator::make is the public interface for creating new instances.

        Params: (rxant)
        """
        return _lte_swig.mimo_sss_calculator_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_mimo_sss_calculator
    __del__ = lambda self : None;
mimo_sss_calculator_swigregister = _lte_swig.mimo_sss_calculator_swigregister
mimo_sss_calculator_swigregister(mimo_sss_calculator)

def mimo_sss_calculator_make(*args, **kwargs):
  """
    mimo_sss_calculator_make(int rxant) -> mimo_sss_calculator_sptr

    Return a shared_ptr to a new instance of lte::mimo_sss_calculator.

    To avoid accidental use of raw pointers, lte::mimo_sss_calculator's constructor is in a private implementation class. lte::mimo_sss_calculator::make is the public interface for creating new instances.

    Params: (rxant)
    """
  return _lte_swig.mimo_sss_calculator_make(*args, **kwargs)

class mimo_sss_calculator_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::mimo_sss_calculator)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::mimo_sss_calculator)> self) -> mimo_sss_calculator_sptr
        __init__(boost::shared_ptr<(gr::lte::mimo_sss_calculator)> self, mimo_sss_calculator p) -> mimo_sss_calculator_sptr
        """
        this = _lte_swig.new_mimo_sss_calculator_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mimo_sss_calculator_sptr self) -> mimo_sss_calculator"""
        return _lte_swig.mimo_sss_calculator_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_mimo_sss_calculator_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(mimo_sss_calculator_sptr self, int rxant) -> mimo_sss_calculator_sptr

        Return a shared_ptr to a new instance of lte::mimo_sss_calculator.

        To avoid accidental use of raw pointers, lte::mimo_sss_calculator's constructor is in a private implementation class. lte::mimo_sss_calculator::make is the public interface for creating new instances.

        Params: (rxant)
        """
        return _lte_swig.mimo_sss_calculator_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(mimo_sss_calculator_sptr self) -> unsigned int"""
        return _lte_swig.mimo_sss_calculator_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mimo_sss_calculator_sptr self, int which, int delay)
        declare_sample_delay(mimo_sss_calculator_sptr self, unsigned int delay)
        """
        return _lte_swig.mimo_sss_calculator_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mimo_sss_calculator_sptr self, int which) -> unsigned int"""
        return _lte_swig.mimo_sss_calculator_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mimo_sss_calculator_sptr self) -> int"""
        return _lte_swig.mimo_sss_calculator_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mimo_sss_calculator_sptr self) -> double"""
        return _lte_swig.mimo_sss_calculator_sptr_relative_rate(self)

    def start(self):
        """start(mimo_sss_calculator_sptr self) -> bool"""
        return _lte_swig.mimo_sss_calculator_sptr_start(self)

    def stop(self):
        """stop(mimo_sss_calculator_sptr self) -> bool"""
        return _lte_swig.mimo_sss_calculator_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mimo_sss_calculator_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.mimo_sss_calculator_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mimo_sss_calculator_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.mimo_sss_calculator_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mimo_sss_calculator_sptr self) -> int"""
        return _lte_swig.mimo_sss_calculator_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mimo_sss_calculator_sptr self, int m)"""
        return _lte_swig.mimo_sss_calculator_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mimo_sss_calculator_sptr self)"""
        return _lte_swig.mimo_sss_calculator_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mimo_sss_calculator_sptr self) -> bool"""
        return _lte_swig.mimo_sss_calculator_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mimo_sss_calculator_sptr self, int m)"""
        return _lte_swig.mimo_sss_calculator_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mimo_sss_calculator_sptr self) -> int"""
        return _lte_swig.mimo_sss_calculator_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mimo_sss_calculator_sptr self, int i) -> long"""
        return _lte_swig.mimo_sss_calculator_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mimo_sss_calculator_sptr self, long max_output_buffer)
        set_max_output_buffer(mimo_sss_calculator_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.mimo_sss_calculator_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mimo_sss_calculator_sptr self, int i) -> long"""
        return _lte_swig.mimo_sss_calculator_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mimo_sss_calculator_sptr self, long min_output_buffer)
        set_min_output_buffer(mimo_sss_calculator_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.mimo_sss_calculator_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mimo_sss_calculator_sptr self) -> float"""
        return _lte_swig.mimo_sss_calculator_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mimo_sss_calculator_sptr self) -> float"""
        return _lte_swig.mimo_sss_calculator_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mimo_sss_calculator_sptr self) -> float"""
        return _lte_swig.mimo_sss_calculator_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mimo_sss_calculator_sptr self) -> float"""
        return _lte_swig.mimo_sss_calculator_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mimo_sss_calculator_sptr self) -> float"""
        return _lte_swig.mimo_sss_calculator_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mimo_sss_calculator_sptr self) -> float"""
        return _lte_swig.mimo_sss_calculator_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mimo_sss_calculator_sptr self, int which) -> float
        pc_input_buffers_full(mimo_sss_calculator_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_sss_calculator_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mimo_sss_calculator_sptr self, int which) -> float
        pc_input_buffers_full_avg(mimo_sss_calculator_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_sss_calculator_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mimo_sss_calculator_sptr self, int which) -> float
        pc_input_buffers_full_var(mimo_sss_calculator_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_sss_calculator_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mimo_sss_calculator_sptr self, int which) -> float
        pc_output_buffers_full(mimo_sss_calculator_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_sss_calculator_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mimo_sss_calculator_sptr self, int which) -> float
        pc_output_buffers_full_avg(mimo_sss_calculator_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_sss_calculator_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mimo_sss_calculator_sptr self, int which) -> float
        pc_output_buffers_full_var(mimo_sss_calculator_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_sss_calculator_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mimo_sss_calculator_sptr self) -> float"""
        return _lte_swig.mimo_sss_calculator_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mimo_sss_calculator_sptr self) -> float"""
        return _lte_swig.mimo_sss_calculator_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mimo_sss_calculator_sptr self) -> float"""
        return _lte_swig.mimo_sss_calculator_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mimo_sss_calculator_sptr self) -> float"""
        return _lte_swig.mimo_sss_calculator_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mimo_sss_calculator_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.mimo_sss_calculator_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mimo_sss_calculator_sptr self)"""
        return _lte_swig.mimo_sss_calculator_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mimo_sss_calculator_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.mimo_sss_calculator_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mimo_sss_calculator_sptr self) -> int"""
        return _lte_swig.mimo_sss_calculator_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mimo_sss_calculator_sptr self) -> int"""
        return _lte_swig.mimo_sss_calculator_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mimo_sss_calculator_sptr self, int priority) -> int"""
        return _lte_swig.mimo_sss_calculator_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mimo_sss_calculator_sptr self) -> std::string"""
        return _lte_swig.mimo_sss_calculator_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mimo_sss_calculator_sptr self) -> std::string"""
        return _lte_swig.mimo_sss_calculator_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mimo_sss_calculator_sptr self) -> io_signature_sptr"""
        return _lte_swig.mimo_sss_calculator_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mimo_sss_calculator_sptr self) -> io_signature_sptr"""
        return _lte_swig.mimo_sss_calculator_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mimo_sss_calculator_sptr self) -> long"""
        return _lte_swig.mimo_sss_calculator_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mimo_sss_calculator_sptr self) -> basic_block_sptr"""
        return _lte_swig.mimo_sss_calculator_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mimo_sss_calculator_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.mimo_sss_calculator_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mimo_sss_calculator_sptr self) -> std::string"""
        return _lte_swig.mimo_sss_calculator_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mimo_sss_calculator_sptr self, std::string name)"""
        return _lte_swig.mimo_sss_calculator_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mimo_sss_calculator_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.mimo_sss_calculator_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mimo_sss_calculator_sptr self) -> swig_int_ptr"""
        return _lte_swig.mimo_sss_calculator_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mimo_sss_calculator_sptr self) -> swig_int_ptr"""
        return _lte_swig.mimo_sss_calculator_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mimo_sss_calculator_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.mimo_sss_calculator_sptr_message_subscribers(self, *args, **kwargs)

mimo_sss_calculator_sptr_swigregister = _lte_swig.mimo_sss_calculator_sptr_swigregister
mimo_sss_calculator_sptr_swigregister(mimo_sss_calculator_sptr)

mimo_sss_calculator_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mimo_sss_calculator = mimo_sss_calculator.make;

class mimo_sss_tagger(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int rxant, int n_rb_dl) -> mimo_sss_tagger_sptr

        Return a shared_ptr to a new instance of lte::mimo_sss_tagger.

        To avoid accidental use of raw pointers, lte::mimo_sss_tagger's constructor is in a private implementation class. lte::mimo_sss_tagger::make is the public interface for creating new instances.

        Params: (rxant, n_rb_dl)
        """
        return _lte_swig.mimo_sss_tagger_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_mimo_sss_tagger
    __del__ = lambda self : None;
mimo_sss_tagger_swigregister = _lte_swig.mimo_sss_tagger_swigregister
mimo_sss_tagger_swigregister(mimo_sss_tagger)

def mimo_sss_tagger_make(*args, **kwargs):
  """
    mimo_sss_tagger_make(int rxant, int n_rb_dl) -> mimo_sss_tagger_sptr

    Return a shared_ptr to a new instance of lte::mimo_sss_tagger.

    To avoid accidental use of raw pointers, lte::mimo_sss_tagger's constructor is in a private implementation class. lte::mimo_sss_tagger::make is the public interface for creating new instances.

    Params: (rxant, n_rb_dl)
    """
  return _lte_swig.mimo_sss_tagger_make(*args, **kwargs)

class mimo_sss_tagger_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::mimo_sss_tagger)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::mimo_sss_tagger)> self) -> mimo_sss_tagger_sptr
        __init__(boost::shared_ptr<(gr::lte::mimo_sss_tagger)> self, mimo_sss_tagger p) -> mimo_sss_tagger_sptr
        """
        this = _lte_swig.new_mimo_sss_tagger_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mimo_sss_tagger_sptr self) -> mimo_sss_tagger"""
        return _lte_swig.mimo_sss_tagger_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_mimo_sss_tagger_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(mimo_sss_tagger_sptr self, int rxant, int n_rb_dl) -> mimo_sss_tagger_sptr

        Return a shared_ptr to a new instance of lte::mimo_sss_tagger.

        To avoid accidental use of raw pointers, lte::mimo_sss_tagger's constructor is in a private implementation class. lte::mimo_sss_tagger::make is the public interface for creating new instances.

        Params: (rxant, n_rb_dl)
        """
        return _lte_swig.mimo_sss_tagger_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(mimo_sss_tagger_sptr self) -> unsigned int"""
        return _lte_swig.mimo_sss_tagger_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mimo_sss_tagger_sptr self, int which, int delay)
        declare_sample_delay(mimo_sss_tagger_sptr self, unsigned int delay)
        """
        return _lte_swig.mimo_sss_tagger_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mimo_sss_tagger_sptr self, int which) -> unsigned int"""
        return _lte_swig.mimo_sss_tagger_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mimo_sss_tagger_sptr self) -> int"""
        return _lte_swig.mimo_sss_tagger_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mimo_sss_tagger_sptr self) -> double"""
        return _lte_swig.mimo_sss_tagger_sptr_relative_rate(self)

    def start(self):
        """start(mimo_sss_tagger_sptr self) -> bool"""
        return _lte_swig.mimo_sss_tagger_sptr_start(self)

    def stop(self):
        """stop(mimo_sss_tagger_sptr self) -> bool"""
        return _lte_swig.mimo_sss_tagger_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mimo_sss_tagger_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.mimo_sss_tagger_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mimo_sss_tagger_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.mimo_sss_tagger_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mimo_sss_tagger_sptr self) -> int"""
        return _lte_swig.mimo_sss_tagger_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mimo_sss_tagger_sptr self, int m)"""
        return _lte_swig.mimo_sss_tagger_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mimo_sss_tagger_sptr self)"""
        return _lte_swig.mimo_sss_tagger_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mimo_sss_tagger_sptr self) -> bool"""
        return _lte_swig.mimo_sss_tagger_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mimo_sss_tagger_sptr self, int m)"""
        return _lte_swig.mimo_sss_tagger_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mimo_sss_tagger_sptr self) -> int"""
        return _lte_swig.mimo_sss_tagger_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mimo_sss_tagger_sptr self, int i) -> long"""
        return _lte_swig.mimo_sss_tagger_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mimo_sss_tagger_sptr self, long max_output_buffer)
        set_max_output_buffer(mimo_sss_tagger_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.mimo_sss_tagger_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mimo_sss_tagger_sptr self, int i) -> long"""
        return _lte_swig.mimo_sss_tagger_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mimo_sss_tagger_sptr self, long min_output_buffer)
        set_min_output_buffer(mimo_sss_tagger_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.mimo_sss_tagger_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mimo_sss_tagger_sptr self) -> float"""
        return _lte_swig.mimo_sss_tagger_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mimo_sss_tagger_sptr self) -> float"""
        return _lte_swig.mimo_sss_tagger_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mimo_sss_tagger_sptr self) -> float"""
        return _lte_swig.mimo_sss_tagger_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mimo_sss_tagger_sptr self) -> float"""
        return _lte_swig.mimo_sss_tagger_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mimo_sss_tagger_sptr self) -> float"""
        return _lte_swig.mimo_sss_tagger_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mimo_sss_tagger_sptr self) -> float"""
        return _lte_swig.mimo_sss_tagger_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mimo_sss_tagger_sptr self, int which) -> float
        pc_input_buffers_full(mimo_sss_tagger_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_sss_tagger_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mimo_sss_tagger_sptr self, int which) -> float
        pc_input_buffers_full_avg(mimo_sss_tagger_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_sss_tagger_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mimo_sss_tagger_sptr self, int which) -> float
        pc_input_buffers_full_var(mimo_sss_tagger_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_sss_tagger_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mimo_sss_tagger_sptr self, int which) -> float
        pc_output_buffers_full(mimo_sss_tagger_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_sss_tagger_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mimo_sss_tagger_sptr self, int which) -> float
        pc_output_buffers_full_avg(mimo_sss_tagger_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_sss_tagger_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mimo_sss_tagger_sptr self, int which) -> float
        pc_output_buffers_full_var(mimo_sss_tagger_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_sss_tagger_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mimo_sss_tagger_sptr self) -> float"""
        return _lte_swig.mimo_sss_tagger_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mimo_sss_tagger_sptr self) -> float"""
        return _lte_swig.mimo_sss_tagger_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mimo_sss_tagger_sptr self) -> float"""
        return _lte_swig.mimo_sss_tagger_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mimo_sss_tagger_sptr self) -> float"""
        return _lte_swig.mimo_sss_tagger_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mimo_sss_tagger_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.mimo_sss_tagger_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mimo_sss_tagger_sptr self)"""
        return _lte_swig.mimo_sss_tagger_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mimo_sss_tagger_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.mimo_sss_tagger_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mimo_sss_tagger_sptr self) -> int"""
        return _lte_swig.mimo_sss_tagger_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mimo_sss_tagger_sptr self) -> int"""
        return _lte_swig.mimo_sss_tagger_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mimo_sss_tagger_sptr self, int priority) -> int"""
        return _lte_swig.mimo_sss_tagger_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mimo_sss_tagger_sptr self) -> std::string"""
        return _lte_swig.mimo_sss_tagger_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mimo_sss_tagger_sptr self) -> std::string"""
        return _lte_swig.mimo_sss_tagger_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mimo_sss_tagger_sptr self) -> io_signature_sptr"""
        return _lte_swig.mimo_sss_tagger_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mimo_sss_tagger_sptr self) -> io_signature_sptr"""
        return _lte_swig.mimo_sss_tagger_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mimo_sss_tagger_sptr self) -> long"""
        return _lte_swig.mimo_sss_tagger_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mimo_sss_tagger_sptr self) -> basic_block_sptr"""
        return _lte_swig.mimo_sss_tagger_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mimo_sss_tagger_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.mimo_sss_tagger_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mimo_sss_tagger_sptr self) -> std::string"""
        return _lte_swig.mimo_sss_tagger_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mimo_sss_tagger_sptr self, std::string name)"""
        return _lte_swig.mimo_sss_tagger_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mimo_sss_tagger_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.mimo_sss_tagger_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mimo_sss_tagger_sptr self) -> swig_int_ptr"""
        return _lte_swig.mimo_sss_tagger_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mimo_sss_tagger_sptr self) -> swig_int_ptr"""
        return _lte_swig.mimo_sss_tagger_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mimo_sss_tagger_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.mimo_sss_tagger_sptr_message_subscribers(self, *args, **kwargs)

mimo_sss_tagger_sptr_swigregister = _lte_swig.mimo_sss_tagger_sptr_swigregister
mimo_sss_tagger_sptr_swigregister(mimo_sss_tagger_sptr)

mimo_sss_tagger_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mimo_sss_tagger = mimo_sss_tagger.make;

class mimo_remove_cp(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int fflt, int rxant, std::string key) -> mimo_remove_cp_sptr

        Return a shared_ptr to a new instance of lte::mimo_remove_cp.

        To avoid accidental use of raw pointers, lte::mimo_remove_cp's constructor is in a private implementation class. lte::mimo_remove_cp::make is the public interface for creating new instances.

        Params: (fflt, rxant, key)
        """
        return _lte_swig.mimo_remove_cp_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_mimo_remove_cp
    __del__ = lambda self : None;
mimo_remove_cp_swigregister = _lte_swig.mimo_remove_cp_swigregister
mimo_remove_cp_swigregister(mimo_remove_cp)

def mimo_remove_cp_make(*args, **kwargs):
  """
    mimo_remove_cp_make(int fflt, int rxant, std::string key) -> mimo_remove_cp_sptr

    Return a shared_ptr to a new instance of lte::mimo_remove_cp.

    To avoid accidental use of raw pointers, lte::mimo_remove_cp's constructor is in a private implementation class. lte::mimo_remove_cp::make is the public interface for creating new instances.

    Params: (fflt, rxant, key)
    """
  return _lte_swig.mimo_remove_cp_make(*args, **kwargs)

class mimo_remove_cp_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::mimo_remove_cp)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::mimo_remove_cp)> self) -> mimo_remove_cp_sptr
        __init__(boost::shared_ptr<(gr::lte::mimo_remove_cp)> self, mimo_remove_cp p) -> mimo_remove_cp_sptr
        """
        this = _lte_swig.new_mimo_remove_cp_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mimo_remove_cp_sptr self) -> mimo_remove_cp"""
        return _lte_swig.mimo_remove_cp_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_mimo_remove_cp_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(mimo_remove_cp_sptr self, int fflt, int rxant, std::string key) -> mimo_remove_cp_sptr

        Return a shared_ptr to a new instance of lte::mimo_remove_cp.

        To avoid accidental use of raw pointers, lte::mimo_remove_cp's constructor is in a private implementation class. lte::mimo_remove_cp::make is the public interface for creating new instances.

        Params: (fflt, rxant, key)
        """
        return _lte_swig.mimo_remove_cp_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(mimo_remove_cp_sptr self) -> unsigned int"""
        return _lte_swig.mimo_remove_cp_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mimo_remove_cp_sptr self, int which, int delay)
        declare_sample_delay(mimo_remove_cp_sptr self, unsigned int delay)
        """
        return _lte_swig.mimo_remove_cp_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mimo_remove_cp_sptr self, int which) -> unsigned int"""
        return _lte_swig.mimo_remove_cp_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mimo_remove_cp_sptr self) -> int"""
        return _lte_swig.mimo_remove_cp_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mimo_remove_cp_sptr self) -> double"""
        return _lte_swig.mimo_remove_cp_sptr_relative_rate(self)

    def start(self):
        """start(mimo_remove_cp_sptr self) -> bool"""
        return _lte_swig.mimo_remove_cp_sptr_start(self)

    def stop(self):
        """stop(mimo_remove_cp_sptr self) -> bool"""
        return _lte_swig.mimo_remove_cp_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mimo_remove_cp_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.mimo_remove_cp_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mimo_remove_cp_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.mimo_remove_cp_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mimo_remove_cp_sptr self) -> int"""
        return _lte_swig.mimo_remove_cp_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mimo_remove_cp_sptr self, int m)"""
        return _lte_swig.mimo_remove_cp_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mimo_remove_cp_sptr self)"""
        return _lte_swig.mimo_remove_cp_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mimo_remove_cp_sptr self) -> bool"""
        return _lte_swig.mimo_remove_cp_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mimo_remove_cp_sptr self, int m)"""
        return _lte_swig.mimo_remove_cp_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mimo_remove_cp_sptr self) -> int"""
        return _lte_swig.mimo_remove_cp_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mimo_remove_cp_sptr self, int i) -> long"""
        return _lte_swig.mimo_remove_cp_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mimo_remove_cp_sptr self, long max_output_buffer)
        set_max_output_buffer(mimo_remove_cp_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.mimo_remove_cp_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mimo_remove_cp_sptr self, int i) -> long"""
        return _lte_swig.mimo_remove_cp_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mimo_remove_cp_sptr self, long min_output_buffer)
        set_min_output_buffer(mimo_remove_cp_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.mimo_remove_cp_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mimo_remove_cp_sptr self) -> float"""
        return _lte_swig.mimo_remove_cp_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mimo_remove_cp_sptr self) -> float"""
        return _lte_swig.mimo_remove_cp_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mimo_remove_cp_sptr self) -> float"""
        return _lte_swig.mimo_remove_cp_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mimo_remove_cp_sptr self) -> float"""
        return _lte_swig.mimo_remove_cp_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mimo_remove_cp_sptr self) -> float"""
        return _lte_swig.mimo_remove_cp_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mimo_remove_cp_sptr self) -> float"""
        return _lte_swig.mimo_remove_cp_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mimo_remove_cp_sptr self, int which) -> float
        pc_input_buffers_full(mimo_remove_cp_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_remove_cp_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mimo_remove_cp_sptr self, int which) -> float
        pc_input_buffers_full_avg(mimo_remove_cp_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_remove_cp_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mimo_remove_cp_sptr self, int which) -> float
        pc_input_buffers_full_var(mimo_remove_cp_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_remove_cp_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mimo_remove_cp_sptr self, int which) -> float
        pc_output_buffers_full(mimo_remove_cp_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_remove_cp_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mimo_remove_cp_sptr self, int which) -> float
        pc_output_buffers_full_avg(mimo_remove_cp_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_remove_cp_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mimo_remove_cp_sptr self, int which) -> float
        pc_output_buffers_full_var(mimo_remove_cp_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_remove_cp_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mimo_remove_cp_sptr self) -> float"""
        return _lte_swig.mimo_remove_cp_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mimo_remove_cp_sptr self) -> float"""
        return _lte_swig.mimo_remove_cp_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mimo_remove_cp_sptr self) -> float"""
        return _lte_swig.mimo_remove_cp_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mimo_remove_cp_sptr self) -> float"""
        return _lte_swig.mimo_remove_cp_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mimo_remove_cp_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.mimo_remove_cp_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mimo_remove_cp_sptr self)"""
        return _lte_swig.mimo_remove_cp_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mimo_remove_cp_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.mimo_remove_cp_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mimo_remove_cp_sptr self) -> int"""
        return _lte_swig.mimo_remove_cp_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mimo_remove_cp_sptr self) -> int"""
        return _lte_swig.mimo_remove_cp_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mimo_remove_cp_sptr self, int priority) -> int"""
        return _lte_swig.mimo_remove_cp_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mimo_remove_cp_sptr self) -> std::string"""
        return _lte_swig.mimo_remove_cp_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mimo_remove_cp_sptr self) -> std::string"""
        return _lte_swig.mimo_remove_cp_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mimo_remove_cp_sptr self) -> io_signature_sptr"""
        return _lte_swig.mimo_remove_cp_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mimo_remove_cp_sptr self) -> io_signature_sptr"""
        return _lte_swig.mimo_remove_cp_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mimo_remove_cp_sptr self) -> long"""
        return _lte_swig.mimo_remove_cp_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mimo_remove_cp_sptr self) -> basic_block_sptr"""
        return _lte_swig.mimo_remove_cp_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mimo_remove_cp_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.mimo_remove_cp_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mimo_remove_cp_sptr self) -> std::string"""
        return _lte_swig.mimo_remove_cp_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mimo_remove_cp_sptr self, std::string name)"""
        return _lte_swig.mimo_remove_cp_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mimo_remove_cp_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.mimo_remove_cp_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mimo_remove_cp_sptr self) -> swig_int_ptr"""
        return _lte_swig.mimo_remove_cp_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mimo_remove_cp_sptr self) -> swig_int_ptr"""
        return _lte_swig.mimo_remove_cp_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mimo_remove_cp_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.mimo_remove_cp_sptr_message_subscribers(self, *args, **kwargs)

mimo_remove_cp_sptr_swigregister = _lte_swig.mimo_remove_cp_sptr_swigregister
mimo_remove_cp_sptr_swigregister(mimo_remove_cp_sptr)

mimo_remove_cp_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mimo_remove_cp = mimo_remove_cp.make;

class mimo_extract_subcarriers(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int N_rb_dl, int fftl, int rxant) -> mimo_extract_subcarriers_sptr

        Return a shared_ptr to a new instance of lte::mimo_extract_subcarriers.

        To avoid accidental use of raw pointers, lte::mimo_extract_subcarriers's constructor is in a private implementation class. lte::mimo_extract_subcarriers::make is the public interface for creating new instances.

        Params: (N_rb_dl, fftl, rxant)
        """
        return _lte_swig.mimo_extract_subcarriers_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_mimo_extract_subcarriers
    __del__ = lambda self : None;
mimo_extract_subcarriers_swigregister = _lte_swig.mimo_extract_subcarriers_swigregister
mimo_extract_subcarriers_swigregister(mimo_extract_subcarriers)

def mimo_extract_subcarriers_make(*args, **kwargs):
  """
    mimo_extract_subcarriers_make(int N_rb_dl, int fftl, int rxant) -> mimo_extract_subcarriers_sptr

    Return a shared_ptr to a new instance of lte::mimo_extract_subcarriers.

    To avoid accidental use of raw pointers, lte::mimo_extract_subcarriers's constructor is in a private implementation class. lte::mimo_extract_subcarriers::make is the public interface for creating new instances.

    Params: (N_rb_dl, fftl, rxant)
    """
  return _lte_swig.mimo_extract_subcarriers_make(*args, **kwargs)

class mimo_extract_subcarriers_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::mimo_extract_subcarriers)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::mimo_extract_subcarriers)> self) -> mimo_extract_subcarriers_sptr
        __init__(boost::shared_ptr<(gr::lte::mimo_extract_subcarriers)> self, mimo_extract_subcarriers p) -> mimo_extract_subcarriers_sptr
        """
        this = _lte_swig.new_mimo_extract_subcarriers_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mimo_extract_subcarriers_sptr self) -> mimo_extract_subcarriers"""
        return _lte_swig.mimo_extract_subcarriers_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_mimo_extract_subcarriers_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(mimo_extract_subcarriers_sptr self, int N_rb_dl, int fftl, int rxant) -> mimo_extract_subcarriers_sptr

        Return a shared_ptr to a new instance of lte::mimo_extract_subcarriers.

        To avoid accidental use of raw pointers, lte::mimo_extract_subcarriers's constructor is in a private implementation class. lte::mimo_extract_subcarriers::make is the public interface for creating new instances.

        Params: (N_rb_dl, fftl, rxant)
        """
        return _lte_swig.mimo_extract_subcarriers_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(mimo_extract_subcarriers_sptr self) -> unsigned int"""
        return _lte_swig.mimo_extract_subcarriers_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mimo_extract_subcarriers_sptr self, int which, int delay)
        declare_sample_delay(mimo_extract_subcarriers_sptr self, unsigned int delay)
        """
        return _lte_swig.mimo_extract_subcarriers_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mimo_extract_subcarriers_sptr self, int which) -> unsigned int"""
        return _lte_swig.mimo_extract_subcarriers_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mimo_extract_subcarriers_sptr self) -> int"""
        return _lte_swig.mimo_extract_subcarriers_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mimo_extract_subcarriers_sptr self) -> double"""
        return _lte_swig.mimo_extract_subcarriers_sptr_relative_rate(self)

    def start(self):
        """start(mimo_extract_subcarriers_sptr self) -> bool"""
        return _lte_swig.mimo_extract_subcarriers_sptr_start(self)

    def stop(self):
        """stop(mimo_extract_subcarriers_sptr self) -> bool"""
        return _lte_swig.mimo_extract_subcarriers_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mimo_extract_subcarriers_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.mimo_extract_subcarriers_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mimo_extract_subcarriers_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.mimo_extract_subcarriers_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mimo_extract_subcarriers_sptr self) -> int"""
        return _lte_swig.mimo_extract_subcarriers_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mimo_extract_subcarriers_sptr self, int m)"""
        return _lte_swig.mimo_extract_subcarriers_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mimo_extract_subcarriers_sptr self)"""
        return _lte_swig.mimo_extract_subcarriers_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mimo_extract_subcarriers_sptr self) -> bool"""
        return _lte_swig.mimo_extract_subcarriers_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mimo_extract_subcarriers_sptr self, int m)"""
        return _lte_swig.mimo_extract_subcarriers_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mimo_extract_subcarriers_sptr self) -> int"""
        return _lte_swig.mimo_extract_subcarriers_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mimo_extract_subcarriers_sptr self, int i) -> long"""
        return _lte_swig.mimo_extract_subcarriers_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mimo_extract_subcarriers_sptr self, long max_output_buffer)
        set_max_output_buffer(mimo_extract_subcarriers_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.mimo_extract_subcarriers_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mimo_extract_subcarriers_sptr self, int i) -> long"""
        return _lte_swig.mimo_extract_subcarriers_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mimo_extract_subcarriers_sptr self, long min_output_buffer)
        set_min_output_buffer(mimo_extract_subcarriers_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.mimo_extract_subcarriers_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mimo_extract_subcarriers_sptr self) -> float"""
        return _lte_swig.mimo_extract_subcarriers_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mimo_extract_subcarriers_sptr self) -> float"""
        return _lte_swig.mimo_extract_subcarriers_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mimo_extract_subcarriers_sptr self) -> float"""
        return _lte_swig.mimo_extract_subcarriers_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mimo_extract_subcarriers_sptr self) -> float"""
        return _lte_swig.mimo_extract_subcarriers_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mimo_extract_subcarriers_sptr self) -> float"""
        return _lte_swig.mimo_extract_subcarriers_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mimo_extract_subcarriers_sptr self) -> float"""
        return _lte_swig.mimo_extract_subcarriers_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mimo_extract_subcarriers_sptr self, int which) -> float
        pc_input_buffers_full(mimo_extract_subcarriers_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_extract_subcarriers_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mimo_extract_subcarriers_sptr self, int which) -> float
        pc_input_buffers_full_avg(mimo_extract_subcarriers_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_extract_subcarriers_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mimo_extract_subcarriers_sptr self, int which) -> float
        pc_input_buffers_full_var(mimo_extract_subcarriers_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_extract_subcarriers_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mimo_extract_subcarriers_sptr self, int which) -> float
        pc_output_buffers_full(mimo_extract_subcarriers_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_extract_subcarriers_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mimo_extract_subcarriers_sptr self, int which) -> float
        pc_output_buffers_full_avg(mimo_extract_subcarriers_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_extract_subcarriers_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mimo_extract_subcarriers_sptr self, int which) -> float
        pc_output_buffers_full_var(mimo_extract_subcarriers_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_extract_subcarriers_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mimo_extract_subcarriers_sptr self) -> float"""
        return _lte_swig.mimo_extract_subcarriers_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mimo_extract_subcarriers_sptr self) -> float"""
        return _lte_swig.mimo_extract_subcarriers_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mimo_extract_subcarriers_sptr self) -> float"""
        return _lte_swig.mimo_extract_subcarriers_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mimo_extract_subcarriers_sptr self) -> float"""
        return _lte_swig.mimo_extract_subcarriers_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mimo_extract_subcarriers_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.mimo_extract_subcarriers_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mimo_extract_subcarriers_sptr self)"""
        return _lte_swig.mimo_extract_subcarriers_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mimo_extract_subcarriers_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.mimo_extract_subcarriers_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mimo_extract_subcarriers_sptr self) -> int"""
        return _lte_swig.mimo_extract_subcarriers_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mimo_extract_subcarriers_sptr self) -> int"""
        return _lte_swig.mimo_extract_subcarriers_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mimo_extract_subcarriers_sptr self, int priority) -> int"""
        return _lte_swig.mimo_extract_subcarriers_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mimo_extract_subcarriers_sptr self) -> std::string"""
        return _lte_swig.mimo_extract_subcarriers_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mimo_extract_subcarriers_sptr self) -> std::string"""
        return _lte_swig.mimo_extract_subcarriers_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mimo_extract_subcarriers_sptr self) -> io_signature_sptr"""
        return _lte_swig.mimo_extract_subcarriers_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mimo_extract_subcarriers_sptr self) -> io_signature_sptr"""
        return _lte_swig.mimo_extract_subcarriers_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mimo_extract_subcarriers_sptr self) -> long"""
        return _lte_swig.mimo_extract_subcarriers_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mimo_extract_subcarriers_sptr self) -> basic_block_sptr"""
        return _lte_swig.mimo_extract_subcarriers_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mimo_extract_subcarriers_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.mimo_extract_subcarriers_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mimo_extract_subcarriers_sptr self) -> std::string"""
        return _lte_swig.mimo_extract_subcarriers_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mimo_extract_subcarriers_sptr self, std::string name)"""
        return _lte_swig.mimo_extract_subcarriers_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mimo_extract_subcarriers_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.mimo_extract_subcarriers_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mimo_extract_subcarriers_sptr self) -> swig_int_ptr"""
        return _lte_swig.mimo_extract_subcarriers_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mimo_extract_subcarriers_sptr self) -> swig_int_ptr"""
        return _lte_swig.mimo_extract_subcarriers_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mimo_extract_subcarriers_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.mimo_extract_subcarriers_sptr_message_subscribers(self, *args, **kwargs)

mimo_extract_subcarriers_sptr_swigregister = _lte_swig.mimo_extract_subcarriers_sptr_swigregister
mimo_extract_subcarriers_sptr_swigregister(mimo_extract_subcarriers_sptr)

mimo_extract_subcarriers_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mimo_extract_subcarriers = mimo_extract_subcarriers.make;

class mimo_channel_estimator(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int rxant, int subcarriers, std::string tag_key, std::string msg_buf_name, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & pilot_carriers, 
            gr_vector_vector_complexf pilot_symbols) -> mimo_channel_estimator_sptr

        Return a shared_ptr to a new instance of lte::mimo_channel_estimator.

        To avoid accidental use of raw pointers, lte::mimo_channel_estimator's constructor is in a private implementation class. lte::mimo_channel_estimator::make is the public interface for creating new instances.

        Params: (rxant, subcarriers, tag_key, msg_buf_name, pilot_carriers, pilot_symbols)
        """
        return _lte_swig.mimo_channel_estimator_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_mimo_channel_estimator
    __del__ = lambda self : None;
mimo_channel_estimator_swigregister = _lte_swig.mimo_channel_estimator_swigregister
mimo_channel_estimator_swigregister(mimo_channel_estimator)

def mimo_channel_estimator_make(*args, **kwargs):
  """
    mimo_channel_estimator_make(int rxant, int subcarriers, std::string tag_key, std::string msg_buf_name, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & pilot_carriers, 
        gr_vector_vector_complexf pilot_symbols) -> mimo_channel_estimator_sptr

    Return a shared_ptr to a new instance of lte::mimo_channel_estimator.

    To avoid accidental use of raw pointers, lte::mimo_channel_estimator's constructor is in a private implementation class. lte::mimo_channel_estimator::make is the public interface for creating new instances.

    Params: (rxant, subcarriers, tag_key, msg_buf_name, pilot_carriers, pilot_symbols)
    """
  return _lte_swig.mimo_channel_estimator_make(*args, **kwargs)

class mimo_channel_estimator_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::mimo_channel_estimator)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::mimo_channel_estimator)> self) -> mimo_channel_estimator_sptr
        __init__(boost::shared_ptr<(gr::lte::mimo_channel_estimator)> self, mimo_channel_estimator p) -> mimo_channel_estimator_sptr
        """
        this = _lte_swig.new_mimo_channel_estimator_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mimo_channel_estimator_sptr self) -> mimo_channel_estimator"""
        return _lte_swig.mimo_channel_estimator_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_mimo_channel_estimator_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(mimo_channel_estimator_sptr self, int rxant, int subcarriers, std::string tag_key, std::string msg_buf_name, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & pilot_carriers, 
            gr_vector_vector_complexf pilot_symbols) -> mimo_channel_estimator_sptr

        Return a shared_ptr to a new instance of lte::mimo_channel_estimator.

        To avoid accidental use of raw pointers, lte::mimo_channel_estimator's constructor is in a private implementation class. lte::mimo_channel_estimator::make is the public interface for creating new instances.

        Params: (rxant, subcarriers, tag_key, msg_buf_name, pilot_carriers, pilot_symbols)
        """
        return _lte_swig.mimo_channel_estimator_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(mimo_channel_estimator_sptr self) -> unsigned int"""
        return _lte_swig.mimo_channel_estimator_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mimo_channel_estimator_sptr self, int which, int delay)
        declare_sample_delay(mimo_channel_estimator_sptr self, unsigned int delay)
        """
        return _lte_swig.mimo_channel_estimator_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mimo_channel_estimator_sptr self, int which) -> unsigned int"""
        return _lte_swig.mimo_channel_estimator_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mimo_channel_estimator_sptr self) -> int"""
        return _lte_swig.mimo_channel_estimator_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mimo_channel_estimator_sptr self) -> double"""
        return _lte_swig.mimo_channel_estimator_sptr_relative_rate(self)

    def start(self):
        """start(mimo_channel_estimator_sptr self) -> bool"""
        return _lte_swig.mimo_channel_estimator_sptr_start(self)

    def stop(self):
        """stop(mimo_channel_estimator_sptr self) -> bool"""
        return _lte_swig.mimo_channel_estimator_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mimo_channel_estimator_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.mimo_channel_estimator_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mimo_channel_estimator_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.mimo_channel_estimator_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mimo_channel_estimator_sptr self) -> int"""
        return _lte_swig.mimo_channel_estimator_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mimo_channel_estimator_sptr self, int m)"""
        return _lte_swig.mimo_channel_estimator_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mimo_channel_estimator_sptr self)"""
        return _lte_swig.mimo_channel_estimator_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mimo_channel_estimator_sptr self) -> bool"""
        return _lte_swig.mimo_channel_estimator_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mimo_channel_estimator_sptr self, int m)"""
        return _lte_swig.mimo_channel_estimator_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mimo_channel_estimator_sptr self) -> int"""
        return _lte_swig.mimo_channel_estimator_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mimo_channel_estimator_sptr self, int i) -> long"""
        return _lte_swig.mimo_channel_estimator_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mimo_channel_estimator_sptr self, long max_output_buffer)
        set_max_output_buffer(mimo_channel_estimator_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.mimo_channel_estimator_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mimo_channel_estimator_sptr self, int i) -> long"""
        return _lte_swig.mimo_channel_estimator_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mimo_channel_estimator_sptr self, long min_output_buffer)
        set_min_output_buffer(mimo_channel_estimator_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.mimo_channel_estimator_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mimo_channel_estimator_sptr self) -> float"""
        return _lte_swig.mimo_channel_estimator_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mimo_channel_estimator_sptr self) -> float"""
        return _lte_swig.mimo_channel_estimator_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mimo_channel_estimator_sptr self) -> float"""
        return _lte_swig.mimo_channel_estimator_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mimo_channel_estimator_sptr self) -> float"""
        return _lte_swig.mimo_channel_estimator_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mimo_channel_estimator_sptr self) -> float"""
        return _lte_swig.mimo_channel_estimator_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mimo_channel_estimator_sptr self) -> float"""
        return _lte_swig.mimo_channel_estimator_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mimo_channel_estimator_sptr self, int which) -> float
        pc_input_buffers_full(mimo_channel_estimator_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_channel_estimator_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mimo_channel_estimator_sptr self, int which) -> float
        pc_input_buffers_full_avg(mimo_channel_estimator_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_channel_estimator_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mimo_channel_estimator_sptr self, int which) -> float
        pc_input_buffers_full_var(mimo_channel_estimator_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_channel_estimator_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mimo_channel_estimator_sptr self, int which) -> float
        pc_output_buffers_full(mimo_channel_estimator_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_channel_estimator_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mimo_channel_estimator_sptr self, int which) -> float
        pc_output_buffers_full_avg(mimo_channel_estimator_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_channel_estimator_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mimo_channel_estimator_sptr self, int which) -> float
        pc_output_buffers_full_var(mimo_channel_estimator_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_channel_estimator_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mimo_channel_estimator_sptr self) -> float"""
        return _lte_swig.mimo_channel_estimator_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mimo_channel_estimator_sptr self) -> float"""
        return _lte_swig.mimo_channel_estimator_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mimo_channel_estimator_sptr self) -> float"""
        return _lte_swig.mimo_channel_estimator_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mimo_channel_estimator_sptr self) -> float"""
        return _lte_swig.mimo_channel_estimator_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mimo_channel_estimator_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.mimo_channel_estimator_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mimo_channel_estimator_sptr self)"""
        return _lte_swig.mimo_channel_estimator_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mimo_channel_estimator_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.mimo_channel_estimator_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mimo_channel_estimator_sptr self) -> int"""
        return _lte_swig.mimo_channel_estimator_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mimo_channel_estimator_sptr self) -> int"""
        return _lte_swig.mimo_channel_estimator_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mimo_channel_estimator_sptr self, int priority) -> int"""
        return _lte_swig.mimo_channel_estimator_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mimo_channel_estimator_sptr self) -> std::string"""
        return _lte_swig.mimo_channel_estimator_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mimo_channel_estimator_sptr self) -> std::string"""
        return _lte_swig.mimo_channel_estimator_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mimo_channel_estimator_sptr self) -> io_signature_sptr"""
        return _lte_swig.mimo_channel_estimator_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mimo_channel_estimator_sptr self) -> io_signature_sptr"""
        return _lte_swig.mimo_channel_estimator_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mimo_channel_estimator_sptr self) -> long"""
        return _lte_swig.mimo_channel_estimator_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mimo_channel_estimator_sptr self) -> basic_block_sptr"""
        return _lte_swig.mimo_channel_estimator_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mimo_channel_estimator_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.mimo_channel_estimator_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mimo_channel_estimator_sptr self) -> std::string"""
        return _lte_swig.mimo_channel_estimator_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mimo_channel_estimator_sptr self, std::string name)"""
        return _lte_swig.mimo_channel_estimator_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mimo_channel_estimator_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.mimo_channel_estimator_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mimo_channel_estimator_sptr self) -> swig_int_ptr"""
        return _lte_swig.mimo_channel_estimator_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mimo_channel_estimator_sptr self) -> swig_int_ptr"""
        return _lte_swig.mimo_channel_estimator_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mimo_channel_estimator_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.mimo_channel_estimator_sptr_message_subscribers(self, *args, **kwargs)

mimo_channel_estimator_sptr_swigregister = _lte_swig.mimo_channel_estimator_sptr_swigregister
mimo_channel_estimator_sptr_swigregister(mimo_channel_estimator_sptr)

mimo_channel_estimator_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mimo_channel_estimator = mimo_channel_estimator.make;

class mimo_pbch_demux(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int N_rb_dl, int rxant) -> mimo_pbch_demux_sptr

        Return a shared_ptr to a new instance of lte::mimo_pbch_demux.

        To avoid accidental use of raw pointers, lte::mimo_pbch_demux's constructor is in a private implementation class. lte::mimo_pbch_demux::make is the public interface for creating new instances.

        Params: (N_rb_dl, rxant)
        """
        return _lte_swig.mimo_pbch_demux_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_mimo_pbch_demux
    __del__ = lambda self : None;
mimo_pbch_demux_swigregister = _lte_swig.mimo_pbch_demux_swigregister
mimo_pbch_demux_swigregister(mimo_pbch_demux)

def mimo_pbch_demux_make(*args, **kwargs):
  """
    mimo_pbch_demux_make(int N_rb_dl, int rxant) -> mimo_pbch_demux_sptr

    Return a shared_ptr to a new instance of lte::mimo_pbch_demux.

    To avoid accidental use of raw pointers, lte::mimo_pbch_demux's constructor is in a private implementation class. lte::mimo_pbch_demux::make is the public interface for creating new instances.

    Params: (N_rb_dl, rxant)
    """
  return _lte_swig.mimo_pbch_demux_make(*args, **kwargs)

class mimo_pbch_demux_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::mimo_pbch_demux)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::mimo_pbch_demux)> self) -> mimo_pbch_demux_sptr
        __init__(boost::shared_ptr<(gr::lte::mimo_pbch_demux)> self, mimo_pbch_demux p) -> mimo_pbch_demux_sptr
        """
        this = _lte_swig.new_mimo_pbch_demux_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mimo_pbch_demux_sptr self) -> mimo_pbch_demux"""
        return _lte_swig.mimo_pbch_demux_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_mimo_pbch_demux_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(mimo_pbch_demux_sptr self, int N_rb_dl, int rxant) -> mimo_pbch_demux_sptr

        Return a shared_ptr to a new instance of lte::mimo_pbch_demux.

        To avoid accidental use of raw pointers, lte::mimo_pbch_demux's constructor is in a private implementation class. lte::mimo_pbch_demux::make is the public interface for creating new instances.

        Params: (N_rb_dl, rxant)
        """
        return _lte_swig.mimo_pbch_demux_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(mimo_pbch_demux_sptr self) -> unsigned int"""
        return _lte_swig.mimo_pbch_demux_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mimo_pbch_demux_sptr self, int which, int delay)
        declare_sample_delay(mimo_pbch_demux_sptr self, unsigned int delay)
        """
        return _lte_swig.mimo_pbch_demux_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mimo_pbch_demux_sptr self, int which) -> unsigned int"""
        return _lte_swig.mimo_pbch_demux_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mimo_pbch_demux_sptr self) -> int"""
        return _lte_swig.mimo_pbch_demux_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mimo_pbch_demux_sptr self) -> double"""
        return _lte_swig.mimo_pbch_demux_sptr_relative_rate(self)

    def start(self):
        """start(mimo_pbch_demux_sptr self) -> bool"""
        return _lte_swig.mimo_pbch_demux_sptr_start(self)

    def stop(self):
        """stop(mimo_pbch_demux_sptr self) -> bool"""
        return _lte_swig.mimo_pbch_demux_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mimo_pbch_demux_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.mimo_pbch_demux_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mimo_pbch_demux_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.mimo_pbch_demux_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mimo_pbch_demux_sptr self) -> int"""
        return _lte_swig.mimo_pbch_demux_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mimo_pbch_demux_sptr self, int m)"""
        return _lte_swig.mimo_pbch_demux_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mimo_pbch_demux_sptr self)"""
        return _lte_swig.mimo_pbch_demux_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mimo_pbch_demux_sptr self) -> bool"""
        return _lte_swig.mimo_pbch_demux_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mimo_pbch_demux_sptr self, int m)"""
        return _lte_swig.mimo_pbch_demux_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mimo_pbch_demux_sptr self) -> int"""
        return _lte_swig.mimo_pbch_demux_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mimo_pbch_demux_sptr self, int i) -> long"""
        return _lte_swig.mimo_pbch_demux_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mimo_pbch_demux_sptr self, long max_output_buffer)
        set_max_output_buffer(mimo_pbch_demux_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.mimo_pbch_demux_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mimo_pbch_demux_sptr self, int i) -> long"""
        return _lte_swig.mimo_pbch_demux_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mimo_pbch_demux_sptr self, long min_output_buffer)
        set_min_output_buffer(mimo_pbch_demux_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.mimo_pbch_demux_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mimo_pbch_demux_sptr self) -> float"""
        return _lte_swig.mimo_pbch_demux_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mimo_pbch_demux_sptr self) -> float"""
        return _lte_swig.mimo_pbch_demux_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mimo_pbch_demux_sptr self) -> float"""
        return _lte_swig.mimo_pbch_demux_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mimo_pbch_demux_sptr self) -> float"""
        return _lte_swig.mimo_pbch_demux_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mimo_pbch_demux_sptr self) -> float"""
        return _lte_swig.mimo_pbch_demux_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mimo_pbch_demux_sptr self) -> float"""
        return _lte_swig.mimo_pbch_demux_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mimo_pbch_demux_sptr self, int which) -> float
        pc_input_buffers_full(mimo_pbch_demux_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pbch_demux_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mimo_pbch_demux_sptr self, int which) -> float
        pc_input_buffers_full_avg(mimo_pbch_demux_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pbch_demux_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mimo_pbch_demux_sptr self, int which) -> float
        pc_input_buffers_full_var(mimo_pbch_demux_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pbch_demux_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mimo_pbch_demux_sptr self, int which) -> float
        pc_output_buffers_full(mimo_pbch_demux_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pbch_demux_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mimo_pbch_demux_sptr self, int which) -> float
        pc_output_buffers_full_avg(mimo_pbch_demux_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pbch_demux_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mimo_pbch_demux_sptr self, int which) -> float
        pc_output_buffers_full_var(mimo_pbch_demux_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pbch_demux_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mimo_pbch_demux_sptr self) -> float"""
        return _lte_swig.mimo_pbch_demux_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mimo_pbch_demux_sptr self) -> float"""
        return _lte_swig.mimo_pbch_demux_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mimo_pbch_demux_sptr self) -> float"""
        return _lte_swig.mimo_pbch_demux_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mimo_pbch_demux_sptr self) -> float"""
        return _lte_swig.mimo_pbch_demux_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mimo_pbch_demux_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.mimo_pbch_demux_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mimo_pbch_demux_sptr self)"""
        return _lte_swig.mimo_pbch_demux_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mimo_pbch_demux_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.mimo_pbch_demux_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mimo_pbch_demux_sptr self) -> int"""
        return _lte_swig.mimo_pbch_demux_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mimo_pbch_demux_sptr self) -> int"""
        return _lte_swig.mimo_pbch_demux_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mimo_pbch_demux_sptr self, int priority) -> int"""
        return _lte_swig.mimo_pbch_demux_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mimo_pbch_demux_sptr self) -> std::string"""
        return _lte_swig.mimo_pbch_demux_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mimo_pbch_demux_sptr self) -> std::string"""
        return _lte_swig.mimo_pbch_demux_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mimo_pbch_demux_sptr self) -> io_signature_sptr"""
        return _lte_swig.mimo_pbch_demux_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mimo_pbch_demux_sptr self) -> io_signature_sptr"""
        return _lte_swig.mimo_pbch_demux_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mimo_pbch_demux_sptr self) -> long"""
        return _lte_swig.mimo_pbch_demux_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mimo_pbch_demux_sptr self) -> basic_block_sptr"""
        return _lte_swig.mimo_pbch_demux_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mimo_pbch_demux_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.mimo_pbch_demux_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mimo_pbch_demux_sptr self) -> std::string"""
        return _lte_swig.mimo_pbch_demux_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mimo_pbch_demux_sptr self, std::string name)"""
        return _lte_swig.mimo_pbch_demux_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mimo_pbch_demux_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.mimo_pbch_demux_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mimo_pbch_demux_sptr self) -> swig_int_ptr"""
        return _lte_swig.mimo_pbch_demux_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mimo_pbch_demux_sptr self) -> swig_int_ptr"""
        return _lte_swig.mimo_pbch_demux_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mimo_pbch_demux_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.mimo_pbch_demux_sptr_message_subscribers(self, *args, **kwargs)

mimo_pbch_demux_sptr_swigregister = _lte_swig.mimo_pbch_demux_sptr_swigregister
mimo_pbch_demux_sptr_swigregister(mimo_pbch_demux_sptr)

mimo_pbch_demux_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mimo_pbch_demux = mimo_pbch_demux.make;

class mimo_pre_decoder(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int rxant, int N_ant, int vlen, std::string style) -> mimo_pre_decoder_sptr

        Return a shared_ptr to a new instance of lte::mimo_pre_decoder.

        To avoid accidental use of raw pointers, lte::mimo_pre_decoder's constructor is in a private implementation class. lte::mimo_pre_decoder::make is the public interface for creating new instances.

        Params: (rxant, N_ant, vlen, style)
        """
        return _lte_swig.mimo_pre_decoder_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _lte_swig.delete_mimo_pre_decoder
    __del__ = lambda self : None;
mimo_pre_decoder_swigregister = _lte_swig.mimo_pre_decoder_swigregister
mimo_pre_decoder_swigregister(mimo_pre_decoder)

def mimo_pre_decoder_make(*args, **kwargs):
  """
    mimo_pre_decoder_make(int rxant, int N_ant, int vlen, std::string style) -> mimo_pre_decoder_sptr

    Return a shared_ptr to a new instance of lte::mimo_pre_decoder.

    To avoid accidental use of raw pointers, lte::mimo_pre_decoder's constructor is in a private implementation class. lte::mimo_pre_decoder::make is the public interface for creating new instances.

    Params: (rxant, N_ant, vlen, style)
    """
  return _lte_swig.mimo_pre_decoder_make(*args, **kwargs)

class mimo_pre_decoder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lte::mimo_pre_decoder)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::lte::mimo_pre_decoder)> self) -> mimo_pre_decoder_sptr
        __init__(boost::shared_ptr<(gr::lte::mimo_pre_decoder)> self, mimo_pre_decoder p) -> mimo_pre_decoder_sptr
        """
        this = _lte_swig.new_mimo_pre_decoder_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mimo_pre_decoder_sptr self) -> mimo_pre_decoder"""
        return _lte_swig.mimo_pre_decoder_sptr___deref__(self)

    __swig_destroy__ = _lte_swig.delete_mimo_pre_decoder_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(mimo_pre_decoder_sptr self, int rxant, int N_ant, int vlen, std::string style) -> mimo_pre_decoder_sptr

        Return a shared_ptr to a new instance of lte::mimo_pre_decoder.

        To avoid accidental use of raw pointers, lte::mimo_pre_decoder's constructor is in a private implementation class. lte::mimo_pre_decoder::make is the public interface for creating new instances.

        Params: (rxant, N_ant, vlen, style)
        """
        return _lte_swig.mimo_pre_decoder_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(mimo_pre_decoder_sptr self) -> unsigned int"""
        return _lte_swig.mimo_pre_decoder_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mimo_pre_decoder_sptr self, int which, int delay)
        declare_sample_delay(mimo_pre_decoder_sptr self, unsigned int delay)
        """
        return _lte_swig.mimo_pre_decoder_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mimo_pre_decoder_sptr self, int which) -> unsigned int"""
        return _lte_swig.mimo_pre_decoder_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mimo_pre_decoder_sptr self) -> int"""
        return _lte_swig.mimo_pre_decoder_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mimo_pre_decoder_sptr self) -> double"""
        return _lte_swig.mimo_pre_decoder_sptr_relative_rate(self)

    def start(self):
        """start(mimo_pre_decoder_sptr self) -> bool"""
        return _lte_swig.mimo_pre_decoder_sptr_start(self)

    def stop(self):
        """stop(mimo_pre_decoder_sptr self) -> bool"""
        return _lte_swig.mimo_pre_decoder_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mimo_pre_decoder_sptr self, unsigned int which_input) -> uint64_t"""
        return _lte_swig.mimo_pre_decoder_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mimo_pre_decoder_sptr self, unsigned int which_output) -> uint64_t"""
        return _lte_swig.mimo_pre_decoder_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mimo_pre_decoder_sptr self) -> int"""
        return _lte_swig.mimo_pre_decoder_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mimo_pre_decoder_sptr self, int m)"""
        return _lte_swig.mimo_pre_decoder_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mimo_pre_decoder_sptr self)"""
        return _lte_swig.mimo_pre_decoder_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mimo_pre_decoder_sptr self) -> bool"""
        return _lte_swig.mimo_pre_decoder_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mimo_pre_decoder_sptr self, int m)"""
        return _lte_swig.mimo_pre_decoder_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mimo_pre_decoder_sptr self) -> int"""
        return _lte_swig.mimo_pre_decoder_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mimo_pre_decoder_sptr self, int i) -> long"""
        return _lte_swig.mimo_pre_decoder_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mimo_pre_decoder_sptr self, long max_output_buffer)
        set_max_output_buffer(mimo_pre_decoder_sptr self, int port, long max_output_buffer)
        """
        return _lte_swig.mimo_pre_decoder_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mimo_pre_decoder_sptr self, int i) -> long"""
        return _lte_swig.mimo_pre_decoder_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mimo_pre_decoder_sptr self, long min_output_buffer)
        set_min_output_buffer(mimo_pre_decoder_sptr self, int port, long min_output_buffer)
        """
        return _lte_swig.mimo_pre_decoder_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mimo_pre_decoder_sptr self) -> float"""
        return _lte_swig.mimo_pre_decoder_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mimo_pre_decoder_sptr self) -> float"""
        return _lte_swig.mimo_pre_decoder_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mimo_pre_decoder_sptr self) -> float"""
        return _lte_swig.mimo_pre_decoder_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mimo_pre_decoder_sptr self) -> float"""
        return _lte_swig.mimo_pre_decoder_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mimo_pre_decoder_sptr self) -> float"""
        return _lte_swig.mimo_pre_decoder_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mimo_pre_decoder_sptr self) -> float"""
        return _lte_swig.mimo_pre_decoder_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mimo_pre_decoder_sptr self, int which) -> float
        pc_input_buffers_full(mimo_pre_decoder_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pre_decoder_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mimo_pre_decoder_sptr self, int which) -> float
        pc_input_buffers_full_avg(mimo_pre_decoder_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pre_decoder_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mimo_pre_decoder_sptr self, int which) -> float
        pc_input_buffers_full_var(mimo_pre_decoder_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pre_decoder_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mimo_pre_decoder_sptr self, int which) -> float
        pc_output_buffers_full(mimo_pre_decoder_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pre_decoder_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mimo_pre_decoder_sptr self, int which) -> float
        pc_output_buffers_full_avg(mimo_pre_decoder_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pre_decoder_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mimo_pre_decoder_sptr self, int which) -> float
        pc_output_buffers_full_var(mimo_pre_decoder_sptr self) -> pmt_vector_float
        """
        return _lte_swig.mimo_pre_decoder_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mimo_pre_decoder_sptr self) -> float"""
        return _lte_swig.mimo_pre_decoder_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mimo_pre_decoder_sptr self) -> float"""
        return _lte_swig.mimo_pre_decoder_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mimo_pre_decoder_sptr self) -> float"""
        return _lte_swig.mimo_pre_decoder_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mimo_pre_decoder_sptr self) -> float"""
        return _lte_swig.mimo_pre_decoder_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mimo_pre_decoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lte_swig.mimo_pre_decoder_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mimo_pre_decoder_sptr self)"""
        return _lte_swig.mimo_pre_decoder_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mimo_pre_decoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lte_swig.mimo_pre_decoder_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mimo_pre_decoder_sptr self) -> int"""
        return _lte_swig.mimo_pre_decoder_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mimo_pre_decoder_sptr self) -> int"""
        return _lte_swig.mimo_pre_decoder_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mimo_pre_decoder_sptr self, int priority) -> int"""
        return _lte_swig.mimo_pre_decoder_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mimo_pre_decoder_sptr self) -> std::string"""
        return _lte_swig.mimo_pre_decoder_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mimo_pre_decoder_sptr self) -> std::string"""
        return _lte_swig.mimo_pre_decoder_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mimo_pre_decoder_sptr self) -> io_signature_sptr"""
        return _lte_swig.mimo_pre_decoder_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mimo_pre_decoder_sptr self) -> io_signature_sptr"""
        return _lte_swig.mimo_pre_decoder_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mimo_pre_decoder_sptr self) -> long"""
        return _lte_swig.mimo_pre_decoder_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mimo_pre_decoder_sptr self) -> basic_block_sptr"""
        return _lte_swig.mimo_pre_decoder_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mimo_pre_decoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _lte_swig.mimo_pre_decoder_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mimo_pre_decoder_sptr self) -> std::string"""
        return _lte_swig.mimo_pre_decoder_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mimo_pre_decoder_sptr self, std::string name)"""
        return _lte_swig.mimo_pre_decoder_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mimo_pre_decoder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lte_swig.mimo_pre_decoder_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mimo_pre_decoder_sptr self) -> swig_int_ptr"""
        return _lte_swig.mimo_pre_decoder_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mimo_pre_decoder_sptr self) -> swig_int_ptr"""
        return _lte_swig.mimo_pre_decoder_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mimo_pre_decoder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lte_swig.mimo_pre_decoder_sptr_message_subscribers(self, *args, **kwargs)

mimo_pre_decoder_sptr_swigregister = _lte_swig.mimo_pre_decoder_sptr_swigregister
mimo_pre_decoder_sptr_swigregister(mimo_pre_decoder_sptr)

mimo_pre_decoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mimo_pre_decoder = mimo_pre_decoder.make;



